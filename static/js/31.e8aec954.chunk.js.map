{"version":3,"sources":["pages/Send/index.js"],"names":["SendPage","location","useLocation","history","useHistory","useState","amount","setAmount","description","setDescription","unit","setUnit","contact","setContact","error","setError","setLoading","paymentLoading","setPaymentLoading","onInputChange","useCallback","e","target","name","value","selectContact","a","console","log","type","Http","post","payReq","paymentRequest","data","decodedRequest","num_satoshis","useEffect","routerState","state","address","request","dest","sendBTCPayment","addr","payment","sendLightningPayment","payreq","amt","feeLimit","keysend","sendGunPayment","recipientPub","pk","parseInt","memo","onSubmit","includes","push","response","errorMessage","message","containerClassName","title","className","fullScreen","overlay","text","selected","features","label","onChange","disabled","inputMode","element","onSuccess"],"mappings":"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","file":"static/js/31.e8aec954.chunk.js","sourcesContent":["import React, { useCallback, useState,useEffect } from \"react\";\nimport {  useHistory, useLocation } from \"react-router\";\nimport Http from \"../../utils/Http\";\nimport SlidePay from \"../../common/SlidePay\";\nimport InputGroup from \"../../common/InputGroup\";\nimport ContactSearch from \"../../common/ContactsSearch\";\nimport DialogPageContainer from \"../../common/DialogPageContainer\";\nimport Suggestion from \"../../common/ContactsSearch/components/Suggestion\";\nimport Loader from \"../../common/Loader\";\nimport \"./css/index.css\";\n\nconst SendPage = () => {\n  const location = useLocation()\n  const history = useHistory()\n  \n  const [amount, setAmount] = useState(0);\n  const [description, setDescription] = useState(\"\");\n  const [unit, setUnit] = useState(\"sats\");\n  const [contact, setContact] = useState();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [paymentLoading, setPaymentLoading] = useState(false);\n\n  const onInputChange = useCallback(e => {\n    if (e.target.name === \"amount\") {\n      setAmount(e.target.value);\n    }\n\n    if (e.target.name === \"description\") {\n      setDescription(e.target.value);\n    }\n\n    if (e.target.name === \"unit\") {\n      setUnit(e.target.value);\n    }\n  }, []);\n\n  const selectContact = useCallback(async contact => {\n    console.log(\"selectContact:\", contact);\n    setLoading(true);\n    setContact(contact);\n\n    if (contact && contact.type === \"invoice\") {\n      // Do invoice decoding\n      const { data } = await Http.post(\"/api/lnd/decodePayReq\", {\n        payReq: contact.paymentRequest\n      });\n\n      const { decodedRequest } = data;\n\n      setAmount(decodedRequest.num_satoshis);\n      setUnit(\"sats\");\n      setDescription(decodedRequest.description);\n    }\n\n    setLoading(false);\n  }, []);\n  //effect for incoming redirects with data\n  useEffect(()=>{\n    const {state:routerState} = location\n    \n    if(routerState && routerState.data && routerState.data.type){\n      const {data} = routerState\n      switch (data.type) {\n        case 'btc':{\n          selectContact({\n            type:\"btc\",\n            address:data.address\n          })\n          if(data.amount){\n            setAmount(data.amount)\n          }\n          break\n        }\n        case 'ln':{\n          selectContact({\n            type:\"invoice\",\n            paymentRequest:data.request\n          })\n          break\n        }\n        case 'keysend':{\n          selectContact({\n            type:\"keysend\",\n            dest:data.address\n          })\n          break\n        }\n        default:\n          break;\n      }\n      location.state = {}\n    }\n  },[location,selectContact,setAmount])\n  const sendBTCPayment = useCallback(async () => {\n    if (contact) {\n      const { data: payment } = await Http.post(\"/api/lnd/sendcoins\", {\n        addr: contact.address,\n        amount: amount\n      });\n      console.log(payment);\n    }\n  }, [amount, contact]);\n\n  const sendLightningPayment = useCallback(async () => {\n    if (contact) {\n      const { data: payment } = await Http.post(\"/api/lnd/sendpayment\", {\n        dest: contact.dest,\n        payreq: contact.paymentRequest,\n        amt: contact.paymentRequest ? \"0\" : amount,\n        feeLimit: amount * 0.006 + 10, // TODO: Hardcoded fees for now\n        keysend: contact.type === \"keysend\"\n      });\n      console.log(payment);\n    }\n  }, [amount, contact]);\n\n  const sendGunPayment = useCallback(async () => {\n    if (contact) {\n      const { data: gunPayment } = await Http.post(\"/api/gun/sendpayment\", {\n        recipientPub: contact.pk,\n        amount: parseInt(amount),\n        feeLimit: amount * 0.006 + 10, // TODO: Hardcoded fees for now\n        memo: description\n      });\n    }\n  }, [amount, contact, description]);\n\n  const onSubmit = useCallback(async () => {\n    try {\n      setError(\"\");\n      setPaymentLoading(true);\n\n      if (contact?.type === \"btc\") {\n        await sendBTCPayment();\n      }\n\n      if ([\"invoice\", \"keysend\"].includes(contact?.type)) {\n        await sendLightningPayment();\n      }\n\n      if (contact?.type === \"contact\") {\n        await sendGunPayment();\n      }\n      history.push(\"/overview\")\n      setPaymentLoading(false);\n    } catch (err) {\n      console.error(err);\n      setError(err.response?.data.errorMessage ?? err.message);\n      setPaymentLoading(false);\n      throw err;\n    }\n  }, [contact,history, sendBTCPayment, sendGunPayment, sendLightningPayment]);\n\n  return (\n    <DialogPageContainer containerClassName=\"send-page\" title=\"SEND\">\n      <div className=\"send-form-container\">\n        {paymentLoading ? (\n          <Loader fullScreen overlay text=\"Processing Payment...\" />\n        ) : null}\n        {error ? <p className=\"form-error\">{error}</p> : null}\n        {!contact ? (\n          <div className=\"scan-qr-btn\">\n            <i className=\"scan-qr-icon icon icon-solid-scan\"></i>\n            <p className=\"scan-qr-text\">Scan QR</p>\n          </div>\n        ) : null}\n        {contact ? (\n          <Suggestion\n            selected\n            contact={contact}\n            selectContact={selectContact}\n          />\n        ) : (\n          <ContactSearch\n            selectContact={selectContact}\n            features={[\"btc\", \"keysend\", \"contact\", \"invoice\"]}\n          />\n        )}\n        <div className=\"inputs-group\">\n          <InputGroup\n            name=\"amount\"\n            label=\"Enter Amount\"\n            onChange={onInputChange}\n            value={amount}\n            disabled={contact?.type === \"invoice\"}\n            inputMode=\"decimal\"\n          />\n          <select\n            name=\"unit\"\n            className=\"unit-dropdown\"\n            onChange={onInputChange}\n            value={unit}\n            disabled={contact?.type === \"invoice\"}\n          >\n            <option value=\"sats\">sats</option>\n            <option value=\"btc\">BTC</option>\n          </select>\n        </div>\n        <InputGroup\n          name=\"description\"\n          label=\"Description\"\n          element=\"textarea\"\n          onChange={onInputChange}\n          type=\"textarea\"\n          value={description}\n          disabled={contact?.type === \"invoice\"}\n        />\n      </div>\n      <SlidePay disabled={!contact} onSuccess={onSubmit} />\n    </DialogPageContainer>\n  );\n};\n\nexport default SendPage;\n"],"sourceRoot":""}