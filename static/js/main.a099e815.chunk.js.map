{"version":3,"sources":["actions/OrdersActions.js","common/Loader/index.js","utils/Date.ts","utils/index.ts","utils/Http.js","actions/AuthActions.ts","reducers/NodeReducer.js","reducers/AuthReducer.js","reducers/WalletReducer.js","reducers/ChatReducer.js","reducers/DrawerReducer.js","reducers/ContentReducer.js","reducers/FeesReducer.js","reducers/FeedReducer.js","reducers/EncryptionReducer.js","reducers/UserProfilesReducer.js","reducers/OrdersReducer.js","reducers/index.ts","store/Migrations/index.js","store/Migrations/PeerMigration.js","store/sagas/node.ts","store/sagas/_store.ts","store/sagas/ping.ts","store/sagas/index.ts","store/selectors/auth.ts","store/selectors/users.ts","store/index.ts","utils/WebSocket.js","actions/ChatActions.js","utils/JSON.ts","utils/Encryption.ts","actions/WalletActions.js","actions/ContentActions.js","common/Drawer/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js","actions/UserProfilesActions.ts","actions/NodeActions.js","utils/FieldError.ts","actions/FeedActions.js","utils/Error.ts","actions/EncryptionActions.js","actions/DrawerActions.js","actions/FeesActions.js","utils/Gun.js","utils/String.js"],"names":["ACTIONS","ADD_MY_SERVICE","REMOVE_MY_SERVICE","ADD_BOUGHT_SERVICE","createService","clear","encrypted","dispatch","a","Http","post","path","value","data","ok","id","all","Object","entries","map","name","console","log","$$__ENCRYPT__FOR","Promise","serviceType","deleteService","subscribeMyServices","hostIP","query","rifleSocketExists","rifle","host","publicKey","reconnect","on","services","servicesEntries","forEach","get","service","type","serviceInfo","disconnectRifleSocket","buyService","owner","serviceID","servicePrice","amt","Number","to","memo","feeLimit","ackInfo","orderAck","JSON","parse","response","Loader","text","fullScreen","small","overlay","overlayBackground","style","height","use100vh","standaloneMode","window","matchMedia","matches","fullScreenStyles","marginBottom","overlayStyles","backgroundColor","className","classNames","useForceUpdate","React","setTick","tick","logger","warn","error","resizeImage","img","desiredLongEdge","compression","canvas","document","createElement","width","Math","round","getContext","drawImage","toDataURL","processImageFile","file","startsWith","TypeError","size","Common","res","rej","reader","FileReader","onload","e","target","result","ArrayBuffer","onFail","Error","stringify","onerror","onabort","readAsArrayBuffer","imageBuffer","url","URL","webkitURL","createObjectURL","Blob","_image","Image","src","image","resizedImage","normalizeURL","_url","__url","_","protocol","href","unprotectedRoutes","GET","POST","PUT","DELETE","encryptRequest","config","store","hostKeys","getState","encryption","hostId","node","remotePublicKey","Encryption","message","encryptedMessage","decryptResponse","userKeys","localPrivateKey","privateKey","decryptedMessage","interceptors","request","use","authToken","deviceId","localRequest","indexOf","headers","common","Authorization","method","toUpperCase","includes","reject","RESET_AUTH_INFO","SET_AUTH_STEP","SET_AUTHENTICATED","SET_AUTH_METHOD","LOGOUT","setAuthenticated","status","setAuthStep","step","setAuthMethod","logout","INITIAL_STATE","alias","authTokenExpirationDate","authMethod","hostingAttemptsDone","state","action","RESET_NODE_INFO","SET_HOST_IP","SET_HOST_ID","SET_AUTHENTICATED_USER","defaults","SET_ATTEMPTS_DONE","AUTH_ACTIONS","authenticated","authStep","userSessionKey","APISessionKey","defaultSteps","manual","shockWizard","shockCloud","auth","totalBalance","channelBalance","confirmedBalance","pendingChannelBalance","USDRate","transactions","content","page","totalPages","totalItems","payments","channels","invoices","peers","recentTransactions","_getUnifiedTransactionDate","item","parseInt","creation_date","settle_date","time_stamp","wallet","LOAD_BALANCE","Big","add","toString","LOAD_USD_RATE","LOAD_PEERS","ADD_PEER","REMOVE_PEER","filter","peer","pub_key","LOAD_CHANNELS","LOAD_TRANSACTIONS","LOAD_MORE_TRANSACTIONS","LOAD_INVOICES","LOAD_MORE_INVOICES","LOAD_PAYMENTS","LOAD_MORE_PAYMENTS","LOAD_RECENT_TRANSACTIONS","newRecentTransactions","sort","b","aDate","bDate","date","payment_hash","hash","payment_request","tx_hash","amount","label","RESET_RECENT_TRANSACTIONS","contacts","messages","sentRequests","receivedRequests","requestBlacklist","_identicalMessages","oldMessage","newMessage","localId","_sortMessages","timestamp","_processNewMessage","outgoing","userMessages","recipientPublicKey","existingMessage","body","sortedMessages","chat","LOAD_CHAT_DATA","LOAD_SENT_REQUESTS","requestPublicKeys","pendingRequests","loading","LOAD_RECEIVED_REQUESTS","SENT_REQUEST","ACCEPT_HANDSHAKE_REQUEST","requestId","DECLINE_HANDSHAKE_REQUEST","trim","SENDING_MESSAGE","MESSAGE_STATUS","SENDING","SENT_MESSAGE","SENT","FAILED_MESSAGE","FAILED","RECEIVED_MESSAGE","RECEIVED","open","drawer","SET_DRAWER_OPEN","seedProviderPub","streamUserToken","streamLiveToken","publishedContent","unlockedContent","seedInfo","availableTokens","availableStreamTokens","SET_SEED_PROVIDER_PUB","ADD_PUBLISHED_CONTENT","contentTmp","ADD_UNLOCKED_CONTENT","unlockedTmp","contentPath","ADD_STREAM","liveToken","seedToken","REMOVE_STREAM","SET_SEED_INFO","ADD_AVAILABLE_TOKEN","seedUrl","userToken","availableTmp","push","REMOVE_USED_TOKEN","index","splice","ADD_STREAM_TOKEN","REMOVE_STREAM_TOKEN","source","rate","feeRates","fastestFee","halfHourFee","hourFee","fees","RESET_FEES","LOAD_FEE_RATES","SET_SOURCE","SET_RATE","follows","posts","feed","RESET_FOLLOWS","ADD_FOLLOW","existingFollow","find","follow","user","REMOVE_FOLLOW","UPDATE_FOLLOW","key","profile","ADD_USER_POST","authorId","userPosts","existingPost","DELETE_USER_POST","LOAD_POSTS","LOAD_SHARED_POST","sharerId","updatedPosts","originalPost","uuidv4","SET_DEVICE_ID","ADD_USER_KEY_PAIR","keyPair","ADD_HOST_KEY","userProfiles","NODE_ACTIONS","RESET_USER_PROFILES","LOAD_USER_PROFILE","REMOVE_USER_PROFILE","profiles","UPDATE_USER_PROFILE","newProfile","oldProfile","myServices","boughtServices","orders","tmp","servicesTmp","selectedService","reducers","combineReducers","NodeReducer","AuthReducer","EncryptionReducer","WalletReducer","ChatReducer","DrawerReducer","ContentReducer","FeesReducer","FeedReducer","UserProfilesReducer","OrdersReducer","users","Migrations","1","newState","handleTokenInvalidation","nodeSaga","Utils","takeEvery","currStore","getStore","ping","rootSaga","socket","select","token","off","close","put","SocketIO","withCredentials","parser","binaryParser","transports","payload","normalizeTimestampToMs","Date","now","Constants","ErrorCode","NOT_AUTH","timeout","reason","connect","attemptNumber","selectSelfPublicKey","isAuth","selectHost","selectSelfUser","selfPublicKey","maybeUser","Schema","createEmptyUser","selectUser","selectAllPublicKeys","keys","selectAllOtherPublicKeys","persistConfig","storage","blacklist","version","stateReconciler","autoMergeLevel2","migrate","createMigrate","debug","process","persistedReducer","persistReducer","rootReducer","initializedStore","sagaMiddleware","createSagaMiddleware","appliedMiddleware","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","persistor","persistStore","setSagaStore","run","setInterval","initializeStore","useSelector","selector","origUseSelector","options","reconnection","rejectUnauthorized","rifleSockets","Map","GunSocket","LNDSocket","connectSocket","disconnectSocket","decryptEventCallback","err","callback","encryptedEmit","eventName","encryptedData","emit","encryptedOn","responses","decryptedResponses","fetchSocket","namespace","resolve","then","DataSocket","encryptionId","FieldError","field","cachedSocket","delete","opts","$shock","publicKeyForDecryption","set","getChats","chats","pk","avatar","recipientAvatar","displayName","recipientDisplayName","reduce","initialMessagePrefix","getSentRequests","getReceivedRequests","changedAddress","recipientChangedRequestAddress","SET_CHAT_CONTACTS","SET_CHAT_MESSAGES","loadChatData","loadSentRequests","loadReceivedRequests","requestorPK","requestorAvatar","requestorDisplayName","subscribeChatMessages","userPublicKey","incomingId","incomingMessages","acceptHandshakeRequest","accept","sendHandshakeRequest","sendMessage","tempId","DateTime","utc","toMillis","safeParseJSON","nonEncryptedEvents","convertBase64ToBuffer","Buffer","from","convertBufferToBase64","processKey","Uint8Array","convertToEncryptedMessageResponse","ciphertext","iv","mac","ephemPublicKey","convertToEncryptedMessage","isEncryptedMessage","isNonEncrypted","generateKeyPair","ECCrypto","generatePrivate","getPublic","privateKeyBase64","publicKeyBase64","encryptMessage","processedPublicKey","messageBuffer","encrypt","encryptedMessageResponse","decryptMessage","processedPrivateKey","decrypt","decryptedMessageBuffer","parsedMessage","fetchWalletBalance","channel_balance","confirmed_balance","pending_channel_balance","fetchUSDRate","exchangeRate","replace","fetchTransactions","itemsPerPage","reset","params","fetchChannels","fetchPeers","fetchInvoices","fetchUnifiedTransactions","connectPeer","pubkey","newPeer","address","bytes_sent","bytes_recv","sat_sent","sat_recv","inbound","openChannel","channelCapacity","pushAmount","channelPushAmount","satPerByte","setSeedProviderPub","pub","setSeedInfo","infoS","addPublishedContent","toSet","unlockContent","postID","revealRes","unlockedContents","contentID","hasOwnProperty","call","addStream","removeStream","addAvailableToken","removeUnavailableToken","addStreamToken","Drawer","useDispatch","Store","useCallback","closeDrawer","onClickLogout","confirm","onClickScan","onClick","color","OverviewPage","lazy","AdvancedPage","MessagesPage","ProfilePage","ChatPage","SendPage","RequestPage","AuthPage","FeedPage","MoonPayPage","PublishContentPage","offerServicePage","createPostPage","GoLivePage","OtherUserPage","Story","Stories","QRScannerPage","PrivateRoute","component","authorizedComponent","withRouter","useEffect","videojs","addLanguage","tokenExpired","JWTDecode","exp","subscribeUserProfile","fallback","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","origin","addEventListener","fetch","contentType","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","updateUserProfile","subscription","binarySub","header","onError","onNotAuth","unsubscribeUserProfile","SET_CONNECTION_STATUS","SET_NODE_HEALTH","setHostId","retryOperation","operation","delay","retries","ms","r","setTimeout","bind","fetchNodeHealth","APIStatus","fetchNodeUnlockStatus","walletExists","walletStatus","connectHost","resetData","done","health","baseURL","throttledExchangeKeyPair","sanitizedHostIP","nodeHealthHttps","withProtocolHostIP","nodeHealth","unlockWallet","password","decodedToken","jwtDecode","authorization","parseError","createWallet","SetAttemptsDone","stack","RESET_FEED","POST_TIPPED","removeFollow","addFollow","loadSharedPost","postId","sharerPublicKey","subscribeUserPosts","postEntries","newPosts","GUN_PROPS","deletedPosts","subscribeSharedUserPosts","originalAuthor","subscribeFollows","sendTipPost","errorMessage","exchangingKeypair","addUserKeyPair","addHostKey","getDeviceId","APIPublicKey","openDrawer","loadFeeRates","capitalizeText","split","word","slice","toLowerCase","join","processDisplayName","suffix"],"mappings":"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","file":"static/js/main.a099e815.chunk.js","sourcesContent":["import Http from \"../utils/Http\"\nimport {rifle,rifleSocketExists,disconnectRifleSocket} from '../utils/WebSocket'\nexport const ACTIONS = {\n  ADD_MY_SERVICE: \"service/add\",\n  REMOVE_MY_SERVICE: \"service/remove\",\n  ADD_BOUGHT_SERVICE:\"service/add/bought\"\n};\n\nexport const createService = (clear,encrypted) => async dispatch => {\n\n  const {data} = await Http.post('/api/gun/set',{\n    path:'$user>offeredServices',\n    value:clear,\n    \n  })\n  const {ok,id} = data\n  if(!ok){\n    return \"\"\n  }\n  const all = Object.entries(encrypted).map(([name,value]) => {\n    if(!value){\n      return\n    }\n    console.log(`setting: ${name} to ${value}`)\n    return Http.post('/api/gun/put',{\n      path:`$user>offeredServices>${id}>${name}`,\n      value:{\n        $$__ENCRYPT__FOR:'me',\n        value\n      },\n    })\n  })\n  await Promise.all(all)\n  const {serviceType} = clear\n  //update the offered service\n  if(serviceType === 'torrentSeed' || serviceType === 'streamSeed'){\n    console.log(\"updating profile with service\")\n    await Http.post('/api/gun/put',{\n      path:`$user>Profile>SeedServiceProvided`,\n      value:id,\n    })\n  }\n  /* - The update will come from APi, this should not be needed \n  dispatch({\n    type: ACTIONS.ADD_MY_SERVICE,\n    data: {id,serviceInfo}\n  });*/\n  return id\n};\n\n\n\nexport const deleteService = id => async dispatch => {\n  return await Http.post('/api/gun/put',{\n    path:`$user>offeredServices>${id}`,\n    value:null\n  })\n};\n\nexport const subscribeMyServices = (hostIP) => async (dispatch) => {\n  const query = `$user::offeredServices::on`\n  const socketExists = rifleSocketExists(query)\n  const subscription = await rifle({\n    host: hostIP,\n    query,\n    publicKey:\"\",\n    reconnect:false\n  });\n  subscription.on(\"$shock\", async services => {\n    const servicesEntries = Object.entries(services);\n    console.log(servicesEntries)\n\n    servicesEntries.forEach(async ([id]) => {\n      if(id === \"_\"){\n        return\n      }\n      const { data: service } = await  Http.get(\n        `/api/gun/user/load/offeredServices>${id}`\n      )\n      console.log(service.data)\n      if (service.data === null) {\n        dispatch({\n          type: ACTIONS.REMOVE_MY_SERVICE,\n          data: id\n        });\n        return\n      }\n      dispatch({\n        type: ACTIONS.ADD_MY_SERVICE,\n        data: {id,serviceInfo:service.data}\n      });\n    })\n  });\n  return () => {\n    disconnectRifleSocket(query)\n  }\n}\n\nexport const buyService = (owner,serviceID,servicePrice) => async (dispatch) => {\n  const {data} = await Http.post('/api/lnd/unifiedTrx',{\n    type: 'service',\n    amt:Number(servicePrice),\n    to: owner,\n    memo:\"\",\n    feeLimit:500,\n    ackInfo:serviceID\n  })\n  console.log(data)\n  const orderAck = JSON.parse(data.orderAck.response)\n  dispatch({\n    type:ACTIONS.ADD_BOUGHT_SERVICE,\n    data:{orderAck,owner,serviceID}\n  })\n  return orderAck\n\n}","import classNames from \"classnames\";\nimport { use100vh } from \"react-div-100vh\";\nimport \"./css/index.css\";\n\nconst Loader = ({\n  text = \"Loading...\",\n  fullScreen = false,\n  small = false,\n  overlay = false,\n  overlayBackground = \"rgba(44, 51, 58, 0.95)\",\n  style = {}\n}) => {\n  const height = use100vh() ?? \"100vh\";\n  // Fixes cutoff loading overlay in PWA mode\n  const standaloneMode = window.matchMedia(\"(display-mode: standalone)\").matches\n  const fullScreenStyles = fullScreen\n    ? { height: standaloneMode ? \"100%\" : height, marginBottom: 0 }\n    : {};\n  const overlayStyles = overlay\n    ? {\n        backgroundColor: overlayBackground\n      }\n    : {};\n  return (\n    <div\n      className={classNames({\n        \"loading-wall\": true,\n        \"loading-small\": small,\n        \"loading-overlay\": overlay\n      })}\n      style={{\n        ...fullScreenStyles,\n        ...overlayStyles,\n        ...style\n      }}\n    >\n      <div className=\"loading-wall-icon\">\n        <span className=\"loading-circle loading-circle-1\"></span>\n        <span className=\"loading-circle loading-circle-2\"></span>\n        <span className=\"loading-circle loading-circle-3\"></span>\n        {!small ? (\n          <>\n            <span className=\"loading-circle loading-circle-4\"></span>\n            <span className=\"loading-circle loading-circle-5\"></span>\n          </>\n        ) : null}\n      </div>\n      {text ? <div className=\"loading-wall-text\">{text}</div> : null}\n    </div>\n  );\n};\n\nexport default Loader;\n","import * as React from \"react\";\nimport * as Common from \"shock-common\";\n\nexport function useForceUpdate(): () => void {\n  const [, setTick] = React.useState(0);\n  const update = React.useCallback(() => {\n    setTick(tick => tick + 1);\n  }, []);\n  return update;\n}\n\nexport const isOnline = (lastSeen: number): boolean =>\n  Date.now() - lastSeen < Common.SET_LAST_SEEN_APP_INTERVAL * 2;\n","import * as Common from \"shock-common\";\n\nexport * from \"./Date\";\nexport { default as Http } from \"./Http\";\nexport * from \"./Error\";\n\nexport const logger = {\n  log: (...args: any[]) => console.log(...args),\n  warn: (...args: any[]) => console.warn(...args),\n  error: (...args: any[]) => console.error(...args)\n};\n\nexport interface File {\n  size: number;\n  type: string;\n}\n\n/**\n * Max limit in API 's http config.\n */\nexport const LARGEST_RES_SIZE = 102400;\n\n/**\n * @returns Image in jpeg format, in a data url presentation (base64).\n */\nexport const resizeImage = (\n  img: HTMLImageElement,\n  desiredLongEdge: number,\n  compression: number\n) => {\n  const canvas = document.createElement(\"canvas\");\n  let { width, height } = img;\n\n  if (width > height) {\n    if (width > desiredLongEdge) {\n      //height *= max_width / width;\n      height = Math.round((height *= desiredLongEdge / width));\n      width = desiredLongEdge;\n    }\n  } /* height > width */ else {\n    if (height > desiredLongEdge) {\n      width = Math.round((width *= desiredLongEdge / height));\n      height = desiredLongEdge;\n    }\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n\n  canvas.getContext(\"2d\").drawImage(img, 0, 0, width, height);\n  return canvas.toDataURL(\"image/jpeg\", compression);\n};\n\n/**\n * @returns Image in jpeg format, in a data url presentation (base64).\n */\nexport const processImageFile = async (\n  file: File,\n  desiredLongEdge: number,\n  compression: number\n) => {\n  // based on https://github.com/josefrichter/resize/blob/master/public/preprocess.js\n  if (!file.type.startsWith(\"image/\")) {\n    throw new TypeError(\n      `Got a file of type ${file.type} with size: ${file.size}, expected type to start with \"image\"`\n    );\n  }\n\n  const imageBuffer = await Common.makePromise<ArrayBuffer>((res, rej) => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      if (e.target.result instanceof ArrayBuffer) {\n        res(e.target.result);\n      } else {\n        rej(\n          new TypeError(\n            `Non ArrayBuffer file reader result when trying to load image file.`\n          )\n        );\n      }\n    };\n\n    const onFail = (e: ProgressEvent<FileReader>) => {\n      rej(\n        new Error(\n          `Error inside processImageFile()->imageBuffer->${JSON.stringify(e)}`\n        )\n      );\n    };\n    reader.onerror = onFail;\n    reader.onabort = onFail;\n\n    /// TODO: Why the need to cast and heck why does it even allow the cast?\n    reader.readAsArrayBuffer(file as Blob);\n  });\n\n  const url = (window.URL ?? window.webkitURL).createObjectURL(\n    new Blob([imageBuffer], { type: \"image/jpeg\" })\n  );\n\n  const image = await Common.makePromise<HTMLImageElement>((res, rej) => {\n    const _image = new Image();\n    _image.src = url;\n\n    _image.onload = () => {\n      res(_image);\n    };\n\n    _image.onerror = e => {\n      if (typeof e === \"string\") {\n        rej(new Error(e));\n      } else {\n        rej(new Error(JSON.stringify(e)));\n      }\n    };\n  });\n\n  const resizedImage = resizeImage(image, desiredLongEdge, compression);\n\n  return resizedImage;\n};\n\nexport const wait = (ms: number): Promise<void> =>\n  new Promise<void>(r => {\n    setTimeout(r, ms);\n  });\n\nexport const retryOperation = <T>(\n  operation: () => Promise<T>,\n  delay: number,\n  retries: number\n): Promise<T> =>\n  new Promise<T>((resolve, reject) => {\n    return operation()\n      .then(resolve)\n      .catch(reason => {\n        if (retries > 0) {\n          return (\n            wait(delay)\n              .then(retryOperation.bind(null, operation, delay, retries - 1))\n              // @ts-expect-error\n              .then(resolve)\n              .catch(reject)\n          );\n        }\n        return reject(reason);\n      });\n  });\n\n/**\n * Returns an empty string if the string provided is not an url.\n */\nexport const normalizeURL = (_url: string): string => {\n  let url = _url;\n\n  if (url.startsWith(\"www.\")) {\n    url = \"https://\" + url;\n  }\n\n  // https://stackoverflow.com/a/43467144\n  const isURL = (() => {\n    let __url: URL;\n\n    try {\n      __url = new URL(url);\n    } catch (_) {\n      return false;\n    }\n\n    return __url.protocol === \"http:\" || __url.protocol === \"https:\";\n  })();\n\n  if (isURL) {\n    return new URL(url).href;\n  }\n\n  return \"\";\n};\n","import Http from \"axios\";\nimport * as Encryption from \"./Encryption\";\n\nconst unprotectedRoutes = {\n  GET: [\n    \"/healthz\",\n    \"/ping\",\n    // Errors out when viewing an API page from the browser\n    \"/favicon.ico\",\n    \"/api/lnd/wallet/status\"\n  ],\n  POST: [\"/api/security/exchangeKeys\", \"/api/encryption/exchange\"],\n  PUT: [],\n  DELETE: []\n};\n\nconst encryptRequest = async config => {\n  const { store } = await import(\"../store\");\n  const { hostKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  const { data } = config;\n\n  const remotePublicKey = hostKeys[hostId];\n\n  if (!remotePublicKey) {\n    console.warn(\n      \"[ENCRYPTION] Unable to retrieve key for specified Host ID:\",\n      hostId,\n      hostKeys\n    );\n    return config;\n  }\n\n  const encryptedMessage = await Encryption.encryptMessage({\n    publicKey: remotePublicKey,\n    message: JSON.stringify(data)\n  });\n\n  return {\n    ...config,\n    data: encryptedMessage\n  };\n};\n\nconst decryptResponse = async response => {\n  if (!response) {\n    return response;\n  }\n\n  const { store } = await import(\"../store\");\n  const { userKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  const { data } = response;\n\n  if (!Encryption.isEncryptedMessage(data)) {\n    return response;\n  }\n\n  const localPrivateKey = userKeys[hostId]?.privateKey;\n\n  if (!localPrivateKey) {\n    console.warn(\n      \"[ENCRYPTION] Unable to retrieve key for specified Host ID:\",\n      hostId,\n      userKeys\n    );\n    return response;\n  }\n\n  const decryptedMessage = await Encryption.decryptMessage({\n    privateKey: localPrivateKey,\n    encryptedMessage: data\n  });\n\n  return { ...response, data: decryptedMessage };\n};\n\nHttp.interceptors.request.use(async config => {\n  try {\n    const { store } = await import(\"../store\");\n    const { authToken } = store.getState().node;\n    const { deviceId } = store.getState().encryption;\n    const localRequest = config.url.indexOf(\"/\") === 0;\n\n    if (localRequest) {\n      config.headers.common.Authorization = `Bearer ${authToken}`;\n      config.headers.common[\"encryption-device-id\"] = deviceId;\n    }\n\n    if (\n      localRequest &&\n      !unprotectedRoutes[config.method.toUpperCase()].includes(config.url)\n    ) {\n      return await encryptRequest(config);\n    }\n\n    return config;\n  } catch (error) {\n    console.error(error);\n  }\n});\n\nHttp.interceptors.response.use(\n  async response => {\n    return decryptResponse(response);\n  },\n  async error => {\n    try {\n      const response = await decryptResponse(error.response);\n      error.response = response;\n      return Promise.reject(error);\n    } catch (err) {\n      console.error(err);\n      throw error;\n    }\n  }\n);\n\nexport default Http;\n","export const ACTIONS = {\n  RESET_AUTH_INFO: \"auth/reset\",\n  SET_AUTH_STEP: \"auth/step/set\",\n  SET_AUTHENTICATED: \"auth/authenticated/set\",\n  SET_AUTH_METHOD: \"auth/method/set\",\n  LOGOUT: \"auth/logout\"\n};\n\nexport const setAuthenticated = status => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_AUTHENTICATED,\n    data: status\n  });\n};\n\nexport const setAuthStep = step => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_AUTH_STEP,\n    data: step\n  });\n};\n\nexport const setAuthMethod = method => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_AUTH_METHOD,\n    data: method\n  });\n};\n\nexport const logout = () => ({\n  type: ACTIONS.LOGOUT\n});\n","import Http from \"axios\";\nimport { ACTIONS } from \"../actions/NodeActions\";\nimport { ACTIONS as AUTH_ACTIONS } from \"../actions/AuthActions\";\n\nconst INITIAL_STATE = {\n  hostId: null,\n  hostIP: null,\n  alias: null,\n  authToken: null,\n  publicKey: null,\n  authTokenExpirationDate: null,\n  authMethod: null,\n  hostingAttemptsDone: false\n};\n\nconst node = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.RESET_NODE_INFO: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.SET_HOST_IP: {\n      const hostIP = action.data;\n      return {\n        ...state,\n        hostIP\n      };\n    }\n    case ACTIONS.SET_HOST_ID: {\n      const hostId = action.data;\n      return {\n        ...state,\n        hostId\n      };\n    }\n    case ACTIONS.SET_AUTHENTICATED_USER: {\n      const {\n        authToken,\n        alias,\n        publicKey,\n        authTokenExpirationDate,\n        authMethod\n      } = action.data;\n\n      Http.defaults.headers.common.Authorization = `Bearer ${authToken}`;\n\n      return {\n        ...state,\n        authToken,\n        authTokenExpirationDate,\n        alias,\n        publicKey,\n        authMethod\n      };\n    }\n    case ACTIONS.SET_ATTEMPTS_DONE: {\n      return { ...state, hostingAttemptsDone: true };\n    }\n\n    case AUTH_ACTIONS.LOGOUT: {\n      return {\n        ...state,\n        authToken: null,\n        publicKey: null,\n        authTokenExpirationDate: null,\n        authMethod: null,\n        hostingAttemptsDone: false\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default node;\n","import { ACTIONS } from \"../actions/AuthActions\";\n\nconst INITIAL_STATE = {\n  authenticated: false,\n  authStep: \"host\",\n  authMethod: null,\n  userSessionKey: null,\n  APISessionKey: null\n};\n\nconst defaultSteps = {\n  manual: \"host\",\n  shockWizard: \"scan\",\n  shockCloud: \"inviteCode\"\n};\n\nconst auth = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_AUTHENTICATED: {\n      return { ...state, authenticated: action.data };\n    }\n    case ACTIONS.SET_AUTH_STEP: {\n      return {\n        ...state,\n        authStep: action.data\n      };\n    }\n    case ACTIONS.SET_AUTH_METHOD: {\n      const method = action.data;\n      return {\n        ...state,\n        authMethod: method,\n        authStep: defaultSteps[method]\n      };\n    }\n    case ACTIONS.LOGOUT: {\n      return INITIAL_STATE;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-check\n/**\n * @typedef {import('shock-common').Channel} Channel\n */\n\nimport Big from \"big.js\";\nimport { ACTIONS } from \"../actions/WalletActions\";\n\nconst INITIAL_STATE = {\n  // Wallet Balance\n  totalBalance: \"0\",\n  channelBalance: \"0\",\n  confirmedBalance: \"0\",\n  pendingChannelBalance: \"0\",\n  USDRate: null,\n\n  transactions: { content: [], page: -1, totalPages: 0, totalItems: 0 },\n  payments: { content: [], page: -1, totalPages: 0, totalItems: 0 },\n  /**\n   * @type {readonly Channel[]}\n   */\n  channels: [],\n  invoices: { content: [], page: -1, totalPages: 0, totalItems: 0 },\n  peers: [],\n  // Includes transactions, payments and invoices combined with a unified schema\n  // and sorted by date\n  recentTransactions: []\n};\n\nconst _getUnifiedTransactionDate = item =>\n  parseInt(item.creation_date || item.settle_date || item.time_stamp, 10);\n\n/**\n * @returns {typeof INITIAL_STATE}\n */\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_BALANCE: {\n      const {\n        channelBalance,\n        confirmedBalance,\n        pendingChannelBalance\n      } = action.data;\n      const totalBalance = new Big(confirmedBalance)\n        .add(channelBalance)\n        .add(pendingChannelBalance)\n        .toString();\n\n      return {\n        ...state,\n        totalBalance,\n        channelBalance,\n        confirmedBalance,\n        pendingChannelBalance\n      };\n    }\n    case ACTIONS.LOAD_USD_RATE: {\n      const { data } = action;\n\n      return {\n        ...state,\n        USDRate: data\n      };\n    }\n    case ACTIONS.LOAD_PEERS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        peers: data\n      };\n    }\n    case ACTIONS.ADD_PEER: {\n      const { data } = action;\n\n      return {\n        ...state,\n        peers: [data, ...state.peers]\n      };\n    }\n    case ACTIONS.REMOVE_PEER: {\n      const { data } = action;\n\n      return {\n        ...state,\n        peers: state.peers.filter(peer => peer.pub_key !== data.publicKey)\n      };\n    }\n    case ACTIONS.LOAD_CHANNELS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        channels: data\n      };\n    }\n    case ACTIONS.LOAD_TRANSACTIONS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        transactions: data\n      };\n    }\n    case ACTIONS.LOAD_MORE_TRANSACTIONS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        transactions: {\n          ...data,\n          content: [...state.transactions.content, ...data.content]\n        }\n      };\n    }\n    case ACTIONS.LOAD_INVOICES: {\n      const { data } = action;\n\n      return {\n        ...state,\n        invoices: data\n      };\n    }\n    case ACTIONS.LOAD_MORE_INVOICES: {\n      const { data } = action;\n\n      return {\n        ...state,\n        invoices: {\n          ...data,\n          content: [...state.invoices.content, ...data.content]\n        }\n      };\n    }\n    case ACTIONS.LOAD_PAYMENTS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        payments: data\n      };\n    }\n    case ACTIONS.LOAD_MORE_PAYMENTS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        payments: {\n          ...data,\n          content: [...state.payments.content, ...data.content]\n        }\n      };\n    }\n    case ACTIONS.LOAD_RECENT_TRANSACTIONS: {\n      const { transactions, payments, invoices } = action.data;\n      const newRecentTransactions = [\n        ...transactions.content,\n        ...payments.content,\n        ...invoices.content\n      ]\n        .sort((a, b) => {\n          const aDate = _getUnifiedTransactionDate(a);\n          const bDate = _getUnifiedTransactionDate(b);\n\n          return aDate < bDate ? 1 : aDate > bDate ? -1 : 0;\n        })\n        .map(item => {\n          const date = _getUnifiedTransactionDate(item);\n\n          if (item.payment_hash) {\n            return {\n              type: \"payment\",\n              hash: item.payment_hash,\n              value: item.value,\n              date\n            };\n          }\n\n          if (item.payment_request) {\n            return {\n              type: \"invoice\",\n              hash: item.payment_request,\n              value: item.value,\n              date,\n              message: item.memo\n            };\n          }\n\n          if (item.tx_hash) {\n            return {\n              type: \"chain\",\n              hash: item.tx_hash,\n              value: item.amount,\n              date,\n              message: item.label\n            };\n          }\n\n          console.warn(\"Invalid transaction detected\", item);\n          return null;\n        })\n        .filter(item => item !== null);\n\n      return {\n        ...state,\n        transactions,\n        payments,\n        invoices,\n        recentTransactions: newRecentTransactions\n      };\n    }\n    case ACTIONS.RESET_RECENT_TRANSACTIONS: {\n      return {\n        ...state,\n        recentTransactions: []\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default wallet;\n","/**\n * @format\n */\nimport { ACTIONS, MESSAGE_STATUS } from \"../actions/ChatActions\";\n\nconst INITIAL_STATE = {\n  contacts: [],\n  messages: {},\n  sentRequests: [],\n  receivedRequests: [],\n  requestBlacklist: []\n};\n\nconst _identicalMessages = (oldMessage, newMessage) =>\n  oldMessage.id && newMessage.id\n    ? oldMessage.id === newMessage.id\n    : oldMessage.localId === newMessage.localId;\n\nconst _sortMessages = (messages = []) =>\n  messages.sort((a, b) => b.timestamp - a.timestamp);\n\nconst _processNewMessage = ({ data, status, state, outgoing = false }) => {\n  const userMessages = state.messages[data.recipientPublicKey] ?? [];\n  const [existingMessage] = userMessages.filter(message =>\n    _identicalMessages(message, data)\n  );\n\n  if (existingMessage) {\n    console.warn(\"Duplicate Message:\", existingMessage?.body);\n  }\n\n  if (existingMessage) {\n    const messages = userMessages.map(message =>\n      _identicalMessages(message, existingMessage)\n        ? { ...existingMessage, ...data, status, outgoing }\n        : message\n    );\n    const sortedMessages = _sortMessages(messages);\n\n    return {\n      ...state,\n      messages: {\n        ...state.messages,\n        [data.recipientPublicKey]: sortedMessages\n      }\n    };\n  }\n\n  const messages = [{ ...data, status, outgoing }, ...userMessages];\n  const sortedMessages = _sortMessages(messages);\n\n  return {\n    ...state,\n    messages: {\n      ...state.messages,\n      [data.recipientPublicKey]: sortedMessages\n    }\n  };\n};\n\nconst chat = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_CHAT_DATA: {\n      const { contacts, messages } = action.data;\n      return { ...state, contacts, messages };\n    }\n    case ACTIONS.LOAD_SENT_REQUESTS: {\n      const requestPublicKeys = state.sentRequests.map(\n        request => request.recipientPublicKey\n      );\n      const pendingRequests = state.sentRequests.filter(\n        request =>\n          request.loading &&\n          !requestPublicKeys.includes(request.recipientPublicKey)\n      );\n\n      return {\n        ...state,\n        sentRequests: [...pendingRequests, ...action.data]\n      };\n    }\n    case ACTIONS.LOAD_RECEIVED_REQUESTS: {\n      return {\n        ...state,\n        receivedRequests: action.data\n      };\n    }\n    case ACTIONS.SENT_REQUEST: {\n      return {\n        ...state,\n        sentRequests: [\n          ...state.sentRequests,\n          { recipientPublicKey: action.data, loading: true }\n        ]\n      };\n    }\n    case ACTIONS.ACCEPT_HANDSHAKE_REQUEST: {\n      const requestId = action.data;\n      return {\n        ...state,\n        receivedRequests: state.receivedRequests.filter(\n          request => request.id !== requestId\n        )\n      };\n    }\n    case ACTIONS.DECLINE_HANDSHAKE_REQUEST: {\n      const requestId = action.data;\n      if (!requestId || !requestId.trim()) {\n        return state;\n      }\n\n      return {\n        ...state,\n        requestBlacklist: [...state.requestBlacklist, requestId]\n      };\n    }\n    case ACTIONS.SENDING_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: MESSAGE_STATUS.SENDING,\n        state,\n        outgoing: true\n      });\n    }\n    case ACTIONS.SENT_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: MESSAGE_STATUS.SENT,\n        state,\n        outgoing: true\n      });\n    }\n    case ACTIONS.FAILED_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: MESSAGE_STATUS.FAILED,\n        state,\n        outgoing: true\n      });\n    }\n    case ACTIONS.RECEIVED_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: MESSAGE_STATUS.RECEIVED,\n        state\n      });\n    }\n    default:\n      return state;\n  }\n};\n\nexport default chat;\n","/**\n * @format\n */\nimport { ACTIONS } from \"../actions/DrawerActions\";\n\nconst INITIAL_STATE = {\n  open: false\n};\n\nconst drawer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_DRAWER_OPEN: {\n      return { ...state, open: action.data };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default drawer;\n","import { ACTIONS } from \"../actions/ContentActions\";\nconst INITIAL_STATE = {\n  seedProviderPub:'test',\n  streamUserToken:'',\n  streamLiveToken:'',\n  publishedContent:{},\n  unlockedContent:{},\n  seedInfo:{},\n  availableTokens:{},\n  availableStreamTokens:{}\n};\n\nconst content = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_SEED_PROVIDER_PUB: {\n      return { ...state, seedProviderPub: action.data };\n    }\n    case ACTIONS.ADD_PUBLISHED_CONTENT:{\n      const {data} = action\n      const {content,res} = data\n      const contentTmp = {...state.publishedContent}\n      if(res.ok){\n        contentTmp[res.id] = content \n      }\n      return { ...state, publishedContent:contentTmp} \n    }\n    case ACTIONS.ADD_UNLOCKED_CONTENT:{\n      const {data} = action\n      const unlockedTmp = {...state.unlockedContent}\n      unlockedTmp[data.contentPath] = data.content\n      return {...state,unlockedContent:unlockedTmp}\n    }\n    case ACTIONS.ADD_STREAM:{\n      const {data} = action\n      return {...state, streamLiveToken:data.liveToken,streamUserToken:data.seedToken}\n    }\n    case ACTIONS.REMOVE_STREAM:{\n      return {...state, streamLiveToken:'',streamUserToken:''}\n    }\n    case ACTIONS.SET_SEED_INFO:{\n      const {data} = action\n      return {...state, seedInfo:data}\n    }\n    case ACTIONS.ADD_AVAILABLE_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableTokens}\n      if(!availableTmp[seedUrl]){\n        availableTmp[seedUrl] = []\n      }\n      availableTmp[seedUrl].push(userToken)\n      return {...state,availableTokens:availableTmp}\n    }\n    case ACTIONS.REMOVE_USED_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableTokens}\n      if(!availableTmp[seedUrl]){\n        return state\n      }\n      const index = availableTmp[seedUrl].indexOf(userToken);\n      if (index > -1) {\n        availableTmp[seedUrl].splice(index, 1);\n        return {...state,availableTokens:availableTmp}\n      }\n      return state\n    }\n    case ACTIONS.ADD_STREAM_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableStreamTokens}\n      if(!availableTmp[seedUrl]){\n        availableTmp[seedUrl] = []\n      }\n      availableTmp[seedUrl].push(userToken)\n      return {...state,availableStreamTokens:availableTmp}\n    }\n    case ACTIONS.REMOVE_STREAM_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableStreamTokens}\n      if(!availableTmp[seedUrl]){\n        return state\n      }\n      const index = availableTmp[seedUrl].indexOf(userToken);\n      if (index > -1) {\n        availableTmp[seedUrl].splice(index, 1);\n        return {...state,availableStreamTokens:availableTmp}\n      }\n      return state\n    }\n    default:\n      return state;\n  }\n};\n\nexport default content;\n","import { ACTIONS } from \"../actions/FeesActions\";\n\nconst INITIAL_STATE = {\n  source: \"https://mempool.space/api/v1/fees/recommended\",\n  rate: \"halfHourFee\",\n  feeRates: {\n    fastestFee: 0,\n    halfHourFee: 0,\n    hourFee: 0\n  }\n};\n\nconst fees = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.RESET_FEES: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.LOAD_FEE_RATES: {\n      const feeRates = action.data;\n      return {\n        ...state,\n        feeRates\n      };\n    }\n    case ACTIONS.SET_SOURCE: {\n      const source = action.data;\n      return {\n        ...state,\n        source\n      };\n    }\n    case ACTIONS.SET_RATE: {\n      const rate = action.data;\n      return {\n        ...state,\n        rate\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default fees;\n","import { ACTIONS } from \"../actions/FeedActions\";\n\nconst INITIAL_STATE = {\n  follows: [],\n  posts: {}\n};\n\nconst feed = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.RESET_FOLLOWS: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.ADD_FOLLOW: {\n      const { data } = action;\n      const existingFollow = state.follows.find(\n        follow => data.user === follow.user\n      );\n\n      if (existingFollow) {\n        return {\n          ...state,\n          follows: state.follows.map(follow =>\n            follow.user === data.user ? data : follow\n          )\n        };\n      }\n\n      return {\n        ...state,\n        follows: [...state.follows, data]\n      };\n    }\n    case ACTIONS.REMOVE_FOLLOW: {\n      const { data } = action;\n      return {\n        ...state,\n        follows: state.follows.filter(follow => follow.user !== data)\n      };\n    }\n    case ACTIONS.UPDATE_FOLLOW: {\n      const { data } = action;\n\n      const follows = state.follows.map(follow => {\n        if (follow.user === data.key) {\n          return {\n            ...follow,\n            profile: data\n          };\n        }\n\n        return follow;\n      });\n\n      return {\n        ...state,\n        follows\n      };\n    }\n    case ACTIONS.ADD_USER_POST: {\n      const { data } = action;\n      const authorId = data.authorId;\n      const userPosts = state.posts[authorId] ?? [];\n      const existingPost = userPosts.find(post => data.id === post.id);\n\n      if (existingPost) {\n        return state;\n      }\n\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [authorId]: [...userPosts, data]\n        }\n      };\n    }\n    case ACTIONS.DELETE_USER_POST: {\n      const { id, authorId } = action.data;\n      const userPosts = (state.posts[authorId] ?? []).filter(\n        post => post.id !== id\n      );\n\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [authorId]: userPosts\n        }\n      };\n    }\n    case ACTIONS.LOAD_POSTS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        posts: data\n      };\n    }\n    case ACTIONS.LOAD_SHARED_POST: {\n      const { data } = action;\n      const { id, sharerId } = data;\n      const userPosts = state.posts[sharerId] ?? [];\n      const updatedPosts = userPosts.map(post => {\n        if (post.id === id && post.type === \"shared\") {\n          return {\n            ...post,\n            originalPost: data\n          };\n        }\n\n        return post;\n      });\n\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [sharerId]: updatedPosts\n        }\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default feed;\n","import { v4 as uuidv4 } from \"uuid\";\nimport { ACTIONS } from \"../actions/EncryptionActions\";\n\nconst INITIAL_STATE = {\n  deviceId: uuidv4(),\n  userKeys: {},\n  hostKeys: {}\n};\n\nconst encryption = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_DEVICE_ID: {\n      const deviceId = action.data;\n      return {\n        ...state,\n        deviceId\n      };\n    }\n    case ACTIONS.ADD_USER_KEY_PAIR: {\n      const { hostId, keyPair } = action.data;\n      return { ...state, userKeys: { ...state.userKeys, [hostId]: keyPair } };\n    }\n    case ACTIONS.ADD_HOST_KEY: {\n      const { hostId, publicKey } = action.data;\n      return { ...state, hostKeys: { ...state.hostKeys, [hostId]: publicKey } };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default encryption;\n","import * as Common from \"shock-common\";\n\nimport { ACTIONS } from \"../actions/UserProfilesActions\";\nimport { ACTIONS as NODE_ACTIONS } from \"../actions/NodeActions\";\n\n/**\n * @typedef {Record<string, Common.User>} UserProfilesState\n */\n\n/**\n * @type {UserProfilesState}\n */\nconst INITIAL_STATE = {};\n\n/**\n * @param {UserProfilesState} state\n * @param {import('redux').AnyAction} action\n * @returns {UserProfilesState}\n */\nconst userProfiles = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NODE_ACTIONS.SET_AUTHENTICATED_USER: {\n      const { publicKey } = action.data;\n      return {\n        ...state,\n        [publicKey]: {\n          ...Common.createEmptyUser(publicKey),\n          ...state[publicKey]\n        }\n      };\n    }\n    case ACTIONS.RESET_USER_PROFILES: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.LOAD_USER_PROFILE: {\n      const { publicKey, profile } = action.data;\n\n      if (!publicKey || !profile) {\n        return state;\n      }\n\n      return {\n        ...state,\n        [publicKey]: {\n          ...Common.createEmptyUser(publicKey),\n          ...state[publicKey],\n          ...profile\n        }\n      };\n    }\n    case ACTIONS.REMOVE_USER_PROFILE: {\n      const { publicKey } = action.data;\n      // Deletes the user profile property without mutating the state object\n      const { [publicKey]: deletedProfile, ...profiles } = state;\n\n      return profiles;\n    }\n    case ACTIONS.UPDATE_USER_PROFILE: {\n      const { publicKey, profile: newProfile } = action.data;\n      const oldProfile = state[publicKey];\n\n      console.log(\"Updating User Profile:\", publicKey, newProfile);\n      if (!oldProfile || !newProfile) {\n        return state;\n      }\n\n      return {\n        ...state,\n        [publicKey]: {\n          ...Common.createEmptyUser(publicKey),\n          ...oldProfile,\n          ...newProfile\n        }\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default userProfiles;\n","import { ACTIONS } from \"../actions/OrdersActions\";\n\nconst INITIAL_STATE = {\n    myServices:{},\n    services:{},\n    boughtServices:{}\n};\n\n\n\nconst orders = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.ADD_MY_SERVICE: {\n      const {id,serviceInfo} = action.data\n      const tmp = {...state.myServices}\n      tmp[id] = serviceInfo\n      return { ...state, myServices: tmp };\n    }\n    case ACTIONS.REMOVE_MY_SERVICE:{\n      const id = action.data\n      const tmp = {...state.myServices}\n      delete tmp[id]\n      return { ...state, myServices: tmp };\n    }\n    case ACTIONS.ADD_BOUGHT_SERVICE:{\n      const {orderAck,owner,serviceID} = action.data\n      const servicesTmp = {...state.boughtServices}\n      \n      if(!servicesTmp[owner]){\n        servicesTmp[owner] = {}\n      }\n      const selectedService = servicesTmp[owner]\n      if(!selectedService[serviceID]){\n        selectedService[serviceID] = []\n      }\n      selectedService[serviceID].push(orderAck)\n      return {...state, boughtServices:servicesTmp}\n    }\n    default:\n      return state;\n  }\n};\n\nexport default orders;\n","import { combineReducers } from \"redux\";\nimport * as Common from \"shock-common\";\n\nimport NodeReducer from \"./NodeReducer\";\nimport AuthReducer from \"./AuthReducer\";\nimport WalletReducer from \"./WalletReducer\";\nimport ChatReducer from \"./ChatReducer\";\nimport DrawerReducer from \"./DrawerReducer\";\nimport ContentReducer from \"./ContentReducer\";\nimport FeesReducer from \"./FeesReducer\";\nimport FeedReducer from \"./FeedReducer\";\nimport EncryptionReducer from \"./EncryptionReducer\";\nimport UserProfilesReducer from \"./UserProfilesReducer\";\nimport OrdersReducer from \"./OrdersReducer\"\n\nconst reducers = combineReducers({\n  node: NodeReducer,\n  auth: AuthReducer,\n  encryption: EncryptionReducer,\n  wallet: WalletReducer,\n  chat: ChatReducer,\n  drawer: DrawerReducer,\n  content: ContentReducer,\n  fees: FeesReducer,\n  feed: FeedReducer,\n  userProfiles: UserProfilesReducer,\n  orders:OrdersReducer,\n  users: () => {\n    return {} as Record<string, Common.User>;\n  }\n});\n\nexport type State = ReturnType<typeof reducers>;\n\nexport default reducers;\n","import PeerMigration from \"./PeerMigration\";\n\nconst Migrations = {\n  1: PeerMigration\n};\n\nexport default Migrations;\n","const PeerMigration = state => {\n  console.log(\"--- PeerMigration Started ---\");\n  const newState = {\n    ...state,\n    wallet: {\n      ...state.wallet,\n      peers: []\n    }\n  };\n  console.log(\"--- PeerMigration Ended ---\", newState);\n  return newState;\n};\n\nexport default PeerMigration;\n","import { all, takeEvery } from \"redux-saga/effects\";\n\nimport * as Utils from \"../../utils\";\n\n// eslint-disable-next-line require-yield\nfunction* handleTokenInvalidation() {\n  try {\n    // Utils.navigate(\"/\");\n  } catch (e) {\n    Utils.logger.error(`Error inside handleTokenInvalidation* ()`);\n    Utils.logger.error(e);\n  }\n}\n\nfunction* auth() {\n  try {\n    yield;\n  } catch (e) {\n    Utils.logger.error(\"Error inside auth* ()\");\n    Utils.logger.error(e);\n  }\n}\n\nfunction* nodeSaga() {\n  yield all([\n    auth,\n    takeEvery(\"node/tokenDidInvalidate\", handleTokenInvalidation)\n  ]);\n}\n\nexport default nodeSaga;\n","import { Store, AnyAction } from \"redux\";\n\nimport { State } from \"../../reducers\";\n\ntype ShockStore = Store<State, AnyAction>;\n\nlet currStore = {} as ShockStore;\n\nexport const _setStore = (store: ShockStore) => {\n  currStore = store;\n};\n\nexport const getStore = () => currStore;\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport SocketIO from \"socket.io-client\";\nimport binaryParser from \"socket.io-msgpack-parser\"\nimport { Constants, normalizeTimestampToMs } from \"shock-common\";\n\nimport * as Utils from \"../../utils\";\n\nimport { getStore } from \"./_store\";\n\nlet socket: ReturnType<typeof SocketIO> | null = null;\n\nfunction* ping() {\n  try {\n    const {\n      node: { authToken: token, hostIP: host }\n    } = yield select();\n\n    if ((!token || !host) && socket) {\n      Utils.logger.log(\n        `Will kill ping socket because of token invalidation or host was unset`\n      );\n      socket.off(\"*\");\n      socket.close();\n      socket = null;\n\n      // force next tick\n      yield put({ type: \"shock::keepAlive\" });\n    }\n\n    if (token && host && !socket) {\n      Utils.logger.log(`Will try to connect ping socket`);\n      socket = SocketIO(`http://${host}/shockping`, {\n        withCredentials: true,\n        parser: binaryParser,\n        transports: ['websocket', 'polling'],\n        auth: {\n          token\n        }\n      });\n\n      socket.on(\"shockping\", () => {\n        getStore().dispatch({\n          type: \"node/ping\",\n          payload: {\n            timestamp: normalizeTimestampToMs(Date.now())\n          }\n        });\n      });\n\n      socket.on(Constants.ErrorCode.NOT_AUTH, () => {\n        getStore().dispatch({\n          type: \"node/tokenDidInvalidate\"\n        });\n      });\n\n      socket.on(\"$error\", (e: string) => {\n        Utils.logger.error(`Error received by ping socket: ${e}`);\n      });\n\n      socket.on(\"connect_error\", (e: unknown) => {\n        Utils.logger.error(`ping socket connect_error`);\n        Utils.logger.error(e);\n      });\n\n      socket.on(\"connect_timeout\", (timeout: unknown) => {\n        Utils.logger.log(`ping socket connect_timeout`);\n        Utils.logger.log(timeout);\n      });\n\n      socket.on(\"connect\", () => {\n        Utils.logger.log(\"ping socket connect\");\n      });\n\n      socket.on(\"disconnect\", (reason: string) => {\n        Utils.logger.log(`ping socket disconnected due to -> ${reason}`);\n\n        // from docs\n        if (reason === \"io server disconnect\") {\n          // the disconnection was initiated by the server, you need to reconnect manually\n          socket && socket.connect();\n        }\n        // else the socket will automatically try to reconnect\n      });\n\n      socket.on(\"error\", (e: unknown) => {\n        Utils.logger.error(`Error inside ping socket`);\n        Utils.logger.error(e);\n      });\n\n      socket.on(\"reconnect\", (attemptNumber: number) => {\n        Utils.logger.log(`ping socket reconnect attempt -> ${attemptNumber}`);\n      });\n\n      socket.on(\"reconnecting\", (attemptNumber: number) => {\n        Utils.logger.log(\n          `ping socket reconnecting attempt -> ${attemptNumber}`\n        );\n      });\n\n      socket.on(\"reconnect_error\", (e: unknown) => {\n        Utils.logger.log(`ping socket reconnect_error`);\n        Utils.logger.error(e);\n      });\n\n      socket.on(\"reconnect_failed\", () => {\n        Utils.logger.error(`ping socket reconnect_failed`);\n      });\n\n      socket.on(\"ping\", () => {\n        Utils.logger.log(`ping socket pinging api (socket.io internal)`);\n      });\n\n      socket.on(\"pong\", () => {\n        Utils.logger.log(`ping socket ponged by api (socket.io internal)`);\n\n        getStore().dispatch({\n          type: \"ping\",\n          payload: {\n            timestamp: normalizeTimestampToMs(Date.now())\n          }\n        });\n      });\n    }\n  } catch (err) {\n    Utils.logger.error(\"Error inside ping* ()\");\n    Utils.logger.error(err.message);\n  }\n}\n\nfunction* rootSaga() {\n  yield takeEvery(\"*\", ping);\n}\n\nexport default rootSaga;\n","import { all } from \"redux-saga/effects\";\n\nimport node from \"./node\";\nimport ping from \"./ping\";\n\nimport { _setStore } from \"./_store\";\n\nfunction* rootSaga() {\n  yield all([node, ping]);\n}\n\nexport { _setStore };\nexport default rootSaga;\n","import { State } from \"../../reducers\";\n\nexport const selectSelfPublicKey = (state: State): string =>\n  state.node.publicKey;\n\nexport const isAuth = (state: State): boolean => !!state.node.publicKey;\n\nexport const selectHost = (state: State): string => state.node.hostIP;\n","import { Schema } from \"shock-common\";\n\nimport { State } from \"../../reducers\";\n\nimport { selectSelfPublicKey } from \"./auth\";\n\nexport const selectSelfUser = (state: State) => {\n  const selfPublicKey = selectSelfPublicKey(state);\n  const maybeUser = state.userProfiles[selfPublicKey];\n  if (maybeUser) {\n    return maybeUser;\n  } else {\n    console.error(\"No self user created at auth?\");\n    return Schema.createEmptyUser(selfPublicKey);\n  }\n};\n\nexport const selectUser = (publicKey: string) => (\n  state: State\n): Schema.User => {\n  const maybeUser = state.userProfiles[publicKey];\n\n  if (maybeUser) {\n    return maybeUser;\n  } else {\n    return Schema.createEmptyUser(publicKey);\n  }\n};\n\nexport const selectAllPublicKeys = (state: State): string[] => {\n  return Object.keys(state.userProfiles);\n};\n\nexport const selectAllOtherPublicKeys = (state: State): string[] => {\n  const selfPublicKey = selectSelfPublicKey(state);\n  return selectAllPublicKeys(state).filter(key => key !== selfPublicKey);\n};\n","import { createStore, applyMiddleware, compose, AnyAction } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer, { State } from \"../reducers\";\nimport { useSelector as origUseSelector } from \"react-redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport Migrations from \"./Migrations\";\nimport createMigrate from \"redux-persist/es/createMigrate\";\nimport autoMergeLevel2 from \"redux-persist/es/stateReconciler/autoMergeLevel2\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootSaga, { _setStore as setSagaStore } from \"./sagas\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [\"auth\"],\n  version: 1,\n  stateReconciler: autoMergeLevel2,\n  migrate: createMigrate(Migrations, {\n    debug: process.env.NODE_ENV === \"development\"\n  })\n};\n\nconst persistedReducer = persistReducer<State, AnyAction>(\n  persistConfig,\n  rootReducer\n);\n\nconst initializeStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const appliedMiddleware = applyMiddleware(thunk, sagaMiddleware);\n  // @ts-expect-error\n  const store = window.__REDUX_DEVTOOLS_EXTENSION__\n    ? createStore(\n        persistedReducer,\n        // @ts-expect-error\n        compose(appliedMiddleware, window.__REDUX_DEVTOOLS_EXTENSION__())\n      )\n    : createStore(persistedReducer, appliedMiddleware);\n  let persistor = persistStore(store);\n  setSagaStore(store);\n  sagaMiddleware.run(rootSaga);\n  // In the future if polls (which cause ticks in the store) are moved to sagas\n  // they will be dependant on the ping socket, we need a keep alive tick for\n  // when the are no actions being dispatched making the store tick and\n  // therefore the ping saga realizing the socket died, if it did so. Ideally,\n  // the ping/socket subscription should emit a timeout event of such but I'd\n  // rather do that when I learn Event Channels and implement the ping socket\n  // using that.\n  setInterval(() => {\n    store.dispatch({\n      type: \"shock::keepAlive\"\n    });\n  }, 20000);\n  return { store, persistor };\n};\n\nconst initializedStore = initializeStore();\n\nexport const store = initializedStore.store;\n\nexport const persistor = initializedStore.persistor;\n\n/**\n * React-redux 's useSelector with our state type pre-specified.\n */\nexport const useSelector = <TSelected = unknown>(\n  selector: (state: State) => TSelected\n): TSelected => origUseSelector<State, TSelected>(selector);\n\nexport * from \"./selectors\";\n","import SocketIO from \"socket.io-client\";\nimport binaryParser from \"socket.io-msgpack-parser\"\nimport * as Encryption from \"./Encryption\";\nimport { initialMessagePrefix } from \"../utils/String\";\nimport FieldError from \"./FieldError\";\n\nconst options = { \n  reconnection: true, \n  rejectUnauthorized: false, \n  parser: binaryParser, \n  withCredentials: true \n};\n\nconst rifleSockets = new Map();\n\nexport let GunSocket = null;\n\nexport let LNDSocket = null;\n\nexport const connectSocket = url => {\n  GunSocket = SocketIO.connect(`${url}/gun`, options);\n  LNDSocket = SocketIO.connect(`${url}/lndstreaming`, options);\n  return { GunSocket, LNDSocket };\n};\n\nexport const disconnectSocket = socket => {\n  socket.off(\"*\");\n  socket.close();\n};\n\nconst decryptEventCallback = async ({ err, data, callback, privateKey }) => {\n  if (\n    (err && !Encryption.isEncryptedMessage(err)) ||\n    (data && !Encryption.isEncryptedMessage(data))\n  ) {\n    callback(err, data);\n    return;\n  }\n\n  if (err) {\n    const decryptedMessage = await Encryption.decryptMessage({\n      privateKey,\n      encryptedMessage: err\n    });\n\n    callback(decryptedMessage, data);\n    return;\n  }\n\n  if (data) {\n    const decryptedMessage = await Encryption.decryptMessage({\n      privateKey,\n      encryptedMessage: data\n    });\n\n    callback(err, decryptedMessage);\n    return;\n  }\n};\n\nconst encryptedEmit = socket => async (eventName, message, callback) => {\n  // TODO: remove circular dep\n  const { store } = await import(\"../store\");\n  const { hostKeys, userKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  if (!Encryption.isNonEncrypted(eventName)) {\n    socket.on(eventName, callback);\n    return;\n  }\n\n  const remotePublicKey = hostKeys[hostId];\n  const localPrivateKey = userKeys[hostId]?.privateKey;\n\n  if (!remotePublicKey || !localPrivateKey) {\n    console.error(\"[WS] Unable to retrieve key for specified Host ID:\", hostId);\n\n    return;\n  }\n\n  const encryptedData = await (message\n    ? Encryption.encryptMessage({\n        publicKey: remotePublicKey,\n        message\n      })\n    : null);\n\n  socket.emit(eventName, encryptedData, (err, data) => {\n    decryptEventCallback({\n      err,\n      data,\n      callback,\n      privateKey: localPrivateKey\n    });\n  });\n};\n\nconst encryptedOn = socket => async (eventName, callback) => {\n  // TODO: remove circular dep\n  const { store } = await import(\"../store\");\n  const { userKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  if (Encryption.isNonEncrypted(eventName)) {\n    socket.on(eventName, callback);\n    return;\n  }\n\n  const localPrivateKey = userKeys[hostId]?.privateKey;\n\n  if (!localPrivateKey) {\n    console.error(\"[WS] Unable to retrieve key for specified Host ID:\", hostId);\n\n    return;\n  }\n\n  socket.on(eventName, async (...responses) => {\n    const decryptedResponses = await Promise.all(\n      responses.map(async response => {\n        if (!response) {\n          return response;\n        }\n\n        if (response && !Encryption.isEncryptedMessage(response)) {\n          console.warn(\"Non-encrypted socket message\", response);\n          return response;\n        }\n\n        return Encryption.decryptMessage({\n          privateKey: localPrivateKey,\n          encryptedMessage: response\n        });\n      })\n    );\n\n    callback(...decryptedResponses);\n  });\n};\n\nconst fetchSocket = ({ hostIP, authToken, namespace, callback }) =>\n  new Promise((resolve, reject) => {\n    try {\n      import(\"../store\").then(({ store }) => {\n        const { encryption } = store.getState();\n        const DataSocket = SocketIO.connect(`${hostIP}/${namespace}`, {\n          ...options,\n          auth: {\n            token: authToken,\n            encryptionId: encryption.deviceId\n          }\n        });\n        const on = encryptedOn(DataSocket);\n\n        on(\"$shock\", async data => {\n          if (callback) {\n            callback(null, data);\n            return;\n          }\n          resolve(data);\n        });\n\n        on(\"$error\", async error => {\n          if (callback) {\n            callback(error);\n            return;\n          }\n          disconnectSocket(DataSocket);\n          reject(\n            new FieldError({\n              field: \"socket\",\n              message: error\n            })\n          );\n        });\n\n        on(\"error\", error => {\n          console.error(error);\n          if (callback) {\n            callback(error);\n            return;\n          }\n          disconnectSocket(DataSocket);\n          reject(\n            new FieldError({\n              field: \"socket\",\n              message: error\n            })\n          );\n        });\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  });\n\nexport const disconnectRifleSocket = query => {\n  const cachedSocket = rifleSockets.get(query);\n\n  if (cachedSocket) {\n    cachedSocket.off(\"*\");\n    cachedSocket.close();\n    rifleSockets.delete(query);\n  }\n};\n\nexport const rifleSocketExists = query => {\n  const cachedSocket = rifleSockets.get(query);\n  return !!cachedSocket;\n};\n\n/**\n * @typedef {object} RifleParams\n * @prop {string} host\n * @prop {string} query\n * @prop {string=} publicKeyForDecryption\n * @prop {string=} publicKey Alias for publicKeyForDecryption\n * @prop {boolean=} reconnect\n */\n\n/**\n * Returns a socket wired up to the given query. Use `.on('$shock')` for values.\n * Please do not forget to listen to the NOT_AUTH event and react accordingly.\n * Query example:\n * ```js\n * rifle(`$user::Profile>displayName::on`)\n * // results in:\n * gun.user().get('Profile').get('displayName').on(...)\n *\n * const pk = '....'\n * rifle(`${pk}::Profile::map.once`)\n * // results in:\n * gun.user(pk).get('Profile').get('displayName').map()once(...)\n *\n * rifle(`$gun::handshakeNodes::on`)\n * // results in:\n * gun.get('handshakeNodes').on(...)\n * ```\n * @param {RifleParams} args\n * @returns {Promise<SocketIOClient.Socket>}\n */\nexport const rifle = async ({ host, query, publicKey, reconnect }) => {\n  // TODO: remove circular dep\n  const { store } = await import(\"../store\");\n  const opts = {\n    ...options,\n    auth: {\n      encryptionId: store.getState().encryption.deviceId,\n      $shock: query,\n      publicKeyForDecryption: publicKey ?? \"\"\n    }\n  };\n\n  const cachedSocket = rifleSockets.get(query);\n\n  if (reconnect && cachedSocket) {\n    disconnectRifleSocket(query);\n  }\n\n  if (!cachedSocket || reconnect) {\n    const socket = SocketIO(`${host}/gun`, opts);\n    rifleSockets.set(query, socket);\n    const on = encryptedOn(socket);\n    const emit = encryptedEmit(socket);\n\n    on(\"$error\", err => {\n      console.error(`Gun rifle error (${query})`);\n\n      console.error(err);\n    });\n\n    return {\n      on,\n      emit,\n      off: () => socket.off(),\n      close: () => socket.close()\n    };\n  }\n\n  return cachedSocket;\n};\n\nexport const getChats = async ({ hostIP, authToken }) => {\n  try {\n    const chats = await fetchSocket({ hostIP, authToken, namespace: \"chats\" });\n\n    const contacts = chats.map(chat => ({\n      pk: chat.recipientPublicKey,\n      avatar: chat.recipientAvatar,\n      displayName: chat.recipientDisplayName\n    }));\n\n    const messages = chats.reduce(\n      (messages, chat) => ({\n        ...messages,\n        [chat.recipientPublicKey]: chat.messages\n          ?.filter(\n            message =>\n              message.body &&\n              message.body.trim() &&\n              message.body !== initialMessagePrefix\n          )\n          .sort((a, b) => b.timestamp - a.timestamp)\n      }),\n      {}\n    );\n\n    return {\n      contacts,\n      messages\n    };\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n\nexport const getSentRequests = async ({ hostIP, authToken }, callback) => {\n  try {\n    const sentRequests = await fetchSocket({\n      hostIP,\n      authToken,\n      namespace: \"sentReqs\",\n      callback\n    });\n\n    return sentRequests;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const getReceivedRequests = async ({ hostIP, authToken }, callback) => {\n  try {\n    const receivedRequests = await fetchSocket({\n      hostIP,\n      authToken,\n      namespace: \"receivedReqs\",\n      callback\n    });\n\n    return receivedRequests.map(request => ({\n      id: request.id,\n      pk: request.recipientPublicKey,\n      avatar: request.recipientAvatar,\n      displayName: request.recipientDisplayName,\n      changedAddress: request.recipientChangedRequestAddress,\n      timestamp: request.timestamp\n    }));\n  } catch (err) {\n    console.error(err);\n  }\n};\n","import Http from \"../utils/Http\";\nimport { DateTime } from \"luxon\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  getChats,\n  getReceivedRequests,\n  getSentRequests,\n  rifle\n} from \"../utils/WebSocket\";\nimport { initialMessagePrefix } from \"../utils/String\";\n\nexport const ACTIONS = {\n  LOAD_CHAT_DATA: \"chat/loadData\",\n  LOAD_SENT_REQUESTS: \"chat/loadSentRequests\",\n  LOAD_RECEIVED_REQUESTS: \"chat/loadReceivedRequests\",\n  SET_CHAT_CONTACTS: \"chat/contacts\",\n  SET_CHAT_MESSAGES: \"chat/messages\",\n  SENT_REQUEST: \"chat/request/sent\",\n  ACCEPT_HANDSHAKE_REQUEST: \"chat/request/accept\",\n  DECLINE_HANDSHAKE_REQUEST: \"chat/request/decline\",\n  SENDING_MESSAGE: \"chat/message/sending\",\n  SENT_MESSAGE: \"chat/message/sent\",\n  FAILED_MESSAGE: \"chat/message/failed\",\n  RECEIVED_MESSAGE: \"chat/message/received\"\n};\n\nexport const MESSAGE_STATUS = {\n  SENT: \"SENT\",\n  SENDING: \"SENDING\",\n  FAILED: \"FAILED\",\n  RECEIVED: \"RECEIVED\"\n};\n\nexport const loadChatData = () => async (dispatch, getState) => {\n  const { hostIP, authToken } = getState().node;\n  const data = await getChats({ hostIP, authToken });\n  console.log(\"LOAD_CHAT_DATA:\", data);\n\n  dispatch({\n    type: ACTIONS.LOAD_CHAT_DATA,\n    data\n  });\n};\n\nexport const loadSentRequests = () => (dispatch, getState) => {\n  const { hostIP, authToken } = getState().node;\n  getSentRequests({ hostIP, authToken }, (err, sentRequests) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    console.log(\"sentRequests:\", sentRequests);\n\n    dispatch({\n      type: ACTIONS.LOAD_SENT_REQUESTS,\n      data: sentRequests.map(request => ({\n        id: request.id,\n        pk: request.recipientPublicKey,\n        avatar: request.recipientAvatar,\n        displayName: request.recipientDisplayName,\n        changedAddress: request.recipientChangedRequestAddress,\n        timestamp: request.timestamp\n      }))\n    });\n  });\n};\n\nexport const loadReceivedRequests = () => (dispatch, getState) => {\n  const { hostIP, authToken } = getState().node;\n  getReceivedRequests({ hostIP, authToken }, (err, receivedRequests) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    console.log(\"receivedRequests:\", receivedRequests);\n\n    dispatch({\n      type: ACTIONS.LOAD_RECEIVED_REQUESTS,\n      data: receivedRequests.map(request => ({\n        id: request.id,\n        pk: request.requestorPK,\n        avatar: request.requestorAvatar,\n        displayName: request.requestorDisplayName,\n        timestamp: request.timestamp\n      }))\n    });\n  });\n};\n\nexport const subscribeChatMessages = (\n  userPublicKey,\n  recipientPublicKey\n) => async (dispatch, getState) => {\n  const { hostIP } = getState().node;\n  const { data: incomingId } = await Http.get(\n    `/api/gun/user/once/userToIncoming>${recipientPublicKey}`,\n    {\n      headers: {\n        \"public-key-for-decryption\": userPublicKey\n      }\n    }\n  );\n\n  if (!incomingId.data) {\n    console.warn(\"Unable to retrieve incoming ID for selected contact\");\n    return null;\n  }\n\n  const incomingMessages = await rifle({\n    host: hostIP,\n    query: `${recipientPublicKey}::outgoings>${incomingId.data}>messages::map.on`,\n    publicKey: recipientPublicKey\n  });\n\n  incomingMessages.on(\"$shock\", (message, id) => {\n    if (!message.body || message.body === initialMessagePrefix) {\n      return;\n    }\n    dispatch({\n      type: ACTIONS.RECEIVED_MESSAGE,\n      data: { ...message, id, recipientPublicKey, localId: id }\n    });\n  });\n\n  return incomingMessages;\n};\n\nexport const acceptHandshakeRequest = requestId => async dispatch => {\n  const { data } = await Http.put(`/api/gun/requests/${requestId}`, {\n    accept: true\n  });\n\n  dispatch({\n    type: ACTIONS.ACCEPT_HANDSHAKE_REQUEST,\n    data: requestId\n  });\n\n  return data;\n};\n\nexport const sendHandshakeRequest = publicKey => async (dispatch, getState) => {\n  const { data } = await Http.post(`/api/gun/requests`, {\n    publicKey\n  });\n\n  const { sentRequests } = getState().chat;\n  const [userExists] = sentRequests.filter(\n    request => request.recipientPublicKey === publicKey\n  );\n\n  if (!userExists) {\n    dispatch({\n      type: ACTIONS.SENT_REQUEST,\n      data: publicKey\n    });\n  }\n\n  return data;\n};\n\nexport const sendMessage = ({\n  publicKey,\n  message,\n  localId\n}) => async dispatch => {\n  const tempId = localId ?? uuidv4();\n  try {\n    dispatch({\n      type: ACTIONS.SENDING_MESSAGE,\n      data: {\n        body: message,\n        localId: tempId,\n        timestamp: DateTime.utc().toMillis(),\n        recipientPublicKey: publicKey\n      }\n    });\n    const { data } = await Http.post(`/api/gun/chats/${publicKey}`, {\n      body: message\n    });\n    console.log(data);\n    dispatch({\n      type: ACTIONS.SENT_MESSAGE,\n      data: { ...data, localId: tempId, recipientPublicKey: publicKey }\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIONS.FAILED_MESSAGE,\n      data: {\n        body: message,\n        localId: tempId,\n        timestamp: DateTime.utc().toMillis(),\n        recipientPublicKey: publicKey\n      }\n    });\n  }\n};\n","export const safeParseJSON = (data: string): string | object => {\n  try {\n    const parsedJSON = JSON.parse(data);\n    return parsedJSON;\n  } catch (err) {\n    return data;\n  }\n};\n","import { Buffer } from \"buffer\";\nimport ECCrypto from \"eccrypto\";\nimport FieldError from \"./FieldError\";\nimport { safeParseJSON } from \"./JSON\";\n\ninterface EncryptedMessage {\n  ciphertext: Uint8Array;\n  ephemPublicKey: Uint8Array;\n  iv: Uint8Array;\n  mac: Uint8Array;\n}\n\ninterface EncryptedMessageResponse {\n  ciphertext: string;\n  ephemPublicKey: string;\n  iv: string;\n  mac: string;\n}\n\ninterface DeriveKey {\n  localPrivateKey: Uint8Array | string;\n  remotePublicKey: Uint8Array | string;\n}\n\ninterface EncryptMessageArgs {\n  publicKey: Uint8Array | string;\n  sharedKey: Uint8Array | string;\n  message: string;\n}\n\ninterface DecryptMessageArgs {\n  privateKey: Uint8Array | string;\n  encryptedMessage: EncryptedMessage;\n}\n\nconst nonEncryptedEvents = [\n  \"ping\",\n  \"disconnect\",\n  \"IS_GUN_AUTH\",\n  \"SET_LAST_SEEN_APP\",\n  \"NOT_AUTH\"\n];\n\nexport const convertUTF8ToBase64 = (value: string) => {\n  return Buffer.from(value, \"utf-8\").toString(\"base64\");\n};\n\nexport const convertBase64ToBuffer = (value: string) => {\n  return Buffer.from(value, \"base64\");\n};\n\nexport const convertUTF8ToBuffer = (value: string) => {\n  return Buffer.from(value, \"utf-8\");\n};\n\nexport const convertBufferToBase64 = (value: Uint8Array) => {\n  return Buffer.from(value).toString(\"base64\");\n};\n\nexport const processKey = (key: Uint8Array | string): Uint8Array => {\n  if (key instanceof Uint8Array) {\n    return key;\n  }\n\n  const convertedKey = convertBase64ToBuffer(key);\n  return convertedKey;\n};\n\nexport const convertToEncryptedMessageResponse = (\n  encryptedMessage: EncryptedMessage | EncryptedMessageResponse\n): EncryptedMessageResponse => {\n  if (\n    typeof encryptedMessage.ciphertext === \"string\" &&\n    typeof encryptedMessage.iv === \"string\" &&\n    typeof encryptedMessage.mac === \"string\" &&\n    typeof encryptedMessage.ephemPublicKey === \"string\"\n  ) {\n    // @ts-ignore\n    return encryptedMessage;\n  }\n\n  if (\n    encryptedMessage.ciphertext instanceof Uint8Array &&\n    encryptedMessage.iv instanceof Uint8Array &&\n    encryptedMessage.mac instanceof Uint8Array &&\n    encryptedMessage.ephemPublicKey instanceof Uint8Array\n  ) {\n    return {\n      ciphertext: convertBufferToBase64(encryptedMessage.ciphertext),\n      iv: convertBufferToBase64(encryptedMessage.iv),\n      mac: convertBufferToBase64(encryptedMessage.mac),\n      ephemPublicKey: convertBufferToBase64(encryptedMessage.ephemPublicKey)\n    };\n  }\n\n  throw new FieldError({\n    field: \"encryptedMessage\",\n    message: \"Unknown encrypted message format\"\n  });\n};\n\nexport const convertToEncryptedMessage = (\n  encryptedMessage: EncryptedMessage | EncryptedMessageResponse\n): EncryptedMessage => {\n  if (\n    encryptedMessage.ciphertext instanceof Uint8Array &&\n    encryptedMessage.iv instanceof Uint8Array &&\n    encryptedMessage.mac instanceof Uint8Array &&\n    encryptedMessage.ephemPublicKey instanceof Uint8Array\n  ) {\n    // @ts-ignore\n    return encryptedMessage;\n  }\n\n  if (\n    typeof encryptedMessage.ciphertext === \"string\" &&\n    typeof encryptedMessage.iv === \"string\" &&\n    typeof encryptedMessage.mac === \"string\" &&\n    typeof encryptedMessage.ephemPublicKey === \"string\"\n  ) {\n    return {\n      ciphertext: convertBase64ToBuffer(encryptedMessage.ciphertext),\n      iv: convertBase64ToBuffer(encryptedMessage.iv),\n      mac: convertBase64ToBuffer(encryptedMessage.mac),\n      ephemPublicKey: convertBase64ToBuffer(encryptedMessage.ephemPublicKey)\n    };\n  }\n\n  throw new FieldError({\n    field: \"encryptedMessage\",\n    message: \"Unknown encrypted message format\"\n  });\n};\n\nexport const isEncryptedMessage = (message: any) =>\n  message?.ciphertext && message?.iv && message?.mac && message?.ephemPublicKey;\n\nexport const isNonEncrypted = (eventName: string) =>\n  nonEncryptedEvents.includes(eventName);\n\nexport const generateKeyPair = () => {\n  const privateKey: Uint8Array = ECCrypto.generatePrivate();\n  const publicKey: Uint8Array = ECCrypto.getPublic(privateKey);\n\n  const privateKeyBase64 = convertBufferToBase64(privateKey);\n  const publicKeyBase64 = convertBufferToBase64(publicKey);\n\n  return {\n    privateKey,\n    publicKey,\n    privateKeyBase64,\n    publicKeyBase64\n  };\n};\n\nexport const deriveKey = async ({\n  localPrivateKey,\n  remotePublicKey\n}: DeriveKey) => {\n  const sharedKey: Uint8Array = await ECCrypto.derive(\n    processKey(localPrivateKey),\n    processKey(remotePublicKey)\n  );\n  const sharedKeyBase64 = convertBufferToBase64(sharedKey);\n\n  return { sharedKey, sharedKeyBase64 };\n};\n\nexport const encryptMessage = async ({\n  publicKey,\n  message = \"\"\n}: EncryptMessageArgs): Promise<EncryptedMessageResponse> => {\n  const processedPublicKey = processKey(publicKey);\n  const messageBuffer = convertUTF8ToBuffer(message);\n  const encryptedMessage: EncryptedMessage = await ECCrypto.encrypt(\n    processedPublicKey,\n    messageBuffer\n  );\n  const encryptedMessageResponse = {\n    ciphertext: encryptedMessage.ciphertext,\n    iv: encryptedMessage.iv,\n    mac: encryptedMessage.mac,\n    ephemPublicKey: encryptedMessage.ephemPublicKey\n  };\n\n  return convertToEncryptedMessageResponse(encryptedMessageResponse);\n};\n\nexport const decryptMessage = async ({\n  privateKey,\n  encryptedMessage\n}: DecryptMessageArgs): Promise<string | object> => {\n  const processedPrivateKey = processKey(privateKey);\n  const decryptedMessageBuffer: Uint8Array = await ECCrypto.decrypt(\n    processedPrivateKey,\n    convertToEncryptedMessage(encryptedMessage)\n  );\n  const decryptedMessage = Buffer.from(decryptedMessageBuffer).toString();\n  const parsedMessage = safeParseJSON(decryptedMessage);\n\n  return parsedMessage;\n};\n","import Http from \"axios\";\n\nexport const ACTIONS = {\n  LOAD_BALANCE: \"wallet/balance/load\",\n  LOAD_USD_RATE: \"wallet/usdRate/load\",\n  LOAD_TRANSACTIONS: \"wallet/transactions/load\",\n  LOAD_MORE_TRANSACTIONS: \"wallet/transactions/loadMore\",\n  LOAD_CHANNELS: \"wallet/channels/load\",\n  LOAD_INVOICES: \"wallet/invoices/load\",\n  LOAD_MORE_INVOICES: \"wallet/invoices/loadMore\",\n  LOAD_PAYMENTS: \"wallet/payments/load\",\n  LOAD_MORE_PAYMENTS: \"wallet/payments/loadMore\",\n  LOAD_PEERS: \"wallet/peers/load\",\n  ADD_PEER: \"wallet/peers/add\",\n  REMOVE_PEER: \"wallet/peers/remove\",\n  LOAD_RECENT_TRANSACTIONS: \"wallet/recentTransactions/load\",\n  RESET_RECENT_TRANSACTIONS: \"wallet/recentTransactions/reset\"\n};\n\nexport const fetchWalletBalance = () => async dispatch => {\n  const { data } = await Http.get(`/api/lnd/balance`);\n\n  dispatch({\n    type: ACTIONS.LOAD_BALANCE,\n    data: {\n      channelBalance: data.channel_balance,\n      confirmedBalance: data.confirmed_balance,\n      pendingChannelBalance: data.pending_channel_balance\n    }\n  });\n\n  return data;\n};\n\nexport const fetchUSDRate = () => async dispatch => {\n  const { data } = await Http.get(\n    \"https://api.coinbase.com/v2/prices/spot?currency=USD\"\n  );\n  const exchangeRate = data.data.amount.replace(/,/g, \"\");\n\n  dispatch({\n    type: ACTIONS.LOAD_USD_RATE,\n    data: exchangeRate\n  });\n\n  return exchangeRate;\n};\n\nexport const fetchTransactions = ({\n  page,\n  itemsPerPage = 10,\n  reset = false\n}) => async (dispatch, getState) => {\n  const { transactions } = getState().wallet;\n\n  if ((transactions.page >= page && !reset) || transactions.totalPages < page) {\n    return;\n  }\n\n  const { data } = await Http.get(\"/api/lnd/transactions\", {\n    params: {\n      page,\n      itemsPerPage\n    }\n  });\n\n  dispatch({\n    type: reset ? ACTIONS.LOAD_TRANSACTIONS : ACTIONS.LOAD_MORE_TRANSACTIONS,\n    data\n  });\n\n  return data;\n};\n\nexport const fetchChannels = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/listchannels\");\n\n  dispatch({\n    type: ACTIONS.LOAD_CHANNELS,\n    data: data.channels\n  });\n\n  return data;\n};\n\nexport const fetchPeers = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/listpeers\");\n\n  dispatch({\n    type: ACTIONS.LOAD_PEERS,\n    data: data.peers\n  });\n\n  return data;\n};\n\nexport const fetchInvoices = ({\n  page,\n  itemsPerPage = 10,\n  reset = false\n}) => async (dispatch, getState) => {\n  const { invoices } = getState().wallet;\n\n  if ((invoices.page >= page && !reset) || invoices.totalPages < page) {\n    return;\n  }\n\n  const { data } = await Http.get(\"/api/lnd/invoices\", {\n    params: {\n      page,\n      itemsPerPage\n    }\n  });\n\n  dispatch({\n    type: reset ? ACTIONS.LOAD_INVOICES : ACTIONS.LOAD_MORE_INVOICES,\n    data\n  });\n\n  return data;\n};\n\nexport const fetchPayments = ({\n  page,\n  itemsPerPage = 10,\n  reset = false\n}) => async (dispatch, getState) => {\n  const { payments } = getState().wallet;\n\n  if ((payments.page >= page && !reset) || payments.totalPages < page) {\n    return;\n  }\n\n  const { data } = await Http.get(\"/api/lnd/payments\", {\n    params: {\n      page,\n      itemsPerPage\n    }\n  });\n\n  dispatch({\n    type: reset ? ACTIONS.LOAD_PAYMENTS : ACTIONS.LOAD_MORE_PAYMENTS,\n    data\n  });\n\n  return data;\n};\n\nexport const fetchUnifiedTransactions = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/unifiedTrx\");\n\n  dispatch({\n    type: ACTIONS.LOAD_RECENT_TRANSACTIONS,\n    data\n  });\n\n  return data;\n};\n\nexport const connectPeer = ({ publicKey, host }) => async dispatch => {\n  try {\n    await Http.post(\"/api/lnd/connectpeer\", {\n      pubkey: publicKey,\n      host: host\n    });\n\n    const newPeer = {\n      pub_key: publicKey,\n      address: host,\n      bytes_sent: 0,\n      bytes_recv: 0,\n      sat_sent: 0,\n      sat_recv: 0,\n      inbound: false\n    };\n\n    dispatch({\n      type: ACTIONS.ADD_PEER,\n      data: newPeer\n    });\n\n    return newPeer;\n  } catch (err) {\n    console.error(err);\n    throw err?.response?.data ?? err;\n  }\n};\n\nexport const openChannel = ({\n  publicKey = \"\",\n  channelCapacity = 0,\n  pushAmount = 0\n}) => async (dispatch, getState) => {\n  try {\n    const { feeRates, rate } = getState().fees;\n    await Http.post(\"/api/lnd/openchannel\", {\n      pubkey: publicKey,\n      channelCapacity: channelCapacity.toString(),\n      channelPushAmount: pushAmount.toString(),\n      satPerByte: feeRates[rate]\n    });\n\n    const data = await fetchChannels()(dispatch);\n\n    return data.channels;\n  } catch (err) {\n    console.error(err);\n    throw err?.response?.data ?? err;\n  }\n};\n","import Http from '../utils/Http'\n\nexport const ACTIONS = {\n  SET_SEED_PROVIDER_PUB:'content/setSeedProviderPub',\n  SET_SEED_INFO:'content/setSeedInfo',\n  ADD_PUBLISHED_CONTENT:'content/addPublishedContent',\n  ADD_UNLOCKED_CONTENT:'content/addUnlocked',\n  ADD_STREAM:'content/addStream',\n  REMOVE_STREAM:'content/removeStream',\n  ADD_AVAILABLE_TOKEN:'content/addToken',\n  REMOVE_USED_TOKEN:'content/removeToken',\n  ADD_STREAM_TOKEN:'content/addStreamToken',\n  REMOVE_STREAM_TOKEN:'content/removeStreamToken',\n};\n\nexport const setSeedProviderPub = pub => async dispatch => {\n  let value = {\n    $$__ENCRYPT__FOR:'me',\n    value:pub\n  }\n  if(!pub){\n    value = \"\"\n  }\n  await Http.post('/api/gun/put',{\n    path:'$user>seedServiceProviderPubKey',\n    value\n  })\n  dispatch({\n    type: ACTIONS.SET_SEED_PROVIDER_PUB,\n    data: pub\n  });\n};\nexport const setSeedInfo = (seedUrl,seedToken) => async dispatch => {\n  const infoS = JSON.stringify({seedUrl,seedToken})\n  await Http.post('/api/gun/put',{\n    path:'$user>seedServiceSeedData',\n    value:{\n      $$__ENCRYPT__FOR:'me',\n      value:infoS\n    }\n  })\n  dispatch({\n    type: ACTIONS.SET_SEED_INFO,\n    data: {seedUrl,seedToken}\n  });\n};\nexport const addPublishedContent = content => async dispatch => {\n  let toSet = content\n  if(typeof content !== 'string'){\n    toSet = JSON.stringify(content)\n  }\n  const {data} = await Http.post('/api/gun/set',{\n    path:'$user>publishedContent',\n    value:{\n      $$__ENCRYPT__FOR:'me',\n      value:toSet\n    }\n  })\n  dispatch({\n    type: ACTIONS.ADD_PUBLISHED_CONTENT,\n    data: {content,res:data}\n  });\n  return data\n};\n\nexport const unlockContent = (amt,owner,postID) => async dispatch => {\n  const {data} = await Http.post('/api/lnd/unifiedTrx',{\n    type: 'contentReveal',\n    amt,\n    to: owner,\n    memo:'',\n    feeLimit:500,\n    ackInfo:postID\n  })\n  const revealRes = JSON.parse(data.orderAck.response)\n  if(revealRes && revealRes.unlockedContents){\n    for (const contentID in revealRes.unlockedContents) {\n      if (Object.hasOwnProperty.call(revealRes.unlockedContents, contentID)) {\n        const content = revealRes.unlockedContents[contentID];\n        dispatch({\n          type:ACTIONS.ADD_UNLOCKED_CONTENT,\n          data:{contentPath:`${owner}>posts>${postID}`,content}\n        })\n      }\n    }\n  }\n}\nexport const addStream = (seedToken, liveToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_STREAM,\n    data: {seedToken,liveToken}\n  });\n};\nexport const removeStream = () => dispatch => {\n  dispatch({\n    type: ACTIONS.REMOVE_STREAM,\n  });\n};\nexport const addAvailableToken = (seedUrl, userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_AVAILABLE_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};\nexport const removeUnavailableToken = (seedUrl,userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.REMOVE_USED_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};\nexport const addStreamToken = (seedUrl, userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_STREAM_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};\nexport const removeStreamToken = (seedUrl,userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.REMOVE_STREAM_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};","// @ts-check\nimport { useCallback } from \"react\";\nimport classNames from \"classnames\";\nimport \"./css/index.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { logout } from \"../../actions/AuthActions\";\nimport { closeDrawer } from \"../../actions/DrawerActions\";\nimport * as Store from \"../../store\";\n\nconst Drawer = () => {\n  const dispatch = useDispatch();\n  const open = Store.useSelector(({ drawer }) => drawer.open);\n  const close = useCallback(() => {\n    dispatch(closeDrawer());\n  }, [dispatch]);\n  const onClickLogout = useCallback(() => {\n    if (window.confirm(\"Are you sure you wish to log out?\")) {\n      dispatch(logout());\n      dispatch(closeDrawer());\n    }\n  }, [dispatch]);\n\n  const onClickScan = useCallback(() => {}, []);\n\n  return (\n    <>\n      <div\n        className={classNames({\n          \"drawer-overlay\": true,\n          \"drawer-overlay-open\": open\n        })}\n        onClick={close}\n      ></div>\n      <div\n        className={classNames({\n          \"drawer-container\": true,\n          \"drawer-container-open\": open\n        })}\n      >\n        <div className=\"drawer-top-section\">\n          {/* <div className=\"drawer-item\">\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-wallet\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Spending Rules</p>\n          </div> */}\n          {/* <div className=\"drawer-item\">\n        <div className=\"drawer-item-icon\">\n          <i className=\"icon-solid-spending-rule\"></i>\n        </div>\n        <p className=\"drawer-item-title unselectable\">Spending Rules</p>\n      </div> */}\n          <NavLink className=\"drawer-item\" to=\"/advanced\" onClick={close}>\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-spending-rule\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Advanced Lightning</p>\n          </NavLink>\n          <div className=\"drawer-item\">\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-key\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Seed Backup</p>\n          </div>\n        </div>\n        <div className=\"drawer-bottom-section\" >\n          <NavLink className=\"drawer-item\"  to=\"/moonpay\" onClick={close}>\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-help\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Buy Bitcoins</p>\n          </NavLink>\n          <div className=\"drawer-item\">\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-help\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Help</p>\n          </div>\n        </div>\n\n        <div className=\"drawer-logout-and-scan\">\n        <NavLink  to=\"/QRScanner\" onClick={close}>\n          <i\n            onClick={onClickScan}\n            className=\"icon-solid-scan\"\n            style={{ color: \"var(--main-blue)\" }}\n          ></i>\n        </NavLink>\n          <i\n            onClick={onClickLogout}\n            className=\"fas fa-power-off\"\n            style={{ color: \"var(--main-blue)\" }}\n          ></i>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Drawer;\n","// @ts-check\nimport React, { Suspense, useEffect } from \"react\";\nimport { withRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport JWTDecode from \"jwt-decode\";\nimport videojs from \"video.js\";\nimport FullHeight from \"react-div-100vh\";\nimport { setAuthenticated } from \"./actions/AuthActions\";\nimport { loadReceivedRequests, loadSentRequests } from \"./actions/ChatActions\";\nimport Loader from \"./common/Loader\";\nimport Drawer from \"./common/Drawer\";\nimport \"./styles/App.css\";\nimport { subscribeUserProfile } from \"./actions/UserProfilesActions\";\nimport * as Store from \"./store\";\n\nconst OverviewPage = React.lazy(() => import(\"./pages/Overview\"));\nconst AdvancedPage = React.lazy(() => import(\"./pages/Advanced\"));\nconst MessagesPage = React.lazy(() => import(\"./pages/Messages\"));\nconst ProfilePage = React.lazy(() => import(\"./pages/Profile\"));\nconst ChatPage = React.lazy(() => import(\"./pages/Chat\"));\nconst SendPage = React.lazy(() => import(\"./pages/Send\"));\nconst RequestPage = React.lazy(() => import(\"./pages/Request\"));\nconst AuthPage = React.lazy(() => import(\"./pages/Auth\"));\nconst FeedPage = React.lazy(() => import(\"./pages/Feed\"));\nconst MoonPayPage = React.lazy(() => import(\"./pages/MoonPay\"));\nconst PublishContentPage = React.lazy(() =>\n  import(\"./pages/Profile/publishContent\")\n);\nconst offerServicePage = React.lazy(() =>\n  import(\"./pages/Profile/offerService\")\n);\nconst createPostPage = React.lazy(() => import(\"./pages/Profile/createPost\"));\nconst GoLivePage = React.lazy(() => import(\"./pages/Profile/goLive\"));\nconst OtherUserPage = React.lazy(() => import(\"./pages/OtherUser\"));\nconst Story = React.lazy(() => import(\"./pages/Story\"));\nconst Stories = React.lazy(() => import(\"./pages/Stories\"));\nconst QRScannerPage = React.lazy(() => import(\"./pages/QRScanner\"));\n\nconst PrivateRoute = ({ component, ...options }) => {\n  const authenticated = Store.useSelector(({ auth }) => auth.authenticated);\n  const authorizedComponent = authenticated ? component : AuthPage;\n\n  return <Route {...options} component={authorizedComponent} />;\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const authToken = Store.useSelector(({ node }) => node.authToken);\n  const authenticated = Store.useSelector(({ auth }) => auth.authenticated);\n  const publicKey = Store.useSelector(Store.selectSelfPublicKey);\n\n  useEffect(() => {\n    videojs.addLanguage(\"en\", {\n      \"The media could not be loaded, either because the server or network failed or because the format is not supported.\":\n        \"Stream Not Available\"\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!authToken) {\n      dispatch(setAuthenticated(false));\n      return;\n    }\n\n    const decodedToken = JWTDecode(authToken);\n    // @ts-expect-error\n    const tokenExpired = decodedToken.exp * 1000 < Date.now();\n    setAuthenticated(tokenExpired);\n  }, [authToken, dispatch]);\n\n  useEffect(() => {\n    if (authenticated && dispatch) {\n      dispatch(loadSentRequests());\n      dispatch(loadReceivedRequests());\n      dispatch(subscribeUserProfile(publicKey));\n    }\n  }, [authenticated, dispatch, publicKey]);\n\n  return (\n      <FullHeight className=\"ShockWallet\">\n        <Drawer />\n        <Suspense fallback={<Loader fullScreen text={null} />}>\n          <Switch>\n            <Route path=\"/auth\" exact component={AuthPage} />\n            <PrivateRoute path=\"/overview\" exact component={OverviewPage} />\n            <PrivateRoute path=\"/advanced\" exact component={AdvancedPage} />\n            <PrivateRoute path=\"/chat\" exact component={MessagesPage} />\n            <PrivateRoute path=\"/chat/:publicKey\" component={ChatPage} />\n            <PrivateRoute path=\"/send\" exact component={SendPage} />\n            <PrivateRoute path=\"/request\" exact component={RequestPage} />\n            <PrivateRoute path=\"/profile\" exact component={ProfilePage} />\n            <PrivateRoute\n              path=\"/publishContent\"\n              exact\n              component={PublishContentPage}\n            />\n            <PrivateRoute path=\"/feed\" exact component={FeedPage} />\n            <PrivateRoute path=\"/moonpay\" exact component={MoonPayPage} />\n            <PrivateRoute path=\"/createPost\" exact component={createPostPage} />\n            <PrivateRoute path=\"/goLive\" exact component={GoLivePage} />\n            <PrivateRoute\n              path=\"/offerService\"\n              exact\n              component={offerServicePage}\n            />\n            <PrivateRoute path=\"/QRScanner\" exact component={QRScannerPage} />\n            <PrivateRoute\n              path=\"/otherUser/:publicKey\"\n              exact\n              component={OtherUserPage}\n            />\n            <Route path=\"/story\" exact component={Story} />\n            <Route path=\"/stories\" exact component={Stories} />\n            <Redirect to=\"/overview\" />\n          </Switch>\n        </Suspense>\n      </FullHeight>\n  );\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Http from \"axios\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nHttp.defaults.timeout = 10000;\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <Router>\n          <App />\n        </Router>\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n","import * as Common from \"shock-common\";\n\nimport * as Utils from \"../utils\";\nimport { disconnectRifleSocket, rifle } from \"../utils/WebSocket\";\n\nimport { setAuthenticated } from \"./AuthActions\";\n\nexport const ACTIONS = {\n  RESET_USER_PROFILES: \"userProfiles/profiles/reset\",\n  LOAD_USER_PROFILE: \"userProfiles/profiles/load\",\n  REMOVE_USER_PROFILE: \"userProfiles/profiles/remove\",\n  UPDATE_USER_PROFILE: \"userProfiles/profiles/update\"\n};\n\nexport const updateUserProfile = (\n  publicKey: string,\n  profile: Partial<Common.User>\n) => ({\n  type: ACTIONS.UPDATE_USER_PROFILE,\n  data: {\n    publicKey,\n    profile\n  }\n});\n\n/**\n * Returns an un subscription function.\n */\nexport const subscribeUserProfile = (publicKey: string) => async (\n  dispatch: (action: object) => void,\n  getState: () => {\n    node: { hostIP: string };\n    userProfiles: Record<string, Common.User>;\n  }\n) => {\n  const { hostIP } = getState().node;\n  const [subscription, binarySub] = await Promise.all([\n    rifle({\n      host: hostIP,\n      query: `${publicKey}::Profile::on`,\n      reconnect: true\n    }),\n    rifle({\n      host: hostIP,\n      query: `${publicKey}::profileBinary::map.on`,\n      reconnect: true\n    })\n  ]);\n\n  binarySub.on(\"$shock\", (data, key: string) => {\n    if (key === \"avatar\") {\n      if (typeof data !== \"string\" && data !== null) {\n        Utils.logger.error(\n          `Expected avatar data to be string or null, instead got: ${typeof data}. Public key: ${publicKey}`\n        );\n        return;\n      }\n      dispatch(\n        updateUserProfile(publicKey, {\n          avatar: data\n        })\n      );\n    } else if (key === \"header\") {\n      if (typeof data !== \"string\" && data !== null) {\n        Utils.logger.error(\n          `Expected header data to be string or null, instead got: ${typeof data}. Public key: ${publicKey}`\n        );\n        return;\n      }\n      dispatch(\n        updateUserProfile(publicKey, {\n          header: data\n        })\n      );\n    } else {\n      Utils.logger.error(\n        `Unknown key: ${key} for user binary profile data gun RPC socket`\n      );\n    }\n  });\n\n  subscription.on(\"$shock\", profile => {\n    const { [publicKey]: existingUser } = getState().userProfiles;\n\n    if (existingUser) {\n      dispatch({\n        type: ACTIONS.UPDATE_USER_PROFILE,\n        data: { publicKey, profile }\n      });\n      return profile;\n    }\n\n    dispatch({\n      type: ACTIONS.LOAD_USER_PROFILE,\n      data: { publicKey, profile }\n    });\n  });\n\n  const onError = (err: unknown) => {\n    if (err === Common.NOT_AUTH) {\n      dispatch(setAuthenticated(false));\n      return;\n    }\n\n    Utils.logger.error(\n      `Error inside user profile subscription ( ${publicKey} )`\n    );\n    Utils.logger.error(err);\n  };\n\n  const onNotAuth = () => {\n    dispatch(setAuthenticated(false));\n  };\n\n  binarySub.on(\"$error\", onError);\n  subscription.on(\"$error\", onError);\n  binarySub.on(Common.NOT_AUTH, onNotAuth);\n  subscription.on(Common.NOT_AUTH, onNotAuth);\n\n  return () => {\n    binarySub.off(\"*\");\n    binarySub.close();\n    subscription.off(\"*\");\n    subscription.close();\n  };\n};\n\nexport const unsubscribeUserProfile = publicKey => async () => {\n  disconnectRifleSocket(`${publicKey}::Profile::on`);\n  disconnectRifleSocket(`${publicKey}::profileBinary::map.on`);\n};\n","// @ts-check\nimport jwtDecode from \"jwt-decode\";\nimport Http from \"axios\";\nimport { ACTIONS as AUTH_ACTIONS, setAuthenticated } from \"./AuthActions\";\nimport { parseError } from \"../utils/Error\";\nimport { throttledExchangeKeyPair } from \"./EncryptionActions\";\n\nexport const ACTIONS = {\n  RESET_NODE_INFO: \"node/reset\",\n  SET_HOST_IP: \"node/hostIP\",\n  SET_HOST_ID: \"node/hostId\",\n  SET_AUTHENTICATED_USER: \"node/authenticatedUser\",\n  SET_CONNECTION_STATUS: \"node/connectionStatus\",\n  SET_NODE_HEALTH: \"node/health\",\n  SET_ATTEMPTS_DONE: \"node/attemptsDone\"\n};\n\nexport const resetNodeInfo = () => dispatch => {\n  dispatch({\n    type: ACTIONS.RESET_NODE_INFO\n  });\n};\n\nexport const setHostId = hostId => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_HOST_ID,\n    data: hostId\n  });\n};\n\nconst wait = ms => new Promise(r => setTimeout(r, ms));\n\nconst retryOperation = (operation, delay, retries) =>\n  new Promise((resolve, reject) => {\n    return operation()\n      .then(resolve)\n      .catch(reason => {\n        if (retries > 0) {\n          return wait(delay)\n            .then(retryOperation.bind(null, operation, delay, retries - 1))\n            .then(resolve)\n            .catch(reject);\n        }\n        return reject(reason);\n      });\n  });\n\nexport const fetchNodeHealth = (hostIP, retries) => async dispatch => {\n  try {\n    const { data } = await retryOperation(\n      async () => {\n        const { data } = await Http.get(`${hostIP}/healthz`);\n        if (!data) {\n          throw new Error(\n            `NodeActions->fetchNodeHealth()->No data obtained from healthz endpoint`\n          );\n        }\n        return { data };\n      },\n      1000,\n      retries\n    );\n\n    if (data.APIStatus?.message) {\n      dispatch({\n        type: ACTIONS.SET_CONNECTION_STATUS,\n        data: true\n      });\n    }\n\n    return data;\n  } catch (err) {\n    console.log(`NodeActions->fetchNodeHealth()->Error encountered:`);\n    console.log(err);\n    dispatch({\n      type: ACTIONS.SET_CONNECTION_STATUS,\n      data: false\n    });\n  }\n};\n\nexport const fetchNodeUnlockStatus = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/wallet/status\");\n  const { walletExists, walletStatus } = data;\n\n  if (walletExists) {\n    dispatch({\n      type: AUTH_ACTIONS.SET_AUTH_STEP,\n      data: walletStatus === \"locked\" ? \"unlockWallet\" : \"gunAuth\"\n    });\n    return walletStatus;\n  }\n\n  dispatch({\n    type: AUTH_ACTIONS.SET_AUTH_STEP,\n    data: \"createWallet\"\n  });\n\n  return \"createWallet\";\n};\n\nexport const connectHost = (\n  hostIP,\n  resetData = true,\n  retries = 0\n) => async dispatch => {\n  if (resetData) {\n    dispatch({\n      type: ACTIONS.RESET_NODE_INFO\n    });\n    dispatch({\n      type: AUTH_ACTIONS.RESET_AUTH_INFO\n    });\n  }\n  const done = async (host, health) => {\n    Http.defaults.baseURL = `${host}`;\n\n    dispatch({\n      type: ACTIONS.SET_HOST_IP,\n      data: host\n    });\n\n    await Promise.all([\n      dispatch(fetchNodeUnlockStatus()),\n      dispatch(throttledExchangeKeyPair())\n    ]);\n  };\n\n  let nodeHealthHttps;\n  const sanitizedHostIP = hostIP.replace(/^http(s)?:\\/\\//, \"\");\n  try {\n    nodeHealthHttps = await fetchNodeHealth(\n      `https://${sanitizedHostIP}`,\n      retries\n    )(dispatch);\n    if (nodeHealthHttps) {\n      nodeHealthHttps.withProtocolHostIP = `https://${sanitizedHostIP}`;\n      await done(`https://${sanitizedHostIP}`, nodeHealthHttps);\n      return nodeHealthHttps;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  console.error(\"cannot establish https connection, will try http\");\n  const nodeHealth = await fetchNodeHealth(\n    `http://${sanitizedHostIP}`,\n    retries\n  )(dispatch);\n  nodeHealth.withProtocolHostIP = `http://${sanitizedHostIP}`;\n  await done(`http://${sanitizedHostIP}`, nodeHealth);\n  return nodeHealthHttps || nodeHealth;\n};\n\nexport const unlockWallet = ({ alias, password }) => async dispatch => {\n  try {\n    const { data } = await Http.post(\n      \"/api/lnd/auth\",\n      {\n        alias,\n        password\n      },\n      {\n        // Unlocking can take significantly longer than other endpoints\n        timeout: 30000\n      }\n    );\n\n    dispatch(setAuthenticated(true));\n    const decodedToken = jwtDecode(data.authorization);\n    dispatch({\n      type: ACTIONS.SET_AUTHENTICATED_USER,\n      data: {\n        alias: data.user.alias,\n        authToken: data.authorization,\n        publicKey: data.user.publicKey,\n        // @ts-expect-error\n        authTokenExpirationDate: decodedToken.exp\n      }\n    });\n    return data;\n  } catch (err) {\n    dispatch(setAuthenticated(false));\n    throw parseError(err);\n  }\n};\n\nexport const createAlias = ({ alias, password }) => async dispatch => {\n  try {\n    const { data } = await Http.post(\"/api/lnd/wallet/existing\", {\n      alias,\n      password\n    });\n\n    dispatch(setAuthenticated(true));\n    const decodedToken = jwtDecode(data.authorization);\n    dispatch({\n      type: ACTIONS.SET_AUTHENTICATED_USER,\n      data: {\n        alias: data.user.alias,\n        authToken: data.authorization,\n        publicKey: data.user.publicKey,\n        // @ts-expect-error\n        authTokenExpirationDate: decodedToken.exp\n      }\n    });\n    return data;\n  } catch (err) {\n    dispatch(setAuthenticated(false));\n    throw parseError(err);\n  }\n};\n\nexport const createWallet = ({ alias, password }) => async dispatch => {\n  try {\n    const { data } = await Http.post(\n      \"/api/lnd/wallet\",\n      {\n        alias,\n        password\n      },\n      {\n        // Creating a wallet can take longer than any other endpoints.\n        timeout: 30000\n      }\n    );\n\n    dispatch(setAuthenticated(true));\n    const decodedToken = jwtDecode(data.authorization);\n    dispatch({\n      type: ACTIONS.SET_AUTHENTICATED_USER,\n      data: {\n        alias: data.user.alias,\n        authToken: data.authorization,\n        publicKey: data.user.publicKey,\n        // @ts-expect-error\n        authTokenExpirationDate: decodedToken.exp\n      }\n    });\n    return data;\n  } catch (err) {\n    dispatch(setAuthenticated(false));\n    throw parseError(err);\n  }\n};\n\nexport const SetAttemptsDone = () => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_ATTEMPTS_DONE\n  });\n};\n","export type FieldErrorType = {\n  message: string;\n  field: string;\n  name?: string;\n  stack?: string;\n};\n\nclass FieldError extends Error {\n  field: string;\n\n  constructor(error: any) {\n    super();\n    this.message = error?.message ?? \"An unknown error has occurred\";\n    this.field = error?.field ?? \"unknown\";\n    this.name = error?.name;\n    this.stack = error?.stack;\n  }\n}\n\nexport default FieldError;\n","import { GUN_PROPS } from \"../utils/Gun\";\nimport Http from \"../utils/Http\";\nimport { disconnectRifleSocket, rifle } from \"../utils/WebSocket\";\nimport {\n  subscribeUserProfile,\n  unsubscribeUserProfile\n} from \"./UserProfilesActions\";\n\nexport const ACTIONS = {\n  RESET_FEED: \"feed/reset\",\n  ADD_FOLLOW: \"feed/follows/add\",\n  REMOVE_FOLLOW: \"feed/follows/remove\",\n  UPDATE_FOLLOW: \"feed/follows/update\",\n  LOAD_POSTS: \"feed/posts/load\",\n  ADD_USER_POST: \"feed/posts/add\",\n  DELETE_USER_POST: \"feed/posts/delete\",\n  LOAD_SHARED_POST: \"feed/sharedPosts/load\",\n  POST_TIPPED: \"feed/posts/tipped\"\n};\n\nexport const removeFollow = key => dispatch =>\n  dispatch({\n    type: ACTIONS.REMOVE_FOLLOW,\n    data: key\n  });\n\nexport const addFollow = follow => dispatch =>\n  dispatch({\n    type: ACTIONS.ADD_FOLLOW,\n    data: follow\n  });\n\nexport const loadSharedPost = (\n  postId,\n  publicKey,\n  sharerPublicKey\n) => async dispatch => {\n  const { data: post } = await Http.get(\n    `/api/gun/otheruser/${publicKey}/load/posts>${postId}`\n  );\n  dispatch(subscribeUserProfile(publicKey));\n\n  dispatch({\n    type: ACTIONS.LOAD_SHARED_POST,\n    data: {\n      ...post.data,\n      authorId: publicKey,\n      sharerId: sharerPublicKey,\n      id: postId\n    }\n  });\n};\n\nexport const subscribeUserPosts = publicKey => async (dispatch, getState) => {\n  const { hostIP } = getState().node;\n  const subscription = await rifle({\n    host: hostIP,\n    query: `${publicKey}::posts::on`\n  });\n  subscription.on(\"$shock\", posts => {\n    const postEntries = Object.entries(posts);\n    const newPosts = postEntries\n      .filter(([key, value]) => value !== null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n    const deletedPosts = postEntries\n      .filter(([key, value]) => value === null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n\n    newPosts.map(async id => {\n      const { data: post } = await Http.get(\n        `/api/gun/otheruser/${publicKey}/load/posts>${id}`\n      );\n\n      dispatch({\n        type: ACTIONS.ADD_USER_POST,\n        data: {\n          ...post.data,\n          id,\n          authorId: publicKey,\n          type: \"post\"\n        }\n      });\n    });\n\n    deletedPosts.map(id =>\n      dispatch({\n        type: ACTIONS.DELETE_USER_POST,\n        data: {\n          id,\n          authorId: publicKey,\n          type: \"post\"\n        }\n      })\n    );\n  });\n  return subscription;\n};\n\nexport const subscribeSharedUserPosts = publicKey => async (\n  dispatch,\n  getState\n) => {\n  const { hostIP } = getState().node;\n  const subscription = await rifle({\n    host: hostIP,\n    query: `${publicKey}::sharedPosts::on`\n  });\n  subscription.on(\"$shock\", posts => {\n    const postEntries = Object.entries(posts);\n    const newPosts = postEntries\n      .filter(([key, value]) => value !== null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n    const deletedPosts = postEntries\n      .filter(([key, value]) => value === null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n\n    newPosts.map(async id => {\n      const { data: post } = await Http.get(\n        `/api/gun/otheruser/${publicKey}/load/sharedPosts>${id}`\n      );\n\n      dispatch({\n        type: ACTIONS.ADD_USER_POST,\n        data: {\n          ...post.data,\n          id,\n          authorId: publicKey,\n          type: \"shared\"\n        }\n      });\n\n      await loadSharedPost(id, post.data.originalAuthor, publicKey)(dispatch);\n    });\n\n    deletedPosts.map(id =>\n      dispatch({\n        type: ACTIONS.DELETE_USER_POST,\n        data: {\n          id,\n          authorId: publicKey\n        }\n      })\n    );\n  });\n  return subscription;\n};\n\nexport const subscribeFollows = () => async (dispatch, getState) => {\n  const { hostIP, publicKey } = getState().node;\n  const subscription = await rifle({\n    host: hostIP,\n    query: \"$user::follows::map.on\",\n    reconnect: true\n  });\n  console.log(\"subbing follows\");\n  //-- Subscribe to self, posts and shared posts are merged\n  //dispatch(subscribeUserProfile(publicKey))\n  dispatch(subscribeUserPosts(publicKey));\n  dispatch(subscribeSharedUserPosts(publicKey));\n\n  subscription.on(\"$shock\", async (follow, key) => {\n    if (typeof key !== \"string\") {\n      console.warn(`Invalid follow key received: ${key}`);\n      return;\n    }\n\n    if (!follow) {\n      unsubscribeUserProfile(key);\n      dispatch(removeFollow(key));\n      return;\n    }\n\n    if (typeof follow.user !== \"string\") {\n      console.warn(`Invalid follow user received (${follow.user})`);\n      return;\n    }\n\n    dispatch(addFollow(follow));\n    dispatch(subscribeUserProfile(follow.user));\n    dispatch(subscribeUserPosts(follow.user));\n    dispatch(subscribeSharedUserPosts(follow.user));\n  });\n\n  return subscription;\n};\n\nexport const sendTipPost = ({\n  publicKey,\n  postId,\n  amount\n}) => async dispatch => {\n  const { data } = await Http.post(\"/api/lnd/unifiedTrx\", {\n    type: \"tip\",\n    amt: amount,\n    to: publicKey,\n    memo: \"Post Tipped!\",\n    feeLimit: amount * 0.006 + 10, // TODO: Hardcoded fees for now\n    ackInfo: postId\n  });\n  console.log(data);\n  dispatch({\n    type: ACTIONS.POST_TIPPED,\n    data: {\n      publicKey,\n      postId,\n      amount\n    }\n  });\n};\n","import { AxiosError } from \"axios\";\nimport FieldError, { FieldErrorType } from \"./FieldError\";\n\nexport type MixedError = Error | AxiosError | FieldErrorType;\n\nexport const parseError = (error: MixedError) => {\n  if (\"response\" in error) {\n    const response = error.response?.data;\n    return new FieldError({\n      field: response?.field ?? \"unknown\",\n      message: response?.errorMessage ?? \"An unknown error has occurred\"\n    });\n  }\n\n  return new FieldError({\n    field: (\"field\" in error && error.field) ?? \"unknown\",\n    message: error.message ?? \"An unknown error has occurred\"\n  });\n};\n","import { v4 as uuidv4 } from \"uuid\";\nimport Http from \"axios\";\nimport { setHostId } from \"./NodeActions\";\nimport { generateKeyPair } from \"../utils/Encryption\";\n\nexport const ACTIONS = {\n  ADD_USER_KEY_PAIR: \"encryption/userKeyPair\",\n  ADD_HOST_KEY: \"encryption/hostKey\",\n  SET_DEVICE_ID: \"encryption/deviceId\"\n};\n\nlet exchangingKeypair = null;\n\nexport const generateDeviceId = () => dispatch => {\n  const deviceId = uuidv4();\n  dispatch({\n    type: ACTIONS.SET_DEVICE_ID,\n    data: deviceId\n  });\n  return deviceId;\n};\n\nexport const addUserKeyPair = ({ hostId, keyPair }) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_USER_KEY_PAIR,\n    data: { hostId, keyPair }\n  });\n};\n\nexport const addHostKey = ({ hostId, publicKey }) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_HOST_KEY,\n    data: {\n      hostId,\n      publicKey\n    }\n  });\n};\n\nconst getDeviceId = () => (dispatch, getState) => {\n  const { deviceId } = getState().node;\n\n  if (!deviceId) {\n    const newDeviceId = dispatch(generateDeviceId());\n    return newDeviceId;\n  }\n\n  return deviceId;\n};\n\nexport const exchangeKeyPair = () => async dispatch => {\n  try {\n    const deviceId = dispatch(getDeviceId());\n\n    const keyPair = generateKeyPair();\n    const { data } = await Http.post(`/api/encryption/exchange`, {\n      publicKey: keyPair.publicKeyBase64,\n      deviceId\n    });\n\n    dispatch(\n      addUserKeyPair({\n        hostId: data.hostId,\n        keyPair\n      })\n    );\n\n    dispatch(\n      addHostKey({\n        hostId: data.hostId,\n        publicKey: data.APIPublicKey\n      })\n    );\n\n    dispatch(setHostId(data.hostId));\n\n    return {\n      user: keyPair,\n      host: data\n    };\n  } catch (err) {\n    console.error(\"[ENCRYPTION] Key Exchange Error:\", err);\n    throw err;\n  }\n};\n\nexport const throttledExchangeKeyPair = () => async dispatch => {\n  try {\n    if (!exchangingKeypair) {\n      exchangingKeypair = dispatch(exchangeKeyPair());\n    }\n\n    const result = await exchangingKeypair;\n\n    // eslint-disable-next-line require-atomic-updates\n    exchangingKeypair = null;\n\n    return result;\n  } catch (err) {\n    console.error(err);\n    exchangingKeypair = null;\n    throw err;\n  }\n};\n","export const ACTIONS = {\n  SET_DRAWER_OPEN: \"drawer/open\"\n};\n\nexport const openDrawer = () => async dispatch => {\n  dispatch({\n    type: ACTIONS.SET_DRAWER_OPEN,\n    data: true\n  });\n};\n\nexport const closeDrawer = () => async dispatch => {\n  dispatch({\n    type: ACTIONS.SET_DRAWER_OPEN,\n    data: false\n  });\n};\n","import Http from \"../utils/Http\";\n\nexport const ACTIONS = {\n  RESET_FEES: \"fees/reset\",\n  LOAD_FEE_RATES: \"fees/feeRates/load\",\n  SET_SOURCE: \"fees/source/set\",\n  SET_RATE: \"fees/rate/set\"\n};\n\nexport const loadFeeRates = () => async (dispatch, getState) => {\n  const { source } = getState().fees;\n  const { data } = await Http.get(source);\n\n  dispatch({\n    type: ACTIONS.LOAD_FEE_RATES,\n    data\n  });\n\n  return data;\n};\n\nexport const setSource = source => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_SOURCE,\n    data: source\n  });\n\n  return source;\n};\n\nexport const setRate = rate => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_RATE,\n    data: rate\n  });\n\n  return rate;\n};\n","export const GUN_PROPS = [\"_\", \"#\"];\n","export const initialMessagePrefix = \"$$__SHOCKWALLET__INITIAL__MESSAGE\";\n\nexport const invoiceMessagePrefix = \"$$__SHOCKWALLET__INVOICE__\";\n\nexport const userMessagePrefix = \"$$__SHOCKWALLET__USER__\";\n\nexport const capitalizeText = text =>\n  text\n    .split(\" \")\n    .map(\n      word => `${word.slice(0, 1).toUpperCase()}${word.slice(1).toLowerCase()}`\n    )\n    .join(\" \");\n\nexport const processDisplayName = (publicKey = \"\", displayName = \"\") => {\n  if (displayName) {\n    return displayName;\n  }\n\n  const suffix = publicKey.slice(-8);\n\n  return `Anon${suffix}`;\n};\n"],"sourceRoot":""}