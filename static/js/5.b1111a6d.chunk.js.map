{"version":3,"sources":["common/Post/components/Video/index.js","common/Post/components/Image/index.js","images/share.svg","common/Post/index.js"],"names":["Video","id","item","index","postId","tipValue","tipCounter","hideRibbon","width","contentURL","decodeURIComponent","magnetURI","replace","videoStyle","className","style","cursor","data-torrent","data-file-key","controls","data-played","src","TipRibbon","Image","useState","zoomed","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","useCallback","value","clearTimeout","timer","setTimeout","mainImageStyle","opacity","Controlled","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","alt","onLoad","display","Post","timestamp","avatar","publicKey","openTipModal","openUnlockModal","contentItems","username","openDeleteModal","undefined","openShareModal","_","unlockedContent","Store","content","useEmblaCarousel","slidesToScroll","align","carouselRef","carouselAPI","sliderLength","setSliderLength","activeSlide","setActiveSlide","isPrivate","setIsPrivate","selfPublicKey","liveStatus","setLiveStatus","isOwn","isOnlineNode","useEffect","values","Object","videoContent","find","type","streamContent","status","getMediaContent","entries","filter","forEach","k","e","path","parseContent","key","text","finalItem","cached","Stream","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","updateActiveSlide","selectedScrollSnap","on","scrollSnapList","length","window","addEventListener","removeEventListener","off","tipPost","targetType","postID","unlockPost","deletePost","shared","sharePost","Tooltip","rebuild","console","log","to","borderWidth","borderStyle","borderColor","backgroundImage","DateTime","fromMillis","toRelative","onClick","map","Array","from","classNames","scrollTo","ref","data-tip","ShareIcon","color","marginLeft"],"mappings":"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","file":"static/js/5.b1111a6d.chunk.js","sourcesContent":["import React from \"react\";\nimport TipRibbon from \"../TipRibbon\";\nimport \"./css/index.scoped.css\";\n\nconst Video = ({\n  id,\n  item,\n  index,\n  postId,\n  tipValue,\n  tipCounter,\n  hideRibbon,\n  width\n}) => {\n  const contentURL = decodeURIComponent(\n    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n  );\n  const videoStyle = {};\n  if (width) {\n    videoStyle.width = width;\n  }\n  return (\n    <div className=\"media-container\">\n      <div\n        className=\"video-container\"\n        style={{\n          cursor: \"pointer\"\n        }}\n      >\n        <video\n          style={videoStyle}\n          className={`torrent-video torrent-video-${postId}-${id}`}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          controls\n          data-played=\"false\"\n          src={contentURL}\n        />\n        {!hideRibbon && (\n          <TipRibbon tipCounter={tipCounter} tipValue={tipValue} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { useState, useCallback } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"../TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"./css/index.scoped.css\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({\n  id,\n  item,\n  index,\n  postId,\n  tipValue,\n  tipCounter,\n  hideRibbon,\n  width\n}) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [\n      animationTimer,\n      zoomLoaded,\n      setZoomed,\n      setZoomLoaded,\n      setPreviewVisible,\n      setAnimationTimer\n    ]\n  );\n\n  const contentURL = decodeURIComponent(\n    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n  );\n  const mainImageStyle = { opacity: previewVisible ? 1 : 0 };\n  if (width) {\n    mainImageStyle.width = width;\n  }\n\n  return (\n    <div className=\"media-container\">\n      <ControlledZoom\n        isZoomed={zoomed}\n        onZoomChange={handleZoomChange}\n        overlayBgColorStart=\"#16191c00\"\n        overlayBgColorEnd=\"#16191c\"\n      >\n        <img\n          className={`image torrent-img torrent-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          style={mainImageStyle}\n          src={contentURL}\n        />\n        <img\n          className={`image enlarged-img enlarged-img-${postId}-${id}`}\n          alt=\"Post Media\"\n          data-file-key={index}\n          onLoad={() => {\n            setZoomLoaded(true);\n          }}\n          style={{\n            opacity: zoomed ? 1 : 0,\n            display: zoomed ? \"block\" : \"none\"\n          }}\n          src={contentURL}\n        />\n        {!hideRibbon && (\n          <TipRibbon\n            tipCounter={tipCounter}\n            tipValue={tipValue}\n            zoomed={zoomed}\n          />\n        )}\n      </ControlledZoom>\n    </div>\n  );\n};\n\nexport default Image;\n","export default __webpack_public_path__ + \"static/media/share.8ed36b2d.svg\";","// @ts-check\nimport { useEffect, useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport Tooltip from \"react-tooltip\";\nimport classNames from \"classnames\";\nimport { DateTime } from \"luxon\";\n\nimport * as Store from \"../../store\";\nimport * as Utils from \"../../utils\";\n\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport \"./css/index.scoped.css\";\n\nimport ShareIcon from \"../../images/share.svg\"\n\nconst Post = ({\n  id,\n  timestamp,\n  avatar,\n  tipCounter,\n  tipValue,\n  publicKey,\n  openTipModal,\n  openUnlockModal,\n  contentItems = {},\n  username,\n  openDeleteModal = undefined,\n  openShareModal = (_)=>{},\n}) => {\n  const unlockedContent = Store.useSelector(\n    ({ content }) => content.unlockedContent\n  );\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\"\n  });\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [isPrivate, setIsPrivate] = useState(false);\n\n  const selfPublicKey = Store.useSelector(Store.selectSelfPublicKey);\n  const [liveStatus,setLiveStatus] = useState('')\n  const isOwn = selfPublicKey === publicKey;\n\n  const isOnlineNode = /*Utils.isOnline(\n    Store.useSelector(Store.selectUser(publicKey)).lastSeenApp\n  );*/ true;\n\n  //effect for liveStatus\n  useEffect(() =>{\n    const values = Object.values(contentItems)\n    const videoContent = values.find(item => item.type === 'video/embedded' && item.liveStatus === 'wasLive')\n    const streamContent = values.find(item => item.type === 'stream/embedded' && item.liveStatus === 'live')\n    let status = ''\n    if(videoContent){\n      status = videoContent.liveStatus\n    }\n    if(streamContent){\n      status = streamContent.liveStatus\n    }\n    if(status){\n      setLiveStatus(status)\n    }\n  },[contentItems,setLiveStatus])\n\n  const getMediaContent = useCallback(() => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  }, [contentItems]);\n\n  const getTextContent = () => {\n    return Object.entries(contentItems).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  useEffect(() => {\n    getMediaContent().forEach(([k, e]) => {\n      const path = `${publicKey}>posts>${k}`;\n      if (e.isPrivate && !unlockedContent[path]) {\n        setIsPrivate(true);\n      }\n    });\n  }, [contentItems, getMediaContent, publicKey, unlockedContent]);\n\n  const parseContent = ([key, item], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n    const finalItem = item;\n    if (item.isPrivate) {\n      const path = `${publicKey}>posts>${id}`;\n      const cached = unlockedContent[path];\n      if (cached) {\n        finalItem.magnetURI = cached;\n      } else {\n        return (\n          <div key={key}>\n            <i  className=\"fas fa-lock fa-10x\"></i>\n          </div>\n        );\n      }\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={finalItem}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          id={key}\n          item={finalItem}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n    if (item.type === \"stream/embedded\") {\n      return (\n        <Stream\n          id={key}\n          item={finalItem}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  // useEffect(() => {\n  //   attachMedia();\n  // }, [contentItems.length]);\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openTipModal({\n      targetType: \"post\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openTipModal, publicKey]);\n\n  const unlockPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openUnlockModal({\n      targetType: \"unlock\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openUnlockModal, publicKey]);\n\n  const deletePost = useCallback(() => {\n    openDeleteModal({ id, shared: false });\n  }, [id, openDeleteModal]);\n\n  const sharePost = useCallback(()=>{  \n    openShareModal({\n      targetType: \"share\",\n      postID: id,\n      publicKey\n    })\n  },[publicKey,id,openShareModal])\n\n  useEffect(() => {\n    try {\n      Tooltip.rebuild();\n    } catch (e) {\n      console.log(`Error inside <Post />: `, e);\n    }\n  }, []);\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <Link\n            className=\"av\"\n            to={isOwn ? `/profile` : `/otherUser/${publicKey}`}\n            style={{\n              borderWidth: isOnlineNode && !isOwn ? 2 : undefined,\n              borderStyle: isOnlineNode && !isOwn ? \"solid\" : undefined,\n              borderColor: isOnlineNode && !isOwn ? \"#39B54A\" : undefined,\n              backgroundImage: `url(${avatar})`\n            }}\n          />\n          <div className=\"details\">\n            <div className=\"username\">\n              <Link to={`/otherUser/${publicKey}`}>{username}</Link>\n              {liveStatus && <p className=\"liveStatus\">\n                {liveStatus} \n                <i className={`fas fa-circle liveStatusIcon ${liveStatus === 'live' ? \"liveIcon\" : \"\"}`}></i>\n                </p>\n              }\n            </div>\n            <p>\n              {timestamp && typeof timestamp === \"number\"\n                ? DateTime.fromMillis(timestamp).toRelative()\n                : \"Loading...\"}\n            </p>\n          </div>\n        </div>\n        {openDeleteModal && (\n          <i className=\"fas fa-trash\" onClick={deletePost}></i>\n        )}\n      </div>\n\n      <div className=\"content\">\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    // TODO: Get the actual ID here. However posts can't be\n                    // edited so index is stable.\n                    key={key}\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div></div>\n        <div\n          className=\"icon-tip-btn\"\n          data-tip={isPrivate ? \"Unlock this post\" : \"Tip this post\"}\n          onClick={isPrivate ? unlockPost : tipPost}\n        >\n          <div className=\"tip-icon icon-thin-feed\"></div>\n        </div>\n        {openShareModal && <div\n          className=\"icon-tip-btn\"\n          data-tip={\"share\"}\n          onClick={sharePost}\n          >\n            <img src={ShareIcon} style={{color:\"#4285b9\",marginLeft:\"auto\"}}/>\n        </div>}\n        {!openShareModal && <div></div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}