{"version":3,"sources":["common/Post/components/Image/index.js","common/Post/components/Video/index.js","images/share.svg","common/Post/index.tsx"],"names":["Image","id","item","index","postId","tipValue","tipCounter","hideRibbon","width","disableZoom","style","useState","zoomed","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","useCallback","value","clearTimeout","timer","setTimeout","contentURL","decodeURIComponent","magnetURI","replace","mainImageStyle","opacity","imgNode","className","alt","data-torrent","data-file-key","src","onLoad","display","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","memo","Video","videoRef","useRef","playing","setPlaying","observe","useInView","trackVisibility","delay","onEnter","current","play","onLeave","pause","togglePlayingStatus","updatedPlaying","console","log","videoHeight","useMemo","CSS","supports","aspectRatio","height","onPause","readyState","ref","classNames","onClick","data-played","controls","muted","TipRibbon","Post","publicKey","openTipModal","openUnlockModal","openDeleteModal","undefined","openShareModal","_","dispatch","Store","unlockedContent","content","authenticated","auth","useEmblaCarousel","slidesToScroll","align","carouselRef","carouselAPI","author","post","React","tips","Object","values","length","sum","sliderLength","setSliderLength","activeSlide","setActiveSlide","isPrivate","setIsPrivate","mediaAttached","setMediaAttached","mediaDetached","setMediaDetached","isOnlineNode","useEffect","subPostContent","subPostTips","liveStatus","stream","contentItems","find","type","viewersCounter","getMediaContent","entries","filter","forEach","k","e","path","parseContent","key","text","finalMagnetURI","cached","Common","playbackMagnet","Stream","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","updateActiveSlide","selectedScrollSnap","on","scrollSnapList","window","addEventListener","removeEventListener","off","tipPost","targetType","postID","unlockPost","deletePost","shared","sharePost","url","location","host","navigator","share","displayName","clipboard","writeText","Tooltip","rebuild","useLayoutEffect","attachMedia","map","detachTorrent","ShockAvatar","Pad","amt","insideRow","to","live","waiting","wasLive","DateTime","fromMillis","date","toRelative","getTextContent","Array","from","scrollTo","data-tip","ShareIcon","color","marginLeft"],"mappings":"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","file":"static/js/34.1c175d64.chunk.js","sourcesContent":["import React, { memo, useState, useCallback } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"../TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"./css/index.scoped.css\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({\n  id = \"\",\n  item,\n  index = 0,\n  postId = \"\",\n  tipValue = 0,\n  tipCounter = 0,\n  hideRibbon = false,\n  width = null,\n  disableZoom = false,\n  style = /** @type {import('react').CSSProperties} */ ({})\n}) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [\n      animationTimer,\n      zoomLoaded,\n      setZoomed,\n      setZoomLoaded,\n      setPreviewVisible,\n      setAnimationTimer\n    ]\n  );\n\n  const contentURL = decodeURIComponent(\n    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n  );\n  const mainImageStyle = { ...style, opacity: previewVisible ? 1 : 0 };\n  if (width) {\n    mainImageStyle.width = width;\n  }\n\n  const imgNode = (\n    <>\n      <img\n        className={`image torrent-img torrent-img-${postId}-${id}`}\n        alt=\"Post Media\"\n        data-torrent={item.magnetURI}\n        data-file-key={index}\n        style={mainImageStyle}\n        src={contentURL}\n      />\n      <img\n        className={`image enlarged-img enlarged-img-${postId}-${id}`}\n        alt=\"Post Media\"\n        data-file-key={index}\n        onLoad={() => {\n          setZoomLoaded(true);\n        }}\n        style={{\n          opacity: zoomed ? 1 : 0,\n          display: zoomed ? \"block\" : \"none\"\n        }}\n        src={contentURL}\n      />\n      {!hideRibbon && (\n        <TipRibbon\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          zoomed={zoomed}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <div className=\"media-container\">\n      {disableZoom ? (\n        imgNode\n      ) : (\n        <ControlledZoom\n          isZoomed={zoomed}\n          onZoomChange={handleZoomChange}\n          overlayBgColorStart=\"#16191c00\"\n          overlayBgColorEnd=\"#16191c\"\n        >\n          {imgNode}\n        </ControlledZoom>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Image);\n","import classNames from \"classnames\";\nimport { memo, useCallback, useMemo, useRef, useState } from \"react\";\nimport useInView from \"react-cool-inview\";\nimport TipRibbon from \"../TipRibbon\";\nimport \"./css/index.scoped.css\";\n\nconst Video = ({\n  item,\n  index = 0,\n  tipValue = 0,\n  tipCounter = 0,\n  hideRibbon = false\n}) => {\n  const videoRef = useRef(null);\n  const [playing, setPlaying] = useState(false);\n  const { observe } = useInView({\n    trackVisibility: false,\n    delay: 100,\n    onEnter: () => {\n      if (videoRef.current) {\n        setPlaying(true);\n        videoRef.current.play();\n      }\n    },\n    onLeave: () => {\n      if (!videoRef.current) {\n        return;\n      }\n\n      setPlaying(false);\n      videoRef.current.pause();\n    }\n  });\n\n  const togglePlayingStatus = useCallback(() => {\n    const updatedPlaying = !playing;\n    setPlaying(updatedPlaying);\n    if (videoRef.current) {\n      if (!updatedPlaying) {\n        videoRef.current.pause();\n        return;\n      }\n\n      console.log(\"Playing video\", updatedPlaying);\n      videoRef.current.play();\n    }\n  }, [playing]);\n\n  const videoHeight = useMemo(() => {\n    if (CSS.supports(\"aspect-ratio: 16 / 9\")) {\n      return {\n        aspectRatio: \"16 / 9\"\n      };\n    }\n\n    return {\n      height: 400\n    };\n  }, []);\n\n  const onPause = useCallback(() => {\n    if (videoRef.current?.readyState === 4) {\n      setPlaying(false);\n    }\n  }, [videoRef]);\n\n  return (\n    <div className=\"media-container\" ref={observe}>\n      <div className=\"video-container\" style={videoHeight}>\n        <div\n          className={classNames({\n            \"thumbnail-container\": true,\n            \"video-hidden\": playing\n          })}\n          onClick={togglePlayingStatus}\n        >\n          <div className=\"play-btn\">\n            <i className=\"fas fa-play\" />\n          </div>\n          <img\n            className=\"video-thumbnail hidden\"\n            data-torrent={item.magnetURI}\n            data-file-key={index}\n            alt=\"Video thumbnail\"\n          />\n          <video\n            className=\"dynamic-thumbnail hidden\"\n            data-torrent={item.magnetURI}\n            data-file-key={index}\n            data-played=\"false\"\n            controls={false}\n            muted\n          />\n        </div>\n        <video\n          className={classNames({\n            \"torrent-video video-js vjs-default-skin\": true,\n            \"video-hidden\": !playing\n          })}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          data-played=\"false\"\n          controls\n          ref={videoRef}\n          muted\n          onPause={onPause}\n        />\n        {!hideRibbon && (\n          <TipRibbon tipCounter={tipCounter} tipValue={tipValue} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Video);\n","export default __webpack_public_path__ + \"static/media/share.8ed36b2d.svg\";","import React, {\n  memo,\n  useEffect,\n  useState,\n  useCallback,\n  useLayoutEffect\n} from \"react\";\nimport * as Common from \"shock-common\";\nimport { Link } from \"react-router-dom\";\nimport useInView from \"react-cool-inview\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport Tooltip from \"react-tooltip\";\nimport classNames from \"classnames\";\nimport sum from \"lodash/sum\";\nimport { DateTime } from \"luxon\";\n\nimport * as Store from \"../../store\";\nimport { attachMedia, detachTorrent } from \"../../utils/Torrents\";\nimport { subPostContent, subPostTips } from \"../../actions/FeedActions\";\n\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport ShockAvatar from \"../ShockAvatar\";\nimport Pad from \"../Pad\";\n\nimport ShareIcon from \"../../images/share.svg\";\nimport \"./css/index.scoped.css\";\n\nconst Post = ({\n  id,\n  publicKey,\n  openTipModal,\n  openUnlockModal,\n  openDeleteModal = undefined,\n  openShareModal = _ => {}\n}) => {\n  const dispatch = Store.useDispatch();\n  const unlockedContent = Store.useSelector(\n    ({ content }) => content.unlockedContent\n  );\n  const authenticated = Store.useSelector(({ auth }) => auth.authenticated);\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\"\n  });\n  const author = Store.useSelector(Store.selectUser(publicKey));\n  const post = Store.useSelector(Store.selectSinglePost(publicKey, id));\n  const [tipCounter, tipValue] = React.useMemo(() => {\n    const tips = Object.values(\n      post.tips ||\n        {} /* cached data from previous app version won't have the tips object */\n    );\n\n    return [tips.length, sum(tips)];\n  }, [post]);\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [isPrivate, setIsPrivate] = useState(false);\n  // Track Enter/Leave only once\n  const [mediaAttached, setMediaAttached] = useState(false);\n  const [mediaDetached, setMediaDetached] = useState(false);\n  const { observe } = useInView({\n    trackVisibility: false,\n    delay: 100,\n    onEnter: () => {\n      setMediaAttached(true);\n    },\n    onLeave: () => {\n      setMediaDetached(true);\n    }\n  });\n\n  const isOnlineNode = /*Utils.isOnline(\n    Store.useSelector(Store.selectUser(publicKey)).lastSeenApp\n  );*/ true;\n\n  useEffect(() => {\n    const subscription = dispatch(subPostContent(publicKey, id));\n    return subscription;\n  }, [dispatch, id, publicKey]);\n\n  useEffect(() => {\n    const subscription = dispatch(subPostTips(publicKey, id));\n    return subscription;\n  }, [dispatch, id, publicKey]);\n\n  const liveStatus = React.useMemo<Common.LiveStatus | null>(() => {\n    const stream = Object.values(post.contentItems ?? {}).find(\n      item => item.type === \"stream/embedded\"\n    ) as Common.EmbeddedStream;\n\n    if (stream) {\n      return stream.liveStatus;\n    }\n\n    return null;\n  }, [post.contentItems]);\n\n  const viewersCounter = React.useMemo<number | null>(() => {\n    const stream = Object.values(post.contentItems ?? {}).find(\n      item => item.type === \"stream/embedded\"\n    ) as Common.EmbeddedStream;\n\n    if (stream && stream.liveStatus === \"live\") {\n      return stream.viewersCounter;\n    }\n\n    return null;\n  }, [post.contentItems]);\n\n  const getMediaContent = useCallback(() => {\n    return Object.entries(post.contentItems ?? {}).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  }, [post.contentItems]);\n\n  const getTextContent = () => {\n    return Object.entries(post.contentItems ?? {}).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  useEffect(() => {\n    getMediaContent().forEach(([k, e]) => {\n      const path = `${publicKey}>posts>${k}`;\n      // @ts-expect-error\n      if (e.isPrivate && !unlockedContent[path]) {\n        setIsPrivate(true);\n      }\n    });\n  }, [getMediaContent, publicKey, unlockedContent]);\n\n  const parseContent = ([key, item]: [string, Common.ContentItem], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n\n    let finalMagnetURI = \"\";\n    if (item.isPrivate) {\n      const path = `${publicKey}>posts>${id}`;\n      const cached = unlockedContent[path];\n      if (cached) {\n        finalMagnetURI = cached;\n      } else {\n        return (\n          <div key={key}>\n            <i className=\"fas fa-lock fa-10x\"></i>\n          </div>\n        );\n      }\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={{\n            ...item,\n            magnetURI: finalMagnetURI || item.magnetURI\n          }}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          item={{\n            ...item,\n            magnetURI: finalMagnetURI || item.magnetURI\n          }}\n          index={index}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n    if (Common.isEmbeddedStream(item)) {\n      if (item.playbackMagnet) {\n        return (\n          <Video\n            item={{\n              ...item,\n              magnetURI: item.playbackMagnet\n            }}\n            index={index}\n            tipCounter={tipCounter}\n            tipValue={tipValue}\n            key={`${id}-${index}`}\n          />\n        );\n      }\n      return (\n        <Stream\n          id={key}\n          item={{\n            ...item,\n            magnetURI: finalMagnetURI || item.magnetURI\n          }}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openTipModal({\n      targetType: \"post\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openTipModal, publicKey]);\n\n  const unlockPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openUnlockModal({\n      targetType: \"unlock\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openUnlockModal, publicKey]);\n\n  const deletePost = useCallback(() => {\n    openDeleteModal({ id, shared: false });\n  }, [id, openDeleteModal]);\n\n  const sharePost = useCallback(() => {\n    if (!authenticated) {\n      const url = `https://${window.location.host}/${publicKey}/post/${id}`;\n\n      if (navigator.share) {\n        navigator.share({\n          text: `Check out ${author.displayName}'s post on Lightning.Page!`,\n          url\n        });\n        return;\n      }\n\n      navigator.clipboard.writeText(url);\n      return;\n    }\n\n    openShareModal({\n      targetType: \"share\",\n      postID: id,\n      publicKey\n    });\n  }, [authenticated, openShareModal, id, publicKey, author.displayName]);\n\n  useEffect(() => {\n    try {\n      Tooltip.rebuild();\n    } catch (e) {\n      console.log(`Error inside <Post />: `, e);\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    if (mediaAttached) {\n      attachMedia([post], false);\n    }\n\n    if (mediaDetached) {\n      Object.entries(post.contentItems).map(([key, item]) => {\n        if (\"magnetURI\" in item) {\n          detachTorrent({\n            magnetURI: item.magnetURI\n          });\n        }\n      });\n    }\n  }, [mediaAttached, mediaDetached, post]);\n\n  const readableLiveStatus: Record<Common.LiveStatus, string> = {\n    live: \"Is Live\",\n    waiting: \"Waiting\",\n    wasLive: \"Was Live\"\n  };\n\n  return (\n    <div className=\"post\" ref={observe}>\n      <div className=\"head\">\n        <div className=\"user\">\n          <ShockAvatar height={50} publicKey={publicKey} />\n\n          <Pad amt={10} insideRow />\n\n          <div className=\"details\">\n            <div className=\"username\">\n              <Link to={`/otherUser/${publicKey}`}>{author.displayName}</Link>\n              {liveStatus && (\n                <p className=\"liveStatus\">\n                  {readableLiveStatus[liveStatus]}\n                  <i\n                    className={`fas fa-circle liveStatusIcon ${\n                      liveStatus === \"live\" ? \"liveIcon\" : \"\"\n                    }`}\n                  ></i>\n                  {liveStatus === \"live\" && (\n                    <span> | {viewersCounter} watching</span>\n                  )}\n                </p>\n              )}\n            </div>\n            <p>{DateTime.fromMillis(post.date).toRelative()}</p>\n          </div>\n        </div>\n        {openDeleteModal && (\n          <i className=\"fas fa-trash trash-icon\" onClick={deletePost}></i>\n        )}\n      </div>\n\n      <div className=\"content\">\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    // TODO: Get the actual ID here. However posts can't be\n                    // edited so index is stable.\n                    key={key}\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div></div>\n        <div\n          className=\"icon-tip-btn\"\n          data-tip={isPrivate ? \"Unlock this post\" : \"Tip this post\"}\n          onClick={isPrivate ? unlockPost : tipPost}\n        >\n          <div className=\"tip-icon icon-thin-feed\"></div>\n        </div>\n        {openShareModal && (\n          <div className=\"icon-tip-btn\" data-tip=\"share\" onClick={sharePost}>\n            <img\n              alt=\"Share this post\"\n              src={ShareIcon}\n              style={{ color: \"#4285b9\", marginLeft: \"auto\" }}\n            />\n          </div>\n        )}\n        {!openShareModal && <div></div>}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Post);\n"],"sourceRoot":""}