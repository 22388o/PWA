{"version":3,"sources":["utils/Cache.js","utils/Promise.js","utils/Torrents.js"],"names":["getCachedFile","fileName","a","FileCache","_init","Promise","resolve","reject","init","then","console","log","persist","status","persistent","load","cachedFile","createURL","warn","renderCachedFile","fileURL","selector","elements","document","querySelectorAll","length","forEach","element","src","muted","autoplay","saveFile","buffer","save","runSerial","tasks","result","task","supportedFileTypes","formats","options","_getFileType","file","extension","name","split","slice","supportedFileType","Object","entries","filter","includes","fileType","webTorrentClient","WebTorrent","attachMedia","posts","torrentMode","allowDuplicates","torrentTasks","map","post","contentItems","id","item","type","key","get","magnetURI","add","torrent","files","target","destroy","torrentElement","contentURL","decodeURIComponent","replace","format","toLowerCase","endsWith","compatibleURL","elementSrc","getAttribute","setAttribute","renderTo","on","getBlob","err","blob","querySelector","dataset","played","reduce","torrents"],"mappings":"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","file":"static/js/7.e2109570.chunk.js","sourcesContent":["import FileCache from \"browser-file-storage\";\n\nexport const DB_NAME = \"ShockWalletStore\";\n\nexport const init = () =>\n  new Promise((resolve, reject) => {\n    FileCache.init(DB_NAME)\n      .then(() => {\n        console.log(\"File cache initialized!\");\n        return FileCache.persist();\n      })\n      .then(status => {\n        if (status.persistent) {\n          resolve(status);\n        } else {\n          reject(status);\n        }\n      });\n  });\n\nexport const getCachedFile = async fileName => {\n  try {\n    if (!FileCache._init) {\n      await init();\n    }\n\n    const cachedFile = await FileCache.load(fileName);\n    return cachedFile.createURL();\n  } catch (err) {\n    console.warn(err);\n    return false;\n  }\n};\n\nexport const renderCachedFile = (fileURL, selector) => {\n  const elements = document.querySelectorAll(selector);\n  if (elements && elements.length) {\n    elements.forEach(element => {\n      if (!element.src) {\n        element.src = fileURL;\n        element.muted = true;\n        element.autoplay = true;\n      }\n    });\n  }\n  return !!elements?.length;\n};\n\nexport const saveFile = (fileName, buffer) => {\n  return FileCache.save(fileName, buffer);\n};\n","export const runSerial = tasks => {\n  let result = Promise.resolve();\n  tasks.forEach(task => {\n    result = result.then(() => task());\n  });\n  return result;\n};\n","import WebTorrent from \"webtorrent\";\nimport { getCachedFile, renderCachedFile, saveFile } from \"./Cache\";\nimport { runSerial } from \"./Promise\";\n\nconst supportedFileTypes = {\n  \"video/embedded\": {\n    formats: [\"mp4\", \"webm\"],\n    element: \"video\",\n    options: {\n      autoplay: true,\n      muted: true\n    }\n  },\n  \"image/embedded\": {\n    formats: [\"jpg\", \"png\", \"webp\", \"jpeg\"],\n    element: \"img\",\n    options: {}\n  }\n};\n\nconst _getFileType = file => {\n  const extension = file.name?.split(\".\")?.slice(-1)[0];\n  const supportedFileType = Object.entries(\n    supportedFileTypes\n  ).filter(([type, options]) => options.formats.includes(extension))[0];\n\n  if (supportedFileType) {\n    const [name, fileType] = supportedFileType;\n    return {\n      name,\n      ...fileType\n    };\n  }\n\n  return null;\n};\n\nexport const webTorrentClient = new WebTorrent();\n\nexport const attachMedia = (\n  posts = [],\n  torrentMode = true,\n  allowDuplicates = false\n) => {\n  const torrentTasks = posts\n    .map(post => {\n      const { contentItems, id } = post;\n      return Object.entries(contentItems)\n        .filter(([key, item]) => supportedFileTypes[item.type])\n        .map(([key, item]) => () =>\n          new Promise(resolve => {\n            const torrentExists = webTorrentClient.get(item.magnetURI);\n\n            if (torrentExists && !allowDuplicates) {\n              resolve(true);\n              return;\n            }\n\n            webTorrentClient.add(item.magnetURI, async torrent => {\n              // Proceed to the next torrent in queue\n              resolve(true);\n\n              const files = torrent.files.filter(file => {\n                const extension = file.name?.split(\".\")?.slice(-1)[0];\n                const supportedFileType = Object.entries(\n                  supportedFileTypes\n                ).filter(([type, options]) =>\n                  options.formats.includes(extension)\n                )[0];\n                if (supportedFileType) {\n                  const [, fileType] = supportedFileType;\n                  const matched = fileType.formats.includes(extension);\n                  return matched;\n                }\n                return false;\n              });\n\n              files.map(async file => {\n                const fileType = _getFileType(file);\n\n                if (!fileType) {\n                  return;\n                }\n\n                const fileName = `${id}-${key}-${file.name}`;\n\n                const element = fileType.element;\n                const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n                const cachedFile = await getCachedFile(fileName);\n\n                if (cachedFile) {\n                  const torrent = webTorrentClient.get(item.magnetURI);\n\n                  if (torrent) {\n                    torrent.destroy();\n                  }\n\n                  renderCachedFile(cachedFile, target);\n                  return;\n                }\n\n                const torrentElements = document.querySelectorAll(target);\n                torrentElements.forEach(torrentElement => {\n                  const contentURL = decodeURIComponent(\n                    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n                  );\n                  const [compatibleURL] = fileType.formats.filter(format =>\n                    contentURL\n                      .toLowerCase()\n                      .endsWith(`.${format.toLowerCase()}`)\n                  );\n                  const elementSrc = torrentElement.getAttribute(\"src\");\n\n                  if ((torrentMode || !compatibleURL) && !elementSrc) {\n                    file.renderTo(torrentElement, fileType.options);\n                    return;\n                  }\n\n                  torrentElement.setAttribute(\"src\", contentURL);\n                });\n              });\n\n              torrent.on(\"done\", () => {\n                files.map(file => {\n                  const fileType = _getFileType(file);\n                  const fileName = `${id}-${key}-${file.name}`;\n                  const element = fileType.element;\n                  const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n\n                  file.getBlob(async (err, blob) => {\n                    if (err) {\n                      console.warn(err);\n                      return;\n                    }\n\n                    await saveFile(fileName, blob);\n                    const element = document.querySelector(target);\n                    if (\n                      element?.dataset.played === \"false\" &&\n                      !element?.getAttribute(\"src\")\n                    ) {\n                      const cachedFile = await getCachedFile(fileName);\n                      renderCachedFile(cachedFile, target);\n                    }\n                  });\n\n                  return file;\n                });\n              });\n            });\n          })\n        );\n    })\n    .reduce((torrents, contentItems) => [...torrents, ...contentItems], []);\n\n  runSerial(torrentTasks);\n};\n"],"sourceRoot":""}