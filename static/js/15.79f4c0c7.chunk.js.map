{"version":3,"sources":["common/Post/components/Image/index.js","common/Post/components/Video/index.js","images/share.svg","common/Post/index.tsx","utils/Cache.js","utils/Promise.js","utils/Torrents.js","common/Post/SharedPost.tsx"],"names":["Image","id","item","index","postId","tipValue","tipCounter","hideRibbon","width","disableZoom","style","useState","zoomed","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","useCallback","value","clearTimeout","timer","setTimeout","contentURL","decodeURIComponent","magnetURI","replace","mainImageStyle","opacity","imgNode","className","alt","data-torrent","data-file-key","src","onLoad","display","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","Video","videoStyle","cursor","controls","data-played","TipRibbon","Post","publicKey","openTipModal","openUnlockModal","openDeleteModal","undefined","openShareModal","_","dispatch","Store","unlockedContent","content","useEmblaCarousel","slidesToScroll","align","carouselRef","carouselAPI","author","post","React","useMemo","tips","Object","values","length","sum","sliderLength","setSliderLength","activeSlide","setActiveSlide","isPrivate","setIsPrivate","isOnlineNode","useEffect","subPostContent","subPostTips","liveStatus","stream","contentItems","find","type","viewersCounter","getMediaContent","entries","filter","forEach","k","e","path","parseContent","key","text","finalItem","cached","Common","playbackMagnet","Stream","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","updateActiveSlide","selectedScrollSnap","on","scrollSnapList","window","addEventListener","removeEventListener","off","tipPost","targetType","postID","unlockPost","deletePost","shared","sharePost","Tooltip","rebuild","console","log","ShockAvatar","height","Pad","amt","insideRow","to","displayName","live","waiting","wasLive","DateTime","fromMillis","date","toRelative","onClick","map","Array","from","classNames","scrollTo","ref","data-tip","ShareIcon","color","marginLeft","getCachedFile","fileName","a","FileCache","_init","Promise","resolve","reject","init","then","persist","status","persistent","load","cachedFile","createURL","warn","renderCachedFile","fileURL","selector","elements","document","querySelectorAll","element","muted","autoplay","saveFile","buffer","save","runSerial","tasks","result","task","supportedFileTypes","formats","options","_getFileType","file","extension","name","split","slice","supportedFileType","includes","fileType","webTorrentClient","WebTorrent","attachMedia","posts","torrentMode","allowDuplicates","torrentTasks","get","add","torrent","files","target","destroy","torrentElement","format","toLowerCase","endsWith","compatibleURL","elementSrc","getAttribute","setAttribute","renderTo","getBlob","err","blob","querySelector","dataset","played","reduce","torrents","SharedPost","sharerPublicKey","Utils","sharerProfile","sharedPost","originalPost","originalAuthor","loadPostMedia","subscribeUserProfile","subSinglePost","useLayoutEffect","shareDate"],"mappings":"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","file":"static/js/15.79f4c0c7.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"../TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"./css/index.scoped.css\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({\n  id = \"\",\n  item,\n  index = 0,\n  postId = \"\",\n  tipValue = 0,\n  tipCounter = 0,\n  hideRibbon = false,\n  width = null,\n  disableZoom = false,\n  style = /** @type {import('react').CSSProperties} */ ({})\n}) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [\n      animationTimer,\n      zoomLoaded,\n      setZoomed,\n      setZoomLoaded,\n      setPreviewVisible,\n      setAnimationTimer\n    ]\n  );\n\n  const contentURL = decodeURIComponent(\n    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n  );\n  const mainImageStyle = { ...style, opacity: previewVisible ? 1 : 0 };\n  if (width) {\n    mainImageStyle.width = width;\n  }\n\n  const imgNode = (\n    <>\n      <img\n        className={`image torrent-img torrent-img-${postId}-${id}`}\n        alt=\"Post Media\"\n        data-torrent={item.magnetURI}\n        data-file-key={index}\n        style={mainImageStyle}\n        src={contentURL}\n      />\n      <img\n        className={`image enlarged-img enlarged-img-${postId}-${id}`}\n        alt=\"Post Media\"\n        data-file-key={index}\n        onLoad={() => {\n          setZoomLoaded(true);\n        }}\n        style={{\n          opacity: zoomed ? 1 : 0,\n          display: zoomed ? \"block\" : \"none\"\n        }}\n        src={contentURL}\n      />\n      {!hideRibbon && (\n        <TipRibbon\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          zoomed={zoomed}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <div className=\"media-container\">\n      {disableZoom ? (\n        imgNode\n      ) : (\n        <ControlledZoom\n          isZoomed={zoomed}\n          onZoomChange={handleZoomChange}\n          overlayBgColorStart=\"#16191c00\"\n          overlayBgColorEnd=\"#16191c\"\n        >\n          {imgNode}\n        </ControlledZoom>\n      )}\n    </div>\n  );\n};\n\nexport default Image;\n","import TipRibbon from \"../TipRibbon\";\nimport \"./css/index.scoped.css\";\n\nconst Video = ({\n  id = \"\",\n  item,\n  index = 0,\n  postId = \"\",\n  tipValue = 0,\n  tipCounter = 0,\n  hideRibbon = false,\n  width = null\n}) => {\n  const contentURL = decodeURIComponent(\n    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n  );\n  const videoStyle = {};\n  if (width) {\n    videoStyle.width = width;\n  }\n  return (\n    <div className=\"media-container\">\n      <div\n        className=\"video-container\"\n        style={{\n          cursor: \"pointer\"\n        }}\n      >\n        <video\n          style={videoStyle}\n          className={`torrent-video torrent-video-${postId}-${id}`}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          controls\n          data-played=\"false\"\n          src={contentURL}\n        />\n        {!hideRibbon && (\n          <TipRibbon\n            tipCounter={tipCounter}\n            tipValue={tipValue}\n            zoomed={false}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","export default __webpack_public_path__ + \"static/media/share.8ed36b2d.svg\";","import React, { useEffect, useState, useCallback } from \"react\";\nimport * as Common from \"shock-common\";\nimport { Link } from \"react-router-dom\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport Tooltip from \"react-tooltip\";\nimport classNames from \"classnames\";\nimport sum from \"lodash/sum\";\nimport { DateTime } from \"luxon\";\n\nimport * as Store from \"../../store\";\nimport ShockAvatar from \"../ShockAvatar\";\nimport Pad from \"../Pad\";\nimport { subPostContent, subPostTips } from \"../../actions/FeedActions\";\n\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport \"./css/index.scoped.css\";\n\nimport ShareIcon from \"../../images/share.svg\";\n\nconst Post = ({\n  id,\n  publicKey,\n  openTipModal,\n  openUnlockModal,\n  openDeleteModal = undefined,\n  openShareModal = _ => {}\n}) => {\n  const dispatch = Store.useDispatch();\n  const unlockedContent = Store.useSelector(\n    ({ content }) => content.unlockedContent\n  );\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\"\n  });\n  const author = Store.useSelector(Store.selectUser(publicKey));\n  const post = Store.useSelector(Store.selectSinglePost(publicKey, id));\n  const [tipCounter, tipValue] = React.useMemo(() => {\n    const tips = Object.values(\n      post.tips ||\n        {} /* cached data from previous app version won't have the tips object */\n    );\n\n    return [tips.length, sum(tips)];\n  }, [post]);\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [isPrivate, setIsPrivate] = useState(false);\n\n  const isOnlineNode = /*Utils.isOnline(\n    Store.useSelector(Store.selectUser(publicKey)).lastSeenApp\n  );*/ true;\n\n  useEffect(() => dispatch(subPostContent(publicKey, id)), [\n    dispatch,\n    id,\n    publicKey\n  ]);\n\n  useEffect(() => dispatch(subPostTips(publicKey, id)), [\n    dispatch,\n    id,\n    publicKey\n  ]);\n\n  const liveStatus = React.useMemo<Common.LiveStatus | null>(() => {\n    const stream = Object.values(post.contentItems).find(\n      item => item.type === \"stream/embedded\"\n    ) as Common.EmbeddedStream;\n\n    if (stream) {\n      return stream.liveStatus;\n    }\n\n    return null;\n  }, [post.contentItems]);\n\n  const viewersCounter = React.useMemo<number | null>(() => {\n    const stream = Object.values(post.contentItems).find(\n      item => item.type === \"stream/embedded\"\n    ) as Common.EmbeddedStream;\n\n    if (stream && stream.liveStatus === \"live\") {\n      return stream.viewersCounter;\n    }\n\n    return null;\n  }, [post.contentItems]);\n\n  const getMediaContent = useCallback(() => {\n    return Object.entries(post.contentItems).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  }, [post.contentItems]);\n\n  const getTextContent = () => {\n    return Object.entries(post.contentItems).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  useEffect(() => {\n    getMediaContent().forEach(([k, e]) => {\n      const path = `${publicKey}>posts>${k}`;\n      // @ts-expect-error\n      if (e.isPrivate && !unlockedContent[path]) {\n        setIsPrivate(true);\n      }\n    });\n  }, [getMediaContent, publicKey, unlockedContent]);\n\n  const parseContent = ([key, item]: [string, Common.ContentItem], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n    const finalItem = item;\n    if (item.isPrivate) {\n      const path = `${publicKey}>posts>${id}`;\n      const cached = unlockedContent[path];\n      if (cached) {\n        finalItem.magnetURI = cached;\n      } else {\n        return (\n          <div key={key}>\n            <i className=\"fas fa-lock fa-10x\"></i>\n          </div>\n        );\n      }\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={finalItem}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          id={key}\n          item={finalItem}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n    if (Common.isEmbeddedStream(finalItem)) {\n      if (item.playbackMagnet) {\n        return (\n          <Video\n            id={key}\n            item={{\n              ...finalItem,\n              magnetURI: finalItem.playbackMagnet\n            }}\n            index={index}\n            postId={id}\n            tipCounter={tipCounter}\n            tipValue={tipValue}\n            key={`${id}-${index}`}\n            hideRibbon={undefined}\n            width={undefined}\n          />\n        );\n      }\n      return (\n        <Stream\n          id={key}\n          item={finalItem}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openTipModal({\n      targetType: \"post\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openTipModal, publicKey]);\n\n  const unlockPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openUnlockModal({\n      targetType: \"unlock\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openUnlockModal, publicKey]);\n\n  const deletePost = useCallback(() => {\n    openDeleteModal({ id, shared: false });\n  }, [id, openDeleteModal]);\n\n  const sharePost = useCallback(() => {\n    openShareModal({\n      targetType: \"share\",\n      postID: id,\n      publicKey\n    });\n  }, [publicKey, id, openShareModal]);\n\n  useEffect(() => {\n    try {\n      Tooltip.rebuild();\n    } catch (e) {\n      console.log(`Error inside <Post />: `, e);\n    }\n  }, []);\n\n  const readableLiveStatus: Record<Common.LiveStatus, string> = {\n    live: \"Is Live\",\n    waiting: \"Waiting\",\n    wasLive: \"Was Live\"\n  };\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <ShockAvatar height={50} publicKey={publicKey} />\n\n          <Pad amt={10} insideRow />\n\n          <div className=\"details\">\n            <div className=\"username\">\n              <Link to={`/otherUser/${publicKey}`}>{author.displayName}</Link>\n              {liveStatus && (\n                <p className=\"liveStatus\">\n                  {readableLiveStatus[liveStatus]}\n                  <i\n                    className={`fas fa-circle liveStatusIcon ${\n                      liveStatus === \"live\" ? \"liveIcon\" : \"\"\n                    }`}\n                  ></i>\n                  {liveStatus === \"live\" && (\n                    <span> | {viewersCounter} watching</span>\n                  )}\n                </p>\n              )}\n            </div>\n            <p>{DateTime.fromMillis(post.date).toRelative()}</p>\n          </div>\n        </div>\n        {openDeleteModal && (\n          <i className=\"fas fa-trash\" onClick={deletePost}></i>\n        )}\n      </div>\n\n      <div className=\"content\">\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    // TODO: Get the actual ID here. However posts can't be\n                    // edited so index is stable.\n                    key={key}\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div></div>\n        <div\n          className=\"icon-tip-btn\"\n          data-tip={isPrivate ? \"Unlock this post\" : \"Tip this post\"}\n          onClick={isPrivate ? unlockPost : tipPost}\n        >\n          <div className=\"tip-icon icon-thin-feed\"></div>\n        </div>\n        {openShareModal && (\n          <div className=\"icon-tip-btn\" data-tip={\"share\"} onClick={sharePost}>\n            <img\n              alt=\"Share this post\"\n              src={ShareIcon}\n              style={{ color: \"#4285b9\", marginLeft: \"auto\" }}\n            />\n          </div>\n        )}\n        {!openShareModal && <div></div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import FileCache from \"browser-file-storage\";\n\nexport const DB_NAME = \"ShockWalletStore\";\n\nexport const init = () =>\n  new Promise((resolve, reject) => {\n    FileCache.init(DB_NAME)\n      .then(() => {\n        console.log(\"File cache initialized!\");\n        return FileCache.persist();\n      })\n      .then(status => {\n        if (status.persistent) {\n          resolve(status);\n        } else {\n          reject(status);\n        }\n      });\n  });\n\nexport const getCachedFile = async fileName => {\n  try {\n    if (!FileCache._init) {\n      await init();\n    }\n\n    const cachedFile = await FileCache.load(fileName);\n    return cachedFile.createURL();\n  } catch (err) {\n    console.warn(err);\n    return false;\n  }\n};\n\nexport const renderCachedFile = (fileURL, selector) => {\n  const elements = document.querySelectorAll(selector);\n  if (elements && elements.length) {\n    elements.forEach(element => {\n      if (!element.src) {\n        element.src = fileURL;\n        element.muted = true;\n        element.autoplay = true;\n      }\n    });\n  }\n  return !!elements?.length;\n};\n\nexport const saveFile = (fileName, buffer) => {\n  return FileCache.save(fileName, buffer);\n};\n","export const runSerial = tasks => {\n  let result = Promise.resolve();\n  tasks.forEach(task => {\n    result = result.then(() => task());\n  });\n  return result;\n};\n","import WebTorrent from \"webtorrent\";\nimport { getCachedFile, renderCachedFile, saveFile } from \"./Cache\";\nimport { runSerial } from \"./Promise\";\n\nconst supportedFileTypes = {\n  \"video/embedded\": {\n    formats: [\"mp4\", \"webm\"],\n    element: \"video\",\n    options: {\n      autoplay: true,\n      muted: true\n    }\n  },\n  \"image/embedded\": {\n    formats: [\"jpg\", \"png\", \"webp\", \"jpeg\"],\n    element: \"img\",\n    options: {}\n  }\n};\n\nconst _getFileType = file => {\n  const extension = file.name?.split(\".\")?.slice(-1)[0];\n  const supportedFileType = Object.entries(\n    supportedFileTypes\n  ).filter(([type, options]) => options.formats.includes(extension))[0];\n\n  if (supportedFileType) {\n    const [name, fileType] = supportedFileType;\n    return {\n      name,\n      ...fileType\n    };\n  }\n\n  return null;\n};\n\nexport const webTorrentClient = new WebTorrent();\n\nexport const attachMedia = (\n  posts = [],\n  torrentMode = true,\n  allowDuplicates = false\n) => {\n  const torrentTasks = posts\n    .map(post => {\n      const { contentItems, id } = post;\n      return Object.entries(contentItems)\n        .filter(([key, item]) => supportedFileTypes[item.type])\n        .map(([key, item]) => () =>\n          new Promise(resolve => {\n            const torrentExists = webTorrentClient.get(item.magnetURI);\n\n            if (torrentExists && !allowDuplicates) {\n              resolve(true);\n              return;\n            }\n\n            webTorrentClient.add(item.magnetURI, async torrent => {\n              // Proceed to the next torrent in queue\n              resolve(true);\n\n              const files = torrent.files.filter(file => {\n                const extension = file.name?.split(\".\")?.slice(-1)[0];\n                const supportedFileType = Object.entries(\n                  supportedFileTypes\n                ).filter(([type, options]) =>\n                  options.formats.includes(extension)\n                )[0];\n                if (supportedFileType) {\n                  const [, fileType] = supportedFileType;\n                  const matched = fileType.formats.includes(extension);\n                  return matched;\n                }\n                return false;\n              });\n\n              files.map(async file => {\n                const fileType = _getFileType(file);\n\n                if (!fileType) {\n                  return;\n                }\n\n                const fileName = `${id}-${key}-${file.name}`;\n\n                const element = fileType.element;\n                const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n                const cachedFile = await getCachedFile(fileName);\n\n                if (cachedFile) {\n                  const torrent = webTorrentClient.get(item.magnetURI);\n\n                  if (torrent) {\n                    torrent.destroy();\n                  }\n\n                  renderCachedFile(cachedFile, target);\n                  return;\n                }\n\n                const torrentElements = document.querySelectorAll(target);\n                torrentElements.forEach(torrentElement => {\n                  const contentURL = decodeURIComponent(\n                    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n                  );\n                  const [compatibleURL] = fileType.formats.filter(format =>\n                    contentURL\n                      .toLowerCase()\n                      .endsWith(`.${format.toLowerCase()}`)\n                  );\n                  const elementSrc = torrentElement.getAttribute(\"src\");\n\n                  if ((torrentMode || !compatibleURL) && !elementSrc) {\n                    file.renderTo(torrentElement, fileType.options);\n                    return;\n                  }\n\n                  torrentElement.setAttribute(\"src\", contentURL);\n                });\n              });\n\n              torrent.on(\"done\", () => {\n                files.map(file => {\n                  const fileType = _getFileType(file);\n                  const fileName = `${id}-${key}-${file.name}`;\n                  const element = fileType.element;\n                  const target = `${element}[data-torrent=\"${item.magnetURI}\"]`;\n\n                  file.getBlob(async (err, blob) => {\n                    if (err) {\n                      console.warn(err);\n                      return;\n                    }\n\n                    await saveFile(fileName, blob);\n                    const element = document.querySelector(target);\n                    if (\n                      element?.dataset.played === \"false\" &&\n                      !element?.getAttribute(\"src\")\n                    ) {\n                      const cachedFile = await getCachedFile(fileName);\n                      renderCachedFile(cachedFile, target);\n                    }\n                  });\n\n                  return file;\n                });\n              });\n            });\n          })\n        );\n    })\n    .reduce((torrents, contentItems) => [...torrents, ...contentItems], []);\n\n  runSerial(torrentTasks);\n};\n","import React, { useCallback, useLayoutEffect } from \"react\";\nimport { DateTime } from \"luxon\";\nimport Tooltip from \"react-tooltip\";\n\nimport Post from \".\";\n\nimport * as Store from \"../../store\";\nimport * as Utils from \"../../utils\";\nimport Loader from \"../Loader\";\nimport ShockAvatar from \"../ShockAvatar\";\nimport Pad from \"../Pad\";\nimport { attachMedia } from \"../../utils/Torrents\";\nimport { subPostContent, subSinglePost } from \"../../actions/FeedActions\";\nimport { subscribeUserProfile } from \"../../actions/UserProfilesActions\";\nimport \"../Post/css/index.scoped.css\";\n\nexport interface SharedPostProps {\n  postID: string;\n  sharerPublicKey: string;\n  openTipModal?(tipData: any): void;\n  openUnlockModal?(unlockData: any): void;\n  openDeleteModal?(params: { id: string; shared: boolean }): void;\n  openShareModal?(shareData: any): void;\n}\n\nconst SharedPost = ({\n  postID,\n  sharerPublicKey,\n  openTipModal,\n  openUnlockModal,\n  openDeleteModal = Utils.EMPTY_FN,\n  openShareModal = Utils.EMPTY_FN\n}: SharedPostProps) => {\n  const dispatch = Store.useDispatch();\n\n  const sharerProfile = Store.useSelector(Store.selectUser(sharerPublicKey));\n  const sharedPost = Store.useSelector(\n    Store.selectSharedPost(sharerPublicKey, postID)\n  );\n  const originalPost = Store.useSelector(\n    Store.selectSinglePost(sharedPost.originalAuthor, postID)\n  );\n\n  const loadPostMedia = useCallback(async () => {\n    if (originalPost) {\n      attachMedia([originalPost], false);\n    }\n  }, [originalPost]);\n  const deletePost = useCallback(() => {\n    openDeleteModal({ id: originalPost.id, shared: true });\n  }, [originalPost, openDeleteModal]);\n\n  React.useEffect(\n    () => dispatch(subscribeUserProfile(sharedPost.originalAuthor)),\n    [dispatch, sharedPost.originalAuthor]\n  );\n\n  React.useEffect(() => dispatch(subscribeUserProfile(sharerPublicKey)), [\n    dispatch,\n    sharerPublicKey\n  ]);\n\n  React.useEffect(\n    () => dispatch(subSinglePost(sharedPost.originalAuthor, postID)),\n    [dispatch, postID, sharedPost.originalAuthor]\n  );\n\n  React.useEffect(\n    () => dispatch(subPostContent(sharedPost.originalAuthor, postID)),\n    [dispatch, postID, sharedPost.originalAuthor]\n  );\n\n  useLayoutEffect(() => {\n    Tooltip.rebuild();\n    loadPostMedia();\n  }, [loadPostMedia]);\n\n  return (\n    <div className=\"post shared-post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <ShockAvatar height={50} publicKey={sharerPublicKey} />\n\n          <Pad amt={10} insideRow />\n\n          <div className=\"details\">\n            <p>{sharerProfile?.displayName}</p>\n            <p>\n              {/* @ts-ignore */}\n              Shared {DateTime.fromMillis(sharedPost.shareDate).toRelative()}\n            </p>\n          </div>\n        </div>\n        {openDeleteModal && (\n          <i className=\"fas fa-trash\" onClick={deletePost}></i>\n        )}\n      </div>\n\n      <div className=\"shared-content\">\n        {originalPost ? (\n          <Post\n            id={originalPost.id}\n            publicKey={sharedPost.originalAuthor}\n            openTipModal={openTipModal}\n            openUnlockModal={openUnlockModal}\n            openShareModal={openShareModal}\n          />\n        ) : (\n          <Loader text=\"Loading Post...\" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SharedPost;\n"],"sourceRoot":""}