{"version":3,"sources":["common/DialogNav/index.js","utils/Platform.ts","common/QRCodeScanner/index.tsx","utils/validators.ts","pages/QRScanner/index.tsx"],"names":["DIALOG_NAV_MIN_HEIGHT_PX","CONTAINER_STYLE","minHeight","DialogNav","pageTitle","drawerVisible","onHeight","Utils","goBack","useCallback","window","history","back","divRefCb","el","getBoundingClientRect","height","e","console","log","className","ref","style","onClick","classNames","memo","isDesktop","navigator","userAgent","match","modeContents","wizard","title","target","description","invoice","QRCodeScanner","mode","onScan","onError","onClose","content","videoConstrain","facingMode","exact","constraints","video","btcAddress","lnInvoice","lnPubKey","extractInfo","data","cleanData","value","includes","split","removePrefix","amountSplit","amount","Math","floor","Number","address","toString","undefined","hasAmount","test","isBitcoinAddress","type","toLowerCase","isLightningPaymentRequest","request","isLightningPubKey","startsWith","isShockPubKey","pk","found","res","exec","findlnurl","lnurl","toUpperCase","QRScanner","useHistory","dispatch","useDispatch","useState","loading","setLoading","privateChannel","setPrivateChannel","payAmount","setPayAmount","withdrawAmount","setWithdrawAmount","hasMemo","setHasMemo","setMemo","LNURLdata","setLNURLdata","scanQR","setScanQR","push","onInputChange","name","checked","decodeLNURL","a","getParams","params","tag","p","alert","reason","message","decodeAll","result","info","ExtractInfo","JSON","stringify","closeQR","scanDone","text","confirmWithdrawReq","callback","k1","Http","post","expiry","payReq","completeUrl","payment_request","fetch","json","status","confirmChannelReq","uri","newK1","shockPubKey","samePeer","pub_key","fetchPeers","peers","find","publicKey","host","connectPeer","get","node","nodeId","identity_pubkey","priv","confirmPayReq","pr","toRender","useMemo","onChange","maxWithdrawable","placeholder","minSendable","maxSendable","scanErr","Loader","overlay","fullScreen"],"mappings":"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","file":"static/js/32.e6c721c7.chunk.js","sourcesContent":["// @ts-check\nimport { memo, useCallback } from \"react\";\nimport classNames from \"classnames\";\n/**\n * @typedef {import('react').RefCallback<HTMLElement>} DivRefCallback\n */\n\nimport * as Utils from \"../../utils\";\n\nimport \"./css/index.scoped.css\";\n\nexport const DIALOG_NAV_MIN_HEIGHT_PX = 73;\n/** @type {import('react').CSSProperties} */\nconst CONTAINER_STYLE = {\n  minHeight: DIALOG_NAV_MIN_HEIGHT_PX\n};\n\nconst DialogNav = ({\n  pageTitle,\n  drawerVisible = false,\n  onHeight = Utils.EMPTY_FN\n}) => {\n  const goBack = useCallback(() => {\n    window.history.back();\n  }, []);\n\n  /** @type {DivRefCallback} */\n  const divRefCb = useCallback(\n    el => {\n      // https://www.pluralsight.com/tech-blog/getting-size-and-position-of-an-element-in-react/\n      if (!el) return;\n      try {\n        onHeight(el.getBoundingClientRect().height);\n      } catch (e) {\n        console.log(`Error inside onHeight mechanism in DialogNav:`);\n        console.log(e);\n      }\n    },\n    [onHeight]\n  );\n\n  return (\n    <div\n      className=\"dialog-nav-container\"\n      ref={divRefCb}\n      style={CONTAINER_STYLE}\n    >\n      <div className=\"dialog-nav-back\" onClick={goBack}>\n        <i className=\"icon icon-thin-back\"></i>\n      </div>\n      <p className=\"dialog-nav-title\">{pageTitle}</p>\n      <div\n        className={classNames({\n          \"dialog-nav-menu-btn\": true,\n          \"dialog-nav-hidden\": !drawerVisible\n        })}\n      >\n        <div className=\"dialog-nav-menu-dash\" />\n        <div className=\"dialog-nav-menu-dash\" />\n        <div className=\"dialog-nav-menu-dash\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(DialogNav);\n","export const isMobile = (): boolean =>\n  !!navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i);\n\nexport const isDesktop = (): boolean => (!isMobile() ? true : false);\n","import { memo } from \"react\";\nimport QRScanner from \"react-qr-scanner\";\nimport { isDesktop } from \"../../utils/Platform\";\nimport \"./css/index.scoped.css\";\n\ntype ScannerMode = \"wizard\" | \"invoice\";\ninterface Props {\n  mode: ScannerMode;\n  onScan: (result: string | null) => void;\n  onError: (error: Error) => void;\n  onClose: () => void;\n}\n\nconst modeContents = {\n  wizard: {\n    title: \"SCAN A\",\n    target: \"QR CODE\",\n    description: \"Point your camera at a ShockWizard QR Code\"\n  },\n  invoice: {\n    title: \"SCAN AN\",\n    target: \"INVOICE\",\n    description: \"Point your camera at an LND Invoice\"\n  }\n};\n\nconst QRCodeScanner = ({\n  mode = \"wizard\",\n  onScan,\n  onError,\n  onClose\n}: Props) => {\n  const content = modeContents[mode];\n  const videoConstrain: { facingMode? } = {};\n  if (!isDesktop()) {\n    videoConstrain.facingMode = { exact: \"environment\" };\n  }\n\n  return (\n    <div className=\"qr-code-scanner-container\">\n      <div className=\"qr-scanner-top-section\">\n        <i className=\"fas fa-times\" onClick={onClose}></i>\n      </div>\n\n      <QRScanner\n        constraints={{\n          video: videoConstrain\n        }}\n        onScan={onScan}\n        onError={onError}\n      />\n\n      <div className=\"qr-scanner-target\" />\n      <div className=\"qr-scanner-bottom-section\">\n        <p className=\"qr-scanner-bottom-title\">\n          {content.title}{\" \"}\n          <span className=\"qr-scanner-bottom-title-highlight\">\n            {content.target}\n          </span>\n        </p>\n        <p className=\"qr-scanner-bottom-description\">{content.description}</p>\n        <div className=\"qr-scanner-btn\" onClick={onClose}>\n          Cancel Scan\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(QRCodeScanner);\n","const btcAddress = /^(bc(1|r)|[123]|m|n|((t|x)pub)|(tb1))[a-zA-HJ-NP-Z0-9]{25,90}$/;\nconst lnInvoice = /^(ln(tb|bc|bcrt))[0-9][a-z0-9]{180,7089}$/;\nconst lnPubKey = /^[a-f0-9]{66}$/;\n\nexport const removePrefix = (data: string): string => {\n  let value = data;\n  if (data.includes(\"bitcoin:\")) {\n    [, value] = data.split(\"bitcoin:\");\n  } else if (data.includes(\"lightning:\")) {\n    [, value] = data.split(\"lightning:\");\n  } else if (data.includes(\"LIGHTNING:\")) {\n    [, value] = data.split(\"LIGHTNING:\");\n  }\n\n  return value;\n};\n\nexport const hasAmount = (\n  data: string\n): { address: string; amount: undefined | string } => {\n  if (data.includes(\"?amount=\")) {\n    const amountSplit = data.split(\"?amount=\");\n\n    const amount = Math.floor(Number(amountSplit[1]) * 100000000);\n    return { address: amountSplit[0], amount: amount.toString() };\n  }\n  return { address: data, amount: undefined };\n};\n\nexport const isBitcoinAddress = (data: string) => {\n  return btcAddress.test(data);\n};\n\nexport const isLightningPaymentRequest = (data: string) =>\n  lnInvoice.test(data.toLowerCase());\n\nexport const isLightningPubKey = (data: string) => lnPubKey.test(data);\n\nexport const isShockPubKey = (data: string) =>\n  data.startsWith(\"$$__SHOCKWALLET__USER__\");\n\nexport const findlnurl = (data: string) => {\n  const res = /^(http.*[&?]lightning=)?((lnurl)([0-9]{1,}[a-z0-9]+){1})/.exec(\n    data.toLowerCase()\n  );\n  if (res) {\n    return res[2];\n  }\n  return null;\n};\nexport type ExtractedBTCAddress = {\n  type: \"btc\";\n  address: string;\n  amount?: string;\n};\nexport type ExtractedLNInvoice = {\n  type: \"ln\";\n  request: string;\n};\nexport type ExtractedKeysend = {\n  type: \"keysend\";\n  address: string;\n};\nexport type ExtractedShockPK = {\n  type: \"pk\";\n  pk: string;\n};\nexport type ExtractedLNURL = {\n  type: \"lnurl\";\n  lnurl: string;\n};\nexport type ExtractedUnknown = {\n  type: \"unknown\";\n};\n\n/**\n * @param {string} data\n * @returns {ExtractedBTCAddress|ExtractedLNInvoice|ExtractedKeysend|ExtractedShockPK|ExtractedUnknown|ExtractedLNURL}\n */\nconst extractInfo = (\n  data: string\n):\n  | ExtractedBTCAddress\n  | ExtractedLNInvoice\n  | ExtractedKeysend\n  | ExtractedShockPK\n  | ExtractedUnknown\n  | ExtractedLNURL => {\n  const cleanData = removePrefix(data);\n  const { address, amount } = hasAmount(cleanData);\n  if (isBitcoinAddress(address)) {\n    return {\n      type: \"btc\",\n      address,\n      amount\n    };\n  }\n  if (isLightningPaymentRequest(cleanData)) {\n    return {\n      type: \"ln\",\n      request: cleanData\n    };\n  }\n  if (isLightningPubKey(cleanData)) {\n    return {\n      type: \"keysend\",\n      address: cleanData\n    };\n  }\n  if (isShockPubKey(cleanData)) {\n    return {\n      type: \"pk\",\n      pk: cleanData\n    };\n  }\n\n  const found = findlnurl(cleanData);\n  if (found) {\n    return {\n      type: \"lnurl\",\n      lnurl: found.toUpperCase()\n    };\n  }\n  return { type: \"unknown\" };\n};\n\nexport default extractInfo;\n","import  {\n  memo,\n  useCallback,\n  useMemo,\n  useState\n} from \"react\";\nimport { useHistory } from \"react-router\";\nimport {\n  getParams,\n  LNURLAuthParams,\n  LNURLChannelParams,\n  LNURLPayParams,\n  LNURLResponse,\n  LNURLWithdrawParams\n} from \"js-lnurl\";\nimport DialogNav from \"../../common/DialogNav\";\nimport Loader from \"../../common/Loader\";\nimport QRCodeScanner from \"../../common/QRCodeScanner\";\nimport ExtractInfo from \"../../utils/validators\";\nimport { useDispatch } from \"react-redux\";\nimport { Http } from \"../../utils\";\nimport { connectPeer, fetchPeers } from \"../../actions/WalletActions\";\n\nconst QRScanner = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [privateChannel, setPrivateChannel] = useState(true);\n  const [payAmount, setPayAmount] = useState(0);\n  const [withdrawAmount, setWithdrawAmount] = useState(0);\n  const [hasMemo, setHasMemo] = useState(false);\n  const [memo, setMemo] = useState(\"\");\n  const [LNURLdata, setLNURLdata] = useState(null);\n  const [scanQR, setScanQR] = useState(true);\n  const goBack = useCallback(() => {\n    history.push(\"/overview\");\n  }, [history]);\n  const onInputChange = useCallback(\n    e => {\n      const { value, name, checked } = e.target;\n      //e.preventDefault()\n      switch (name) {\n        case \"privateChannel\": {\n          setPrivateChannel(checked);\n          return;\n        }\n        case \"payAmount\": {\n          setPayAmount(value);\n          return;\n        }\n        case \"withdrawAmount\": {\n          setWithdrawAmount(value);\n          return;\n        }\n        case \"hasMemo\": {\n          setHasMemo(checked);\n          return;\n        }\n        case \"memo\": {\n          setMemo(value);\n          return;\n        }\n        default:\n          return;\n      }\n    },\n    [setPrivateChannel, setPayAmount, setWithdrawAmount, setHasMemo, setMemo]\n  );\n  const decodeLNURL = useCallback(async data => {\n    setLoading(true);\n    try {\n      const params = await getParams(data);\n      //@ts-ignore\n      if (!params.tag) {\n        const p = params as LNURLResponse;\n        setLoading(false);\n        alert(p.reason);\n      }\n      const p = params as\n        | LNURLChannelParams\n        | LNURLWithdrawParams\n        | LNURLAuthParams\n        | LNURLPayParams;\n      switch (p.tag) {\n        case \"channelRequest\": {\n          console.log(\"this url is a channel request\");\n          break;\n        }\n        case \"withdrawRequest\": {\n          console.log(\"this url is a withdrawal request\");\n          break;\n        }\n        case \"hostedChannelRequest\": {\n          console.log(\"this url is a hosted channel request\");\n          break;\n        }\n        case \"login\": {\n          console.log(\"this url is a login \");\n          break;\n        }\n        case \"payRequest\": {\n          console.log(\"this url is a pay request\");\n          break;\n        }\n        default: {\n          console.log(\"unknown tag\");\n        }\n      }\n      setLNURLdata(p);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n      alert(e.message || e);\n    }\n  }, []);\n  const decodeAll = useCallback(\n    result => {\n      console.log(\"decoding!\");\n      const info = ExtractInfo(result);\n      switch (info.type) {\n        case \"btc\":\n        case \"ln\":\n        case \"keysend\": {\n          history.push(\"/send\", {\n            data: info\n          });\n          return;\n        }\n        case \"pk\": {\n          history.push(`/otherUser/${info.pk}`);\n          return;\n        }\n        case \"lnurl\": {\n          decodeLNURL(info.lnurl);\n          return;\n        }\n        case \"unknown\": {\n          alert(\"cant decode\" + JSON.stringify(info));\n        }\n      }\n    },\n    [history, decodeLNURL]\n  );\n  const closeQR = useCallback(() => {\n    setScanQR(false);\n    history.push(\"/overview\");\n  }, [setScanQR, history]);\n  const scanDone = useCallback(\n    content => {\n      console.log(content);\n      if (!content || !content.text) {\n        return;\n      }\n      decodeAll(content.text);\n      setScanQR(false);\n    },\n    [decodeAll, setScanQR]\n  );\n\n  const confirmWithdrawReq = useCallback(async () => {\n    try {\n      const { callback, k1 } = LNURLdata;\n      const { data: payReq } = await Http.post(\"/api/lnd/addinvoice\", {\n        value: withdrawAmount,\n        memo: memo,\n        expiry: 1800\n      });\n      const completeUrl = `${callback}?k1=${k1}&pr=${payReq.payment_request}`;\n      console.log(completeUrl);\n      const res = await fetch(completeUrl);\n      const json = await res.json();\n      if (json.status === \"OK\") {\n        alert(\"Withdraw request sent correctly\");\n      } else {\n        alert(json.reason);\n      }\n    } catch (e) {\n      alert(e.message || e);\n    }\n  }, [LNURLdata, withdrawAmount, memo]);\n  const confirmChannelReq = useCallback(async () => {\n    try {\n      const { uri, callback, k1 } = LNURLdata;\n      let newK1 = k1;\n      if (k1 === \"gun\" && LNURLdata.shockPubKey) {\n        newK1 = `$$__SHOCKWALLET__USER__${LNURLdata.shockPubKey}`;\n      }\n      const samePeer = e => {\n        const localUri = `${e.pub_key}@${e.address}`;\n        return localUri === uri;\n      };\n      const { peers } = await fetchPeers()(dispatch);\n      if (!peers.find(samePeer)) {\n        const [publicKey, host] = uri.split(\"@\");\n        await connectPeer({ publicKey, host });\n      }\n\n      const { data: node } = await Http.get(\"/healthz\");\n      const nodeId = node.identity_pubkey;\n      const priv = privateChannel ? 1 : 0;\n      const completeUrl = `${callback}?k1=${newK1}&remoteid=${nodeId}&private=${priv}`;\n      const res = await fetch(completeUrl);\n      const json = await res.json();\n      if (json.status === \"OK\") {\n        alert(\"Channel request sent correctly\");\n      } else {\n        alert(json.reason);\n      }\n    } catch (e) {\n      alert(e.message || e);\n    }\n  }, [LNURLdata, dispatch, privateChannel]);\n  const confirmPayReq = useCallback(async () => {\n    try {\n      const { callback } = LNURLdata;\n      const completeUrl = `${callback}?amount=${payAmount * 1000}`;\n      console.log(completeUrl);\n      const res = await fetch(completeUrl);\n      const json = await res.json();\n      if (json.status === \"ERROR\") {\n        alert(json.reason);\n        return;\n      }\n      history.push(\"/send\", {\n        data: { type: \"ln\", request: json.pr }\n      });\n    } catch (e) {\n      alert(e.message || e);\n    }\n  }, [history, LNURLdata, payAmount]);\n\n  const toRender = useMemo(() => {\n    if (LNURLdata === null) {\n      return null;\n    }\n    switch (LNURLdata.tag) {\n      case \"channelRequest\": {\n        console.log(\"this url is a channel request\");\n        return (\n          <div>\n            <h2>LNURL Channel Request</h2>\n            <p>\n              Requesting channel from:{LNURLdata.uri || \"ADDRESS NOT FOUND\"}\n            </p>\n            <input\n              type=\"checkbox\"\n              name=\"privateChannel\"\n              checked={privateChannel}\n              onChange={onInputChange}\n            />\n            <button onClick={confirmChannelReq}>CONNECT</button>\n          </div>\n        );\n      }\n      case \"withdrawRequest\": {\n        console.log(\"this url is a withdrawal request\");\n        return (\n          <div>\n            <h2>LNURL Channel Request</h2>\n            <p>\n              <strong>Max</strong>Withdrawable:{\" \"}\n              <strong>{LNURLdata.maxWithdrawable / 1000}</strong> Satoshi\n            </p>\n            <input\n              type=\"number\"\n              value={withdrawAmount}\n              name=\"withdrawAmount\"\n              onChange={onInputChange}\n            />\n            <input\n              type=\"checkbox\"\n              name=\"hasMemo\"\n              checked={hasMemo}\n              onChange={onInputChange}\n            />\n            {hasMemo && (\n              <input\n                type=\"text\"\n                value={memo}\n                name=\"memo\"\n                placeholder=\"memo\"\n                onChange={onInputChange}\n              />\n            )}\n            <button onClick={confirmWithdrawReq}>RECEIVE</button>\n          </div>\n        );\n      }\n      case \"hostedChannelRequest\": {\n        console.log(\"this url is a hosted channel request\");\n        return (\n          <div>\n            <h2>LNURL Hosted Channel Request</h2>\n            <p>This Request is not supported</p>\n            <button onClick={goBack}>BACK</button>\n          </div>\n        );\n      }\n      case \"login\": {\n        console.log(\"this url is a login \");\n        return (\n          <div>\n            <h2>LNURL Auth Request</h2>\n            <p>This Request is not supported</p>\n            <button onClick={goBack}>BACK</button>\n          </div>\n        );\n      }\n      case \"payRequest\": {\n        console.log(\"this url is a pay request\");\n        return (\n          <div>\n            <h2>LNURL Pay Request</h2>\n            <p>\n              <strong>Min</strong>Sendable:{\" \"}\n              <strong>{LNURLdata.minSendable / 1000}</strong> Satoshi\n            </p>\n            <p>\n              <strong>Max</strong>Sendable:{\" \"}\n              <strong>{LNURLdata.maxSendable / 1000}</strong> Satoshi\n            </p>\n            <input\n              type=\"number\"\n              value={payAmount}\n              name=\"payAmount\"\n              onChange={onInputChange}\n            />\n            <button onClick={confirmPayReq}>SEND</button>\n          </div>\n        );\n      }\n      default: {\n        console.log(\"unknown tag\");\n        return (\n          <div>\n            <h2>LNURL Unknown Request</h2>\n            <button onClick={goBack}>BACK</button>\n          </div>\n        );\n      }\n    }\n  }, [\n    LNURLdata,\n    privateChannel,\n    withdrawAmount,\n    hasMemo,\n    memo,\n    payAmount,\n    onInputChange,\n    goBack,\n    confirmChannelReq,\n    confirmPayReq,\n    confirmWithdrawReq\n  ]);\n  const scanErr = useCallback(\n    (e: Error) => {\n      alert(e.message || e);\n    },\n    []\n  );\n  if (scanQR) {\n    return (\n      <div>\n        <QRCodeScanner\n          mode=\"invoice\"\n          onClose={closeQR}\n          onError={scanErr}\n          onScan={scanDone}\n        />\n      </div>\n    );\n  }\n  return (\n    <div className=\"publish-content-form-container m-1\">\n      {loading ? <Loader overlay fullScreen text=\"\" /> : null}\n      <DialogNav drawerVisible={false} pageTitle=\"PUBLISH CONTENT\" />\n      <div>{toRender}</div>\n    </div>\n  );\n};\n\nexport default memo(QRScanner);\n"],"sourceRoot":""}