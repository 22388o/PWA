{"version":3,"sources":["pages/Request/components/FormStep/index.js","pages/Request/components/InvoiceStep/index.js","pages/Request/index.js"],"names":["FormStep","onInputChange","amount","description","className","InputGroup","name","label","onChange","value","inputMode","element","InvoiceStep","unit","prevStep","dispatch","useDispatch","history","useHistory","useState","paymentRequest","setPaymentRequest","address","setAddress","QRLoading","setQRLoading","loading","setLoading","contact","setContact","setError","lightningMode","setLightningMode","addInvoice","useCallback","a","Http","post","memo","expiry","invoice","data","payment_request","response","errorMessage","generateAddress","type","selectContact","useEffect","toggleLightningMode","copyClipboard","navigator","clipboard","writeText","sendInvoice","sendMessage","publicKey","pk","message","push","Loader","overlay","text","Suggestion","selected","ContactsSearch","features","small","size","fgColor","bgColor","classNames","mode","onClick","toUpperCase","SlidePay","wrapperStyle","padding","marginTop","slideText","onSuccess","RequestPage","setAmount","setDescription","activeStep","setActiveStep","setUnit","e","target","nextStep","MAX_STEPS","renderStep","lastStep","steps","Array","from","length","DialogPageContainer","title","map","step","key"],"mappings":"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","file":"static/js/27.c5e2325b.chunk.js","sourcesContent":["import InputGroup from \"../../../../common/InputGroup\";\nimport \"./css/index.scoped.css\"\n\nconst FormStep = ({ onInputChange, amount, description }) => (\n  <div className=\"container\">\n    <div className=\"inputs-group\">\n      <InputGroup\n        name=\"amount\"\n        label=\"Enter Amount\"\n        onChange={onInputChange}\n        value={amount}\n        inputMode=\"decimal\"\n      />\n      <select name=\"unit\" className=\"unit-dropdown\" onChange={onInputChange}>\n        <option value=\"sats\">Sats</option>\n        <option value=\"msats\">mSats</option>\n        <option value=\"btc\">BTC</option>\n      </select>\n    </div>\n    <InputGroup\n      name=\"description\"\n      label=\"Description\"\n      element=\"textarea\"\n      onChange={onInputChange}\n      value={description}\n    />\n  </div>\n);\n\nexport default FormStep;\n","import { useCallback, useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport QRCode from \"qrcode.react\";\nimport { useDispatch } from \"react-redux\";\nimport Loader from \"../../../../common/Loader\";\nimport SlidePay from \"../../../../common/SlidePay\";\nimport Http from \"../../../../utils/Http\";\nimport \"./css/index.scoped.css\";\nimport Suggestion from \"../../../../common/ContactsSearch/components/Suggestion\";\nimport ContactsSearch from \"../../../../common/ContactsSearch\";\nimport { sendMessage } from \"../../../../actions/ChatActions\";\nimport { useHistory } from \"react-router\";\n\nconst InvoiceStep = ({\n  amount = 0,\n  description = \"N/A\",\n  unit = \"\",\n  prevStep\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [paymentRequest, setPaymentRequest] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [QRLoading, setQRLoading] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [contact, setContact] = useState();\n  const [error, setError] = useState(\"\");\n  const [lightningMode, setLightningMode] = useState(false);\n\n  const addInvoice = useCallback(async () => {\n    try {\n      setQRLoading(true);\n      const { data: invoice } = await Http.post(\"/api/lnd/addinvoice\", {\n        value: amount,\n        memo: description,\n        expiry: 100\n      });\n\n      setPaymentRequest(invoice.payment_request);\n    } catch (err) {\n      setError(\n        err?.response?.data.errorMessage ?? \"An unknown error has occurred\"\n      );\n    } finally {\n      setQRLoading(false);\n    }\n  }, [amount, description]);\n\n  const generateAddress = useCallback(async () => {\n    try {\n      setQRLoading(true);\n      const { data } = await Http.post(\"/api/lnd/newaddress\", {\n        type: \"p2wkh\"\n      });\n\n      setAddress(data.address);\n    } catch (err) {\n      setError(\n        err?.response?.data.errorMessage ?? \"An unknown error has occurred\"\n      );\n    } finally {\n      setQRLoading(false);\n    }\n  }, []);\n\n  const selectContact = useCallback(async contact => {\n    setContact(contact);\n  }, []);\n\n  useEffect(() => {\n    if (lightningMode) {\n      addInvoice();\n      return;\n    }\n\n    generateAddress();\n  }, [addInvoice, generateAddress, lightningMode]);\n\n  const toggleLightningMode = useCallback(() => {\n    setLightningMode(!lightningMode);\n  }, [lightningMode]);\n\n  const copyClipboard = useCallback(() => {\n    if (lightningMode) {\n      navigator.clipboard.writeText(paymentRequest);\n      return;\n    }\n\n    navigator.clipboard.writeText(address);\n  }, [lightningMode, paymentRequest, address]);\n\n  const sendInvoice = useCallback(async () => {\n    if (contact) {\n      try {\n        setLoading(true);\n        await sendMessage({\n          publicKey: contact.pk,\n          message: \"$$__SHOCKWALLET__INVOICE__\" + paymentRequest\n        })(dispatch);\n        setLoading(false);\n        history.push(\"/overview\");\n      } catch (err) {\n        setError(\n          err?.response?.data.errorMessage ??\n            err?.message ??\n            \"An unknown error has occurred\"\n        );\n        setLoading(false);\n      }\n    }\n  }, [contact, paymentRequest, history]);\n\n  return (\n    <div className=\"container\">\n      {loading ? <Loader overlay text=\"Sending Invoice...\" /> : null}\n      {lightningMode ? (\n        contact ? (\n          <Suggestion\n            selected\n            contact={contact}\n            selectContact={selectContact}\n          />\n        ) : (\n          <ContactsSearch\n            selectContact={selectContact}\n            features={[\"contact\"]}\n          />\n        )\n      ) : null}\n      <div className=\"qr-code-container\">\n        <div className=\"qr-code\">\n          {QRLoading ? (\n            <Loader overlay small text=\"\" />\n          ) : (\n            <QRCode\n              value={lightningMode ? paymentRequest : address}\n              size={180}\n              fgColor={lightningMode ? \"#f5a623\" : \"#4285b9\"}\n              bgColor=\"#001220\"\n            />\n          )}\n        </div>\n        <div\n          className={classNames({\n            mode: true,\n            \"lightning-active\": lightningMode\n          })}\n          onClick={toggleLightningMode}\n        >\n          <p className=\"switch-name on-chain-switch\">On-Chain</p>\n          <div className=\"switch\">\n            <div className=\"switch-handle\" />\n          </div>\n          <p className=\"switch-name lightning-switch\">Lightning</p>\n        </div>\n      </div>\n      <div className=\"copy-clipboard-btn\" onClick={copyClipboard}>\n        <i className=\"fas fa-copy\"></i>\n        <p className=\"copy-clipboard-btn-text\">Copy to Clipboard</p>\n      </div>\n      <div className=\"details\">\n        <p className=\"details-change\" onClick={prevStep}>\n          Change\n        </p>\n        <div className=\"detail\">\n          <p className=\"detail-title\">Amount</p>\n          <p className=\"detail-value\">\n            {amount} {unit.toUpperCase()}\n          </p>\n        </div>\n        <div className=\"detail\">\n          <p className=\"detail-title\">Description</p>\n          <p className=\"detail-value\">{description}</p>\n        </div>\n      </div>\n      {lightningMode && contact ? (\n        <SlidePay\n          wrapperStyle={{\n            padding: 0,\n            marginTop: 23\n          }}\n          slideText=\"SLIDE TO SEND\"\n          onSuccess={sendInvoice}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default InvoiceStep;\n","import React, { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\nimport DialogPageContainer from \"../../common/DialogPageContainer\";\nimport \"./css/index.scoped.css\";\nimport FormStep from \"./components/FormStep\";\nimport InvoiceStep from \"./components/InvoiceStep\";\n\nconst MAX_STEPS = 2;\n\nconst RequestPage = () => {\n  const [amount, setAmount] = useState(0);\n  const [description, setDescription] = useState(\"\");\n  const [activeStep, setActiveStep] = useState(0);\n  const [unit, setUnit] = useState(\"sats\");\n\n  const onInputChange = useCallback(e => {\n    if (e.target.name === \"amount\") {\n      setAmount(e.target.value);\n    }\n\n    if (e.target.name === \"description\") {\n      setDescription(e.target.value);\n    }\n\n    if (e.target.name === \"unit\") {\n      setUnit(e.target.value);\n    }\n  }, []);\n\n  const nextStep = useCallback(() => {\n    if (activeStep < MAX_STEPS - 1) {\n      setActiveStep(activeStep + 1);\n    }\n  }, [activeStep]);\n\n  const prevStep = useCallback(() => {\n    if (activeStep > 0) {\n      setActiveStep(activeStep - 1);\n    }\n  }, [activeStep]);\n\n  const renderStep = useCallback(() => {\n    if (activeStep === 0) {\n      return (\n        <FormStep\n          amount={amount}\n          description={description}\n          onInputChange={onInputChange}\n        />\n      );\n    }\n\n    if (activeStep === 1) {\n      return (\n        <InvoiceStep\n          amount={amount}\n          description={description}\n          unit={unit}\n          prevStep={prevStep}\n        />\n      );\n    }\n  }, [activeStep, amount, description, onInputChange, prevStep, unit]);\n\n  const lastStep = activeStep === MAX_STEPS - 1;\n  const steps = Array.from({ length: MAX_STEPS });\n\n  return (\n    <DialogPageContainer title=\"REQUEST\">\n      {renderStep()}\n      <div className=\"footer\">\n        {!lastStep ? (\n          <div className=\"controls\">\n            <div className=\"control\" onClick={nextStep}>\n              Skip\n            </div>\n            <div\n              className=\"control next\"\n              onClick={nextStep}\n            >\n              Next\n            </div>\n          </div>\n        ) : null}\n        <div className=\"indicators\">\n          {steps.map((step, key) => (\n            <div\n              className={classNames({\n                \"indicator\": true,\n                \"indicator-active\": key === activeStep\n              })}\n            ></div>\n          ))}\n        </div>\n      </div>\n    </DialogPageContainer>\n  );\n};\n\nexport default RequestPage;\n"],"sourceRoot":""}