{"version":3,"sources":["utils/Constants.ts","pages/Feed/css/Feed.module.css","pages/Feed/index.js"],"names":["DEFAULT_FOLLOWS","user","status","private","module","exports","Post","React","lazy","SharedPost","FeedPage","dispatch","Store","history","useHistory","authenticated","auth","authToken","node","follows","posts","useState","tipModalData","setTipModalOpen","unlockModalData","setUnlockModalOpen","shareModalData","setShareModalData","tipPublicKey","setTipPublicKey","selfPublicKey","publicKey","reloadDone","feed","useEffect","subscribeFollows","unsubscribeFollows","reloadFollows","toggleTipModal","useCallback","tipData","console","log","toggleUnlockModal","unlockData","toggleShareModal","shareData","redirectAuth","push","subscriptions","map","follow","profileSubscription","subscribeUserProfile","postsSubscription","subscribeUserPosts","sharedPostsSubscription","subSharedPosts","unsubscribe","length","reloadFeed","setTimeout","go","className","styles","followed","forceAddBtn","height","createsPost","nameAtBottom","text","post","Common","fallback","openTipModal","openUnlockModal","openShareModal","postID","originalPostID","sharerPublicKey","sharedBy","shareID","id","authorId","toggleOpen","onClick","large","icon","label","memo"],"mappings":"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","file":"static/js/36.074e691c.chunk.js","sourcesContent":["import * as Common from \"shock-common\";\n\nexport const DEFAULT_FOLLOWS: Common.Follow[] = [\n  {\n    // Lightning.Page\n    user: \"tcUUzRkyzXYhIZQbmopiCLREyZ_kQJqQ-C4XesecOm4.GX1Dv-eGcfKuOPobBK9Q-Sc-o697XgVCQzOCfqfimIo\",\n    status: \"ok\",\n    private: false\n  },\n  {\n    // Guy Swann\n    user: \"CDfURSDaABun7sbzxt1LvUrTrtgLza_3NrCKrmUWIYU.Ssr3U9JN6cpFI9BZLL-1HLM2vS0ECEt-H4iUXvhkGzU\",\n    status: \"ok\",\n    private: false\n  },\n  {\n    // JohnOnChain\n    user: \"Fd_7lUhwH7JoHbg6UKnGO9rYsZBOuR1KSbpZz8-Sbcw.fUu68TPuBWl83LBKgAbuiy0r1hMqnUevzyEgqPYu0B4\",\n    status: \"ok\",\n    private: false\n  }\n];\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"followed\":\"Feed_followed__1ZWr5\"};","// @ts-check\nimport React, {\n  Suspense,\n  memo,\n  useCallback,\n  useEffect,\n  useState\n} from \"react\";\nimport * as Common from \"shock-common\";\nimport { useHistory } from \"react-router-dom\";\n\nimport * as Store from \"../../store\";\nimport BottomBar from \"../../common/BottomBar\";\n\nimport SendTipModal from \"./components/SendTipModal\";\nimport ShareModal from \"../Feed/components/ShareModal\";\nimport Loader from \"../../common/Loader\";\nimport ShockAvatar from \"../../common/ShockAvatar\";\n\nimport \"./css/index.scoped.css\";\nimport UnlockModal from \"./components/UnlockModal\";\nimport {\n  subscribeFollows,\n  subscribeUserPosts,\n  unsubscribeFollows,\n  reloadFeed,\n  subSharedPosts,\n  reloadFollows\n} from \"../../actions/FeedActions\";\nimport { subscribeUserProfile } from \"../../actions/UserProfilesActions\";\nimport styles from \"./css/Feed.module.css\";\nimport { DEFAULT_FOLLOWS } from \"../../utils/Constants\";\nimport GuestTipModal from \"../../common/TipModal\";\nimport AddBtn from \"../../common/AddBtn\";\n\nconst Post = React.lazy(() => import(\"../../common/Post\"));\nconst SharedPost = React.lazy(() => import(\"../../common/Post/SharedPost\"));\n\nconst FeedPage = () => {\n  const dispatch = Store.useDispatch();\n  const history = useHistory();\n  const authenticated = Store.useSelector(({ auth }) => auth.authenticated);\n  const authToken = Store.useSelector(({ node }) => node.authToken);\n  const follows = Store.useSelector(Store.selectFollows);\n  const posts = Store.useSelector(\n    Store.selectAllPostsFromFollowedNewestToOldest\n  );\n  const [tipModalData, setTipModalOpen] = useState(null);\n  const [unlockModalData, setUnlockModalOpen] = useState(null);\n  const [shareModalData, setShareModalData] = useState(null);\n  const [tipPublicKey, setTipPublicKey] = useState(null);\n  const { publicKey: selfPublicKey } = Store.useSelector(Store.selectSelfUser);\n  const reloadDone = Store.useSelector(({ feed }) => feed.reloadDone);\n  // Effect to sub follows\n  useEffect(() => {\n    dispatch(subscribeFollows());\n    return () => {\n      dispatch(unsubscribeFollows());\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!authenticated) {\n      dispatch(reloadFollows(DEFAULT_FOLLOWS));\n    }\n  }, [authenticated, dispatch]);\n\n  const toggleTipModal = useCallback(\n    tipData => {\n      console.log(tipData);\n      if (tipModalData || !tipData) {\n        setTipModalOpen(null);\n        setTipPublicKey(null);\n        return;\n      }\n\n      setTipModalOpen(tipData);\n      setTipPublicKey(tipData.publicKey);\n    },\n    [tipModalData]\n  );\n  const toggleUnlockModal = useCallback(\n    unlockData => {\n      console.log(unlockData);\n      if (unlockModalData || !unlockData) {\n        setUnlockModalOpen(null);\n      }\n\n      setUnlockModalOpen(unlockData);\n    },\n    [unlockModalData]\n  );\n\n  const toggleShareModal = useCallback(\n    shareData => {\n      console.log(shareData);\n      if (shareModalData || !shareData) {\n        setShareModalData(null);\n      }\n\n      setShareModalData(shareData);\n    },\n    [shareModalData]\n  );\n\n  const redirectAuth = useCallback(() => {\n    history.push(\"/auth\");\n  }, [history]);\n\n  useEffect(() => {\n    const subscriptions = follows.map(follow => {\n      const profileSubscription = dispatch(subscribeUserProfile(follow.user));\n      const postsSubscription = dispatch(subscribeUserPosts(follow.user));\n      const sharedPostsSubscription = dispatch(subSharedPosts(follow.user));\n\n      return () => {\n        profileSubscription();\n        postsSubscription();\n        sharedPostsSubscription();\n      };\n    });\n\n    return () => {\n      subscriptions.map(unsubscribe => unsubscribe());\n    };\n  }, [follows, dispatch]);\n\n  //effect to reload the feed once after a cache clear\n  useEffect(() => {\n    if (posts.length > 0 && !reloadDone) {\n      dispatch(reloadFeed());\n      setTimeout(() => {\n        history.go(0);\n      }, 3000);\n    }\n  }, [reloadDone, history, dispatch, posts.length]);\n\n  return (\n    <div className=\"page-container feed-page\">\n      <div className={styles.followed}>\n        {authenticated && (\n          <ShockAvatar\n            forceAddBtn\n            height={60}\n            publicKey={selfPublicKey}\n            createsPost\n          />\n        )}\n\n        {follows?.map(follow => {\n          return (\n            <ShockAvatar\n              height={60}\n              key={follow.user}\n              nameAtBottom\n              publicKey={follow.user}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"tabs-holder\">\n        <p className=\"tab active\">Feed</p>\n        <p className=\"tab\">Saved</p>\n        <p className=\"tab\">Videos</p>\n      </div>\n      <div className=\"posts-holder\">\n        {posts.length === 0 && <Loader text=\"loading posts...\" />}\n        {posts.map(post => {\n          if (Common.isSharedPost(post)) {\n            return (\n              <Suspense fallback={<Loader />} key={post.shareID}>\n                <SharedPost\n                  openTipModal={toggleTipModal}\n                  openUnlockModal={toggleUnlockModal}\n                  openShareModal={toggleShareModal}\n                  postID={post.originalPostID}\n                  sharerPublicKey={post.sharedBy}\n                />\n              </Suspense>\n            );\n          }\n\n          return (\n            <Suspense fallback={<Loader />} key={post.id}>\n              <Post\n                id={post.id}\n                publicKey={post.authorId}\n                openTipModal={toggleTipModal}\n                openUnlockModal={toggleUnlockModal}\n                openShareModal={toggleShareModal}\n              />\n            </Suspense>\n          );\n        })}\n      </div>\n      <SendTipModal tipData={tipModalData} toggleOpen={toggleTipModal} />\n      <GuestTipModal\n        publicKey={tipPublicKey}\n        tipData={tipModalData}\n        toggleOpen={toggleTipModal}\n      />\n      <UnlockModal\n        unlockData={unlockModalData}\n        toggleOpen={toggleUnlockModal}\n      />\n      <ShareModal shareData={shareModalData} toggleOpen={toggleShareModal} />\n      {!authToken && (\n        <AddBtn\n          onClick={redirectAuth}\n          large\n          icon=\"user\"\n          label=\"Create a Lightning Page\"\n        />\n      )}\n      <BottomBar />\n    </div>\n  );\n};\n\nexport default memo(FeedPage);\n"],"sourceRoot":""}