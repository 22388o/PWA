{"version":3,"sources":["../node_modules/uuid/dist/esm-browser/v1.js","pages/Profile/PublishContent.tsx"],"names":["_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","Array","node","clockseq","undefined","seedBytes","random","rng","msecs","Date","now","nsecs","dt","Error","tl","tmh","n","stringify","PublishContentPage","dispatch","useDispatch","history","useHistory","seedProviderPub","Store","content","seedInfo","seedUrl","seedToken","availableTokens","userProfiles","useState","error","setError","loading","setLoading","mediaPreviews","setMediaPreviews","title","setTitle","titleMissing","setTitleMissing","description","setDescription","postType","setPostType","imageFile","useRef","videoFile","promptInfo","setPromptInfo","selfPublicKey","selectedFiles","setSelectedFiles","onSubmitCb","useCallback","servicePrice","serviceID","a","console","log","length","res","RequestToken","finalSeedUrl","tokens","deleteToken","formData","FormData","from","forEach","file","append","fetch","method","headers","Authorization","body","json","resJson","message","err","removeUnavailableToken","torrent","data","magnet","firstFile","type","contentItem","id","uuid","timestamp","author","magnetURI","width","height","addPublishedContent","published","replace","text","then","txt","catch","e","errorMessage","closePrompt","submitPrompt","onSubmit","preventDefault","availableToken","key","Object","prototype","hasOwnProperty","call","SeedServiceProvided","Http","get","service","onDiscard","onInputChange","target","value","name","onSelectedFile","files","promises","map","index","Promise","reader","FileReader","onload","startsWith","uri","result","readAsDataURL","allSettled","previews","singleRes","status","push","onSelectImageFile","current","click","onSelectVideoFile","DarkPage","padding","pageTitle","scrolls","Loader","overlay","fullScreen","className","onReset","style","display","alignItems","justifyContent","htmlFor","onChange","appearance","backgroundColor","color","marginLeft","placeholder","c","gStyles","onClick","prev","alt","src","toString","controls","rows","Modal","modalOpen","toggleModal","ref","accept"],"mappings":"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","file":"static/js/37.494e785d.chunk.js","sourcesContent":["import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import { useCallback, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport c from \"classnames\";\nimport { v1 as uuid } from \"uuid\";\n\nimport \"./css/index.scoped.css\";\n\nimport Loader from \"../../common/Loader\";\nimport Http from \"../../utils/Http\";\nimport {\n  addPublishedContent,\n  removeUnavailableToken\n} from \"../../actions/ContentActions\";\nimport { RequestToken } from \"../../utils/seed\";\nimport { useHistory } from \"react-router\";\nimport * as Store from \"../../store\";\nimport Modal from \"../../common/Modal\";\nimport DarkPage from \"../../common/DarkPage\";\nimport * as gStyles from \"../../styles\";\nimport * as Schema from \"../../schema\";\n\nconst PublishContentPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const seedProviderPub = Store.useSelector(\n    ({ content }) => content.seedProviderPub\n  );\n  const { seedUrl, seedToken } = Store.useSelector(\n    ({ content }) => content.seedInfo\n  );\n  const availableTokens = Store.useSelector(\n    ({ content }) => content.availableTokens\n  );\n  const userProfiles = Store.useSelector(({ userProfiles }) => userProfiles);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [mediaPreviews, setMediaPreviews] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [titleMissing, setTitleMissing] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [postType, setPostType] = useState<\"public\" | \"private\">(\"public\");\n  const imageFile = useRef(null);\n  const videoFile = useRef(null);\n  const [promptInfo, setPromptInfo] = useState(null);\n  const selfPublicKey = Store.useSelector(Store.selectSelfPublicKey);\n\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const onSubmitCb = useCallback(\n    async (servicePrice?, serviceID?) => {\n      console.log([title, description, selectedFiles]);\n      if (!title) {\n        setError(\"Please input a title\");\n        setTitleMissing(true);\n        return;\n      }\n      if (selectedFiles.length === 0) {\n        setError(\"No selected files\");\n        return;\n      }\n      setLoading(true);\n      let res: Response | null = null;\n      try {\n        const {\n          seedUrl: finalSeedUrl,\n          tokens,\n          deleteToken\n        } = await RequestToken({\n          availableTokens,\n          seedProviderPub,\n          seedToken,\n          seedUrl,\n          serviceID,\n          servicePrice\n        });\n        const formData = new FormData();\n        //TODO support public/private content by requesting two tokens and doing this req twice\n        Array.from(selectedFiles).forEach(file =>\n          formData.append(\"files\", file)\n        );\n        formData.append(\"info\", \"extraInfo\");\n        formData.append(\"comment\", \"comment\");\n        res = await fetch(`${finalSeedUrl}/api/put_file`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${tokens[0]}`\n          },\n          body: formData\n        });\n        const resJson = await res.json();\n        console.log(resJson);\n        if (resJson.error && resJson.error.message) {\n          const err = resJson.error.message;\n          if (err === \"The provided token has already been used\") {\n            setError(\"An error occurred, please try again\");\n            removeUnavailableToken(finalSeedUrl, tokens[0])(dispatch);\n          } else {\n            setError(err);\n          }\n          setLoading(false);\n          return;\n        }\n        const { torrent } = resJson.data;\n        const { magnet } = torrent;\n        const [firstFile] = mediaPreviews;\n        console.log(firstFile);\n\n        const type =\n          firstFile.type === \"video\"\n            ? (\"video/embedded\" as const)\n            : (\"image/embedded\" as const);\n\n        const contentItem: Schema.PublicContentItem = {\n          id: uuid(),\n          timestamp: Date.now(),\n          author: selfPublicKey,\n          type,\n          magnetURI: magnet,\n          width: 0,\n          height: 0,\n          title,\n          description\n        };\n        const published = await addPublishedContent(\n          contentItem,\n          postType\n        )(dispatch);\n        console.log(\"content publish complete\");\n        console.log(published);\n        setLoading(false);\n        if (deleteToken) {\n          removeUnavailableToken(finalSeedUrl, tokens[0])(dispatch);\n        }\n        history.replace(\"/profile\");\n      } catch (err) {\n        console.error(err);\n        if (res) {\n          res\n            .text()\n            .then(txt => {\n              console.error(`Response data as text: `, txt);\n            })\n            .catch(e => {\n              console.error(`Could not process bad response data as text: `, e);\n            });\n        }\n        setError(err?.errorMessage ?? err?.message);\n        setLoading(false);\n      }\n    },\n    [\n      availableTokens,\n      description,\n      dispatch,\n      history,\n      mediaPreviews,\n      postType,\n      seedProviderPub,\n      seedToken,\n      seedUrl,\n      selectedFiles,\n      selfPublicKey,\n      title\n    ]\n  );\n\n  const closePrompt = useCallback(() => {\n    setPromptInfo(null);\n  }, [setPromptInfo]);\n  const submitPrompt = useCallback(() => {\n    const { servicePrice, serviceID } = promptInfo;\n    onSubmitCb(servicePrice, serviceID);\n    setPromptInfo(null);\n  }, [promptInfo, onSubmitCb, setPromptInfo]);\n\n  const onSubmit = useCallback(\n    async e => {\n      e.preventDefault();\n      let availableToken = false;\n      for (const key in availableTokens) {\n        if (Object.prototype.hasOwnProperty.call(availableTokens, key)) {\n          const element = availableTokens[key];\n          if (element[0]) {\n            availableToken = true;\n            break;\n          }\n        }\n      }\n      let serviceID = \"\";\n      if (userProfiles[seedProviderPub]) {\n        //@ts-expect-error\n        serviceID = userProfiles[seedProviderPub].SeedServiceProvided;\n      }\n      if (availableToken || (seedUrl && seedToken)) {\n        onSubmitCb();\n      } else if (serviceID && seedProviderPub) {\n        const { data: service } = await Http.get(\n          `/api/gun/otheruser/${seedProviderPub}/load/offeredServices>${serviceID}`\n        );\n        const { servicePrice } = service.data;\n        console.log(service);\n        setPromptInfo({ servicePrice, serviceID });\n      } else {\n        setError(\"No way found to publish content\");\n      }\n    },\n    [\n      availableTokens,\n      setPromptInfo,\n      setError,\n      onSubmitCb,\n      userProfiles,\n      seedProviderPub,\n      seedToken,\n      seedUrl\n    ]\n  );\n\n  const onDiscard = useCallback(\n    async e => {\n      e.preventDefault();\n      setTitle(\"\");\n      setTitleMissing(false);\n      setDescription(\"\");\n      setError(null);\n      setPromptInfo(null);\n      setSelectedFiles([]);\n      setMediaPreviews([]);\n    },\n    [\n      setDescription,\n      setTitle,\n      setError,\n      setPromptInfo,\n      setSelectedFiles,\n      setMediaPreviews\n    ]\n  );\n  const onInputChange = useCallback(\n    e => {\n      const { value, name } = e.target;\n      //e.preventDefault()\n      switch (name) {\n        case \"title\": {\n          setTitleMissing(false);\n          setTitle(value);\n          return;\n        }\n        case \"description\": {\n          setDescription(value);\n          return;\n        }\n        case \"postType\": {\n          setPostType(value);\n          return;\n        }\n        case \"createPost\": {\n          console.log(\"create post\");\n          return;\n        }\n        default:\n          return;\n      }\n    },\n    [setTitle, setDescription]\n  );\n  const onSelectedFile = useCallback(\n    e => {\n      e.preventDefault();\n\n      console.log(e.target.files);\n      setSelectedFiles(e.target.files);\n      const promises = Array.from(e.target.files).map((file, index) => {\n        console.log(\"doing file...\");\n        return new Promise(res => {\n          //@ts-expect-error\n          const { type } = file;\n          const reader = new FileReader();\n\n          reader.onload = function (e) {\n            if (type.startsWith(\"image/\")) {\n              res({ type: \"image\", uri: e.target.result, index });\n            }\n            if (type.startsWith(\"video/\")) {\n              res({ type: \"video\", uri: e.target.result, index });\n            }\n          };\n          //@ts-expect-error\n          reader.readAsDataURL(file);\n        });\n      });\n      Promise.allSettled(promises).then(res => {\n        const previews = [];\n        res.forEach(singleRes => {\n          if (singleRes.status === \"fulfilled\") {\n            previews.push(singleRes.value);\n          }\n        });\n        console.log(previews);\n        setMediaPreviews(previews);\n      });\n    },\n    [setSelectedFiles, setMediaPreviews]\n  );\n  const onSelectImageFile = useCallback(\n    e => {\n      e.preventDefault();\n      //imageFile.current.onChange =\n      imageFile.current.click();\n    },\n    [imageFile]\n  );\n  const onSelectVideoFile = useCallback(\n    e => {\n      e.preventDefault();\n      videoFile.current.click();\n    },\n    [videoFile]\n  );\n  return (\n    <DarkPage padding pageTitle=\"PUBLISH CONTENT\" scrolls>\n      {loading ? (\n        <Loader overlay fullScreen text=\"Publishing content...\" />\n      ) : null}\n\n      <h2>\n        Say Something<div className=\"line\"></div>\n      </h2>\n\n      <form\n        className=\"publish-content-form\"\n        onSubmit={onSubmit}\n        onReset={onDiscard}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\"\n          }}\n        >\n          <div className=\"publish-content-title\">\n            <label htmlFor=\"title\">\n              <strong>Title</strong>\n            </label>\n          </div>\n          <div>\n            <strong>\n              Audience:{\" \"}\n              <i\n                className={`fas ${\n                  postType === \"public\" ? \"fa-globe-europe\" : \"fa-credit-card\"\n                }`}\n              ></i>\n            </strong>\n            <select\n              name=\"postType\"\n              id=\"postType\"\n              onChange={onInputChange}\n              style={{\n                appearance: \"none\",\n                backgroundColor: \"rgba(0,0,0,0)\",\n                color: \"var(--main-blue)\",\n                marginLeft: \"0.3rem\"\n              }}\n            >\n              <option\n                value=\"public\"\n                style={{\n                  backgroundColor: \"rgba(0,0,0,0)\",\n                  color: \"var(--main-blue)\"\n                }}\n              >\n                Public\n              </option>\n              <option value=\"private\">Paywall</option>\n            </select>\n          </div>\n        </div>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"How I monetized my content with ShockWallet\"\n          value={title}\n          onChange={onInputChange}\n          className={c(\"input-field\", titleMissing && \"input-field-error\")}\n        />\n        <div className=\"publish-content-title\">\n          <label htmlFor=\"contents\">\n            <strong>Contents</strong>\n          </label>\n        </div>\n\n        <div\n          className={\n            mediaPreviews.length > 0\n              ? gStyles.displayNone\n              : \"publish-content-icons\"\n          }\n        >\n          <i\n            className=\"fas fa-images publish-content-icon\"\n            onClick={onSelectImageFile}\n          ></i>\n\n          <i\n            className=\"fas fa-video publish-content-icon\"\n            onClick={onSelectVideoFile}\n          ></i>\n        </div>\n\n        <div\n          className={c({\n            [c(\"publish-content-preview\", gStyles.commonMarginHNegative)]:\n              mediaPreviews.length > 0,\n            [gStyles.displayNone]: mediaPreviews.length === 0\n          })}\n        >\n          {mediaPreviews.length > 0 &&\n            mediaPreviews.map((prev, i) => {\n              if (prev.type === \"image\") {\n                return (\n                  <img\n                    alt={`Media preview ${i + 1}`}\n                    src={prev.uri}\n                    key={prev.index.toString()}\n                    width={288}\n                    className=\"m-1\"\n                  ></img>\n                );\n              }\n              if (prev.type === \"video\") {\n                return (\n                  <video\n                    src={prev.uri}\n                    key={prev.index.toString()}\n                    controls\n                    width={288}\n                    className=\"m-1\"\n                  ></video>\n                );\n              }\n\n              console.error(\n                `Unknown type of preview --| ${prev.type} |-- found inside <PublishContentPage />`\n              );\n              return null;\n            })}\n\n          <div\n            className=\"remove-btn\"\n            onClick={useCallback(() => {\n              setSelectedFiles([]);\n              setMediaPreviews([]);\n            }, [])}\n          >\n            <i className=\"far fa-trash-alt\" />\n          </div>\n        </div>\n        <div className=\"publish-content-title\">\n          <label htmlFor=\"description\">\n            <strong>Description</strong>\n          </label>\n        </div>\n        <textarea\n          name=\"description\"\n          placeholder=\"I made a quick video to show you guys how easy it is to run your own social platform on ShockWallet, and start earning Bitcoin\"\n          rows={3}\n          value={description}\n          onChange={onInputChange}\n          className=\"input-field\"\n        />\n\n        {error ? <p className=\"error-container\">{error}</p> : null}\n        <div className=\"flex-center\">\n          <input type=\"reset\" value=\"Reset\" className=\"shock-form-button m-1\" />\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            className=\"shock-form-button-confirm m-1\"\n          />\n        </div>\n      </form>\n      {promptInfo && (\n        <Modal modalOpen={promptInfo && !loading} toggleModal={closePrompt}>\n          <div style={{ padding: \"1rem\" }}>\n            <p>\n              The service from the default service provider will cost:{\" \"}\n              <strong>{promptInfo.servicePrice} sats</strong>\n            </p>\n\n            <button className=\"shock-form-button m-1\" onClick={onDiscard}>\n              cancel\n            </button>\n            <button\n              className=\"shock-form-button-confirm m-1\"\n              onClick={submitPrompt}\n            >\n              confirm\n            </button>\n          </div>\n        </Modal>\n      )}\n\n      <input\n        type=\"file\"\n        id=\"file\"\n        ref={imageFile}\n        className={gStyles.displayNone}\n        accept=\"image/*\"\n        onChange={onSelectedFile}\n      />\n      <input\n        type=\"file\"\n        id=\"file\"\n        ref={videoFile}\n        className={gStyles.displayNone}\n        accept=\"video/*\"\n        onChange={onSelectedFile}\n      />\n    </DarkPage>\n  );\n};\n\nexport default PublishContentPage;\n"],"sourceRoot":""}