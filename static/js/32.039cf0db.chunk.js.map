{"version":3,"sources":["pages/Profile/publishContent.tsx"],"names":["PublishContentPage","dispatch","useDispatch","history","useHistory","seedProviderPub","Store","content","seedInfo","seedUrl","seedToken","availableTokens","userProfiles","useState","error","setError","loading","setLoading","mediaPreviews","setMediaPreviews","title","setTitle","titleMissing","setTitleMissing","description","setDescription","postType","setPostType","imageFile","useRef","videoFile","promptInfo","setPromptInfo","selectedFiles","setSelectedFiles","onSubmitCb","useCallback","servicePrice","serviceID","a","console","log","length","res","RequestToken","finalSeedUrl","tokens","deleteToken","formData","FormData","Array","from","forEach","file","append","fetch","method","headers","Authorization","body","json","resJson","message","err","removeUnavailableToken","torrent","data","magnet","firstFile","type","contentItem","magnetURI","width","height","addPublishedContent","published","replace","text","then","txt","catch","e","errorMessage","closePrompt","submitPrompt","onSubmit","preventDefault","availableToken","key","Object","prototype","hasOwnProperty","call","SeedServiceProvided","Http","get","service","onDiscard","onInputChange","target","value","name","onSelectedFile","files","promises","map","index","Promise","reader","FileReader","onload","startsWith","uri","result","readAsDataURL","allSettled","previews","singleRes","status","push","onSelectImageFile","current","click","onSelectVideoFile","padding","pageTitle","scrolls","overlay","fullScreen","className","onReset","style","display","alignItems","justifyContent","htmlFor","id","onChange","appearance","backgroundColor","color","marginLeft","placeholder","c","gStyles","onClick","prev","i","alt","src","toString","controls","rows","modalOpen","toggleModal","ref","accept"],"mappings":"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","file":"static/js/32.039cf0db.chunk.js","sourcesContent":["import { useCallback, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport c from \"classnames\";\n\nimport \"./css/index.scoped.css\";\n\nimport Loader from \"../../common/Loader\";\nimport Http from \"../../utils/Http\";\nimport {\n  addPublishedContent,\n  removeUnavailableToken\n} from \"../../actions/ContentActions\";\nimport { RequestToken } from \"../../utils/seed\";\nimport { useHistory } from \"react-router\";\nimport * as Store from \"../../store\";\nimport Modal from \"../../common/Modal\";\nimport DarkPage from \"../../common/DarkPage\";\nimport * as gStyles from \"../../styles\";\n\nconst PublishContentPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const seedProviderPub = Store.useSelector(\n    ({ content }) => content.seedProviderPub\n  );\n  const { seedUrl, seedToken } = Store.useSelector(\n    ({ content }) => content.seedInfo\n  );\n  const availableTokens = Store.useSelector(\n    ({ content }) => content.availableTokens\n  );\n  const userProfiles = Store.useSelector(({ userProfiles }) => userProfiles);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [mediaPreviews, setMediaPreviews] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [titleMissing, setTitleMissing] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [postType, setPostType] = useState(\"public\");\n  const imageFile = useRef(null);\n  const videoFile = useRef(null);\n  const [promptInfo, setPromptInfo] = useState(null);\n\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const onSubmitCb = useCallback(\n    async (servicePrice?, serviceID?) => {\n      console.log([title, description, selectedFiles]);\n      if (!title) {\n        setError(\"Please input a title\");\n        setTitleMissing(true);\n        return;\n      }\n      if (selectedFiles.length === 0) {\n        setError(\"No selected files\");\n        return;\n      }\n      setLoading(true);\n      let res: Response | null = null;\n      try {\n        const {\n          seedUrl: finalSeedUrl,\n          tokens,\n          deleteToken\n        } = await RequestToken({\n          availableTokens,\n          seedProviderPub,\n          seedToken,\n          seedUrl,\n          serviceID,\n          servicePrice\n        });\n        const formData = new FormData();\n        //TODO support public/private content by requesting two tokens and doing this req twice\n        Array.from(selectedFiles).forEach(file =>\n          formData.append(\"files\", file)\n        );\n        formData.append(\"info\", \"extraInfo\");\n        formData.append(\"comment\", \"comment\");\n        res = await fetch(`${finalSeedUrl}/api/put_file`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${tokens[0]}`\n          },\n          body: formData\n        });\n        const resJson = await res.json();\n        console.log(resJson);\n        if (resJson.error && resJson.error.message) {\n          const err = resJson.error.message;\n          if (err === \"The provided token has already been used\") {\n            setError(\"An error occurred, please try again\");\n            removeUnavailableToken(finalSeedUrl, tokens[0])(dispatch);\n          } else {\n            setError(err);\n          }\n          setLoading(false);\n          return;\n        }\n        const { torrent } = resJson.data;\n        const { magnet } = torrent;\n        const [firstFile] = mediaPreviews;\n        console.log(firstFile);\n        let type = \"image/embedded\";\n        if (firstFile.type === \"video\") {\n          type = \"video/embedded\";\n        }\n        const contentItem = {\n          type,\n          magnetURI: magnet,\n          width: 0,\n          height: 0,\n          title,\n          description\n        };\n        const published = await addPublishedContent(contentItem)(dispatch);\n        console.log(\"content publish complete\");\n        console.log(published);\n        setLoading(false);\n        if (deleteToken) {\n          removeUnavailableToken(finalSeedUrl, tokens[0])(dispatch);\n        }\n        history.replace(\"/profile\");\n      } catch (err) {\n        console.error(err);\n        if (res) {\n          res\n            .text()\n            .then(txt => {\n              console.error(`Response data as text: `, txt);\n            })\n            .catch(e => {\n              console.error(`Could not process bad response data as text: `, e);\n            });\n        }\n        setError(err?.errorMessage ?? err?.message);\n        setLoading(false);\n      }\n    },\n    [\n      title,\n      description,\n      selectedFiles,\n      mediaPreviews,\n      availableTokens,\n      seedUrl,\n      seedToken,\n      history,\n      dispatch,\n      setError,\n      seedProviderPub\n    ]\n  );\n\n  const closePrompt = useCallback(() => {\n    setPromptInfo(null);\n  }, [setPromptInfo]);\n  const submitPrompt = useCallback(() => {\n    const { servicePrice, serviceID } = promptInfo;\n    onSubmitCb(servicePrice, serviceID);\n    setPromptInfo(null);\n  }, [promptInfo, onSubmitCb, setPromptInfo]);\n\n  const onSubmit = useCallback(\n    async e => {\n      e.preventDefault();\n      let availableToken = false;\n      for (const key in availableTokens) {\n        if (Object.prototype.hasOwnProperty.call(availableTokens, key)) {\n          const element = availableTokens[key];\n          if (element[0]) {\n            availableToken = true;\n            break;\n          }\n        }\n      }\n      let serviceID = \"\";\n      if (userProfiles[seedProviderPub]) {\n        //@ts-expect-error\n        serviceID = userProfiles[seedProviderPub].SeedServiceProvided;\n      }\n      if (availableToken || (seedUrl && seedToken)) {\n        onSubmitCb();\n      } else if (serviceID && seedProviderPub) {\n        const { data: service } = await Http.get(\n          `/api/gun/otheruser/${seedProviderPub}/load/offeredServices>${serviceID}`\n        );\n        const { servicePrice } = service.data;\n        console.log(service);\n        setPromptInfo({ servicePrice, serviceID });\n      } else {\n        setError(\"No way found to publish content\");\n      }\n    },\n    [\n      availableTokens,\n      setPromptInfo,\n      setError,\n      onSubmitCb,\n      userProfiles,\n      seedProviderPub,\n      seedToken,\n      seedUrl\n    ]\n  );\n\n  const onDiscard = useCallback(\n    async e => {\n      e.preventDefault();\n      setTitle(\"\");\n      setTitleMissing(false);\n      setDescription(\"\");\n      setError(null);\n      setPromptInfo(null);\n      setSelectedFiles([]);\n      setMediaPreviews([]);\n    },\n    [\n      setDescription,\n      setTitle,\n      setError,\n      setPromptInfo,\n      setSelectedFiles,\n      setMediaPreviews\n    ]\n  );\n  const onInputChange = useCallback(\n    e => {\n      const { value, name } = e.target;\n      //e.preventDefault()\n      switch (name) {\n        case \"title\": {\n          setTitleMissing(false);\n          setTitle(value);\n          return;\n        }\n        case \"description\": {\n          setDescription(value);\n          return;\n        }\n        case \"postType\": {\n          setPostType(value);\n          return;\n        }\n        case \"createPost\": {\n          console.log(\"create post\");\n          return;\n        }\n        default:\n          return;\n      }\n    },\n    [setTitle, setDescription]\n  );\n  const onSelectedFile = useCallback(\n    e => {\n      e.preventDefault();\n\n      console.log(e.target.files);\n      setSelectedFiles(e.target.files);\n      const promises = Array.from(e.target.files).map((file, index) => {\n        console.log(\"doing file...\");\n        return new Promise(res => {\n          //@ts-expect-error\n          const { type } = file;\n          const reader = new FileReader();\n\n          reader.onload = function (e) {\n            if (type.startsWith(\"image/\")) {\n              res({ type: \"image\", uri: e.target.result, index });\n            }\n            if (type.startsWith(\"video/\")) {\n              res({ type: \"video\", uri: e.target.result, index });\n            }\n          };\n          //@ts-expect-error\n          reader.readAsDataURL(file);\n        });\n      });\n      Promise.allSettled(promises).then(res => {\n        const previews = [];\n        res.forEach(singleRes => {\n          if (singleRes.status === \"fulfilled\") {\n            previews.push(singleRes.value);\n          }\n        });\n        console.log(previews);\n        setMediaPreviews(previews);\n      });\n    },\n    [setSelectedFiles, setMediaPreviews]\n  );\n  const onSelectImageFile = useCallback(\n    e => {\n      e.preventDefault();\n      //imageFile.current.onChange =\n      imageFile.current.click();\n    },\n    [imageFile]\n  );\n  const onSelectVideoFile = useCallback(\n    e => {\n      e.preventDefault();\n      videoFile.current.click();\n    },\n    [videoFile]\n  );\n  return (\n    <DarkPage padding pageTitle=\"PUBLISH CONTENT\" scrolls>\n      {loading ? (\n        <Loader overlay fullScreen text=\"Publishing content...\" />\n      ) : null}\n\n      <h2>\n        Say Something<div className=\"line\"></div>\n      </h2>\n\n      <form\n        className=\"publish-content-form\"\n        onSubmit={onSubmit}\n        onReset={onDiscard}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\"\n          }}\n        >\n          <div className=\"publish-content-title\">\n            <label htmlFor=\"title\">\n              <strong>Title</strong>\n            </label>\n          </div>\n          <div>\n            <strong>\n              Audience:{\" \"}\n              <i\n                className={`fas ${\n                  postType === \"public\" ? \"fa-globe-europe\" : \"fa-credit-card\"\n                }`}\n              ></i>\n            </strong>\n            <select\n              name=\"postType\"\n              id=\"postType\"\n              onChange={onInputChange}\n              style={{\n                appearance: \"none\",\n                backgroundColor: \"rgba(0,0,0,0)\",\n                color: \"var(--main-blue)\",\n                marginLeft: \"0.3rem\"\n              }}\n            >\n              <option\n                value=\"public\"\n                style={{\n                  backgroundColor: \"rgba(0,0,0,0)\",\n                  color: \"var(--main-blue)\"\n                }}\n              >\n                Public\n              </option>\n              <option value=\"private\">Paywall</option>\n            </select>\n          </div>\n        </div>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"How I monetized my content with ShockWallet\"\n          value={title}\n          onChange={onInputChange}\n          className={c(\"input-field\", titleMissing && \"input-field-error\")}\n        />\n        <div className=\"publish-content-title\">\n          <label htmlFor=\"contents\">\n            <strong>Contents</strong>\n          </label>\n        </div>\n\n        <div\n          className={\n            mediaPreviews.length > 0\n              ? gStyles.displayNone\n              : \"publish-content-icons\"\n          }\n        >\n          <i\n            className=\"fas fa-images publish-content-icon\"\n            onClick={onSelectImageFile}\n          ></i>\n\n          <i\n            className=\"fas fa-video publish-content-icon\"\n            onClick={onSelectVideoFile}\n          ></i>\n        </div>\n\n        <div\n          className={c({\n            [c(\"publish-content-preview\", gStyles.commonMarginHNegative)]:\n              mediaPreviews.length > 0,\n            [gStyles.displayNone]: mediaPreviews.length === 0\n          })}\n        >\n          {mediaPreviews.length > 0 &&\n            mediaPreviews.map((prev, i) => {\n              if (prev.type === \"image\") {\n                return (\n                  <img\n                    alt={`Media preview ${i + 1}`}\n                    src={prev.uri}\n                    key={prev.index.toString()}\n                    width={288}\n                    className=\"m-1\"\n                  ></img>\n                );\n              }\n              if (prev.type === \"video\") {\n                return (\n                  <video\n                    src={prev.uri}\n                    key={prev.index.toString()}\n                    controls\n                    width={288}\n                    className=\"m-1\"\n                  ></video>\n                );\n              }\n\n              console.error(\n                `Unknown type of preview --| ${prev.type} |-- found inside <PublishContentPage />`\n              );\n              return null;\n            })}\n\n          <div\n            className=\"remove-btn\"\n            onClick={useCallback(() => {\n              setSelectedFiles([]);\n              setMediaPreviews([]);\n            }, [])}\n          >\n            <i className=\"far fa-trash-alt\" />\n          </div>\n        </div>\n        <div className=\"publish-content-title\">\n          <label htmlFor=\"description\">\n            <strong>Description</strong>\n          </label>\n        </div>\n        <textarea\n          name=\"description\"\n          placeholder=\"I made a quick video to show you guys how easy it is to run your own social platform on ShockWallet, and start earning Bitcoin\"\n          rows={3}\n          value={description}\n          onChange={onInputChange}\n          className=\"input-field\"\n        />\n\n        {error ? <p className=\"error-container\">{error}</p> : null}\n        <div className=\"flex-center\">\n          <input type=\"reset\" value=\"Reset\" className=\"shock-form-button m-1\" />\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            className=\"shock-form-button-confirm m-1\"\n          />\n        </div>\n      </form>\n      {promptInfo && (\n        <Modal modalOpen={promptInfo && !loading} toggleModal={closePrompt}>\n          <div style={{ padding: \"1rem\" }}>\n            <p>\n              The service from the default service provider will cost:{\" \"}\n              <strong>{promptInfo.servicePrice} sats</strong>\n            </p>\n\n            <button className=\"shock-form-button m-1\" onClick={onDiscard}>\n              cancel\n            </button>\n            <button\n              className=\"shock-form-button-confirm m-1\"\n              onClick={submitPrompt}\n            >\n              confirm\n            </button>\n          </div>\n        </Modal>\n      )}\n\n      <input\n        type=\"file\"\n        id=\"file\"\n        ref={imageFile}\n        className={gStyles.displayNone}\n        accept=\"image/*\"\n        onChange={onSelectedFile}\n      />\n      <input\n        type=\"file\"\n        id=\"file\"\n        ref={videoFile}\n        className={gStyles.displayNone}\n        accept=\"video/*\"\n        onChange={onSelectedFile}\n      />\n    </DarkPage>\n  );\n};\n\nexport default PublishContentPage;\n"],"sourceRoot":""}