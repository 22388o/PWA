{"version":3,"sources":["common/Modal/components/ModalContent/index.js","common/Modal/components/ModalTitle/index.js","common/Modal/index.js","common/InputGroup/index.js","common/BottomBar/index.js","common/AddBtn/index.js","common/Modal/components/ModalSubmit/index.js","pages/Feed/components/SendTipModal/index.js","pages/Feed/components/ShareModal/index.js","pages/Feed/components/UnlockModal/index.js","common/TipModal/index.tsx"],"names":["ModalContent","children","style","contentClass","className","classNames","ModalTitle","title","toggleModal","Utils","forceRenderTitleBar","hideXBtn","onClick","OVERLAY_STYLE","borderRadius","Modal","modalOpen","modalTitle","contentStyle","disableBackdropClose","noFullWidth","blueBtn","disableBlueBtn","onClickBlueBtn","redBtn","disableRedBtn","onClickRedBtn","error","textIfLoading","closeModal","useCallback","handleBackdropClick","modal","open","container","Loader","overlay","text","disabled","InputGroup","label","name","onChange","inputAction","actionIcon","value","inputMode","type","element","small","group","fas","BottomBar","useSelector","auth","authenticated","to","activeClassName","AddBtn","icon","iconURL","undefined","nestedMode","large","relative","useState","optionsOpen","setOptionsOpen","toggleOptionsOpen","iconElement","useMemo","src","alt","labelElement","ModalSubmit","SendTipModal","tipData","toggleOpen","dispatch","useDispatch","setError","loading","setLoading","amount","setAmount","tipSuccess","setTipSuccess","onInputChange","e","target","submitTip","a","preventDefault","sendTipPost","publicKey","postId","postID","console","errorMessage","message","responseError","response","data","useEffect","onSubmit","ShareModal","shareData","success","setSuccess","submitShare","id","sharedPostRaw","originalAuthor","shareDate","Date","now","Http","post","path","ok","close","UnlockModal","unlockData","unlockSuccess","setUnlockSuccess","submitUnlock","unlockContent","TipModalContent","React","lazy","GuestTipModal","props","loader","margin","resetPaymentResponse","fallback"],"mappings":"gLAUeA,EANM,SAAC,GAAD,QAAGC,gBAAH,MAAc,KAAd,MAAoBC,aAApB,MAA4B,GAA5B,MAAgCC,oBAAhC,MAA+C,GAA/C,SACnB,qBAAKC,UAAWC,IAAW,UAAWF,GAAeD,MAAOA,EAA5D,8BACGD,KCeUK,G,OAjBI,SAAC,GAAD,QACjBC,aADiB,MACT,GADS,MAEjBC,mBAFiB,MAEHC,IAFG,MAGjBC,2BAHiB,aAIjBC,gBAJiB,gBAMjBJ,GAASG,EACP,sBAAKN,UAAU,OAAf,+BACE,mBAAGA,UAAU,aAAb,8BAA2BG,KACzBI,GACA,qBAAKP,UAAU,aAAaQ,QAASJ,EAArC,8BACE,mBAAGJ,UAAU,eAAb,4BAIJ,OC4EAS,G,OAAgB,CACpBC,aAAc,SAGDC,IAxFD,SAAC,GAmBR,IAAD,IAlBJC,iBAkBI,SAjBJR,EAiBI,EAjBJA,YAiBI,IAhBJS,kBAgBI,MAhBS,GAgBT,EAfJhB,EAeI,EAfJA,SAeI,IAdJiB,oBAcI,MAdWT,IAcX,MAbJU,4BAaI,aAZJT,2BAYI,aAXJC,gBAWI,aAVJS,mBAUI,aATJC,eASI,MATM,GASN,MARJC,sBAQI,aAPJC,sBAOI,MAPad,IAOb,MANJe,cAMI,MANK,GAML,MALJC,qBAKI,aAJJC,qBAII,MAJYjB,IAIZ,MAHJN,oBAGI,MAHW,GAGX,MAFJwB,aAEI,MAFI,GAEJ,MADJC,qBACI,MADY,GACZ,EACEC,EAAaC,uBAAY,WAC7BtB,MACC,CAACA,IACEuB,EAAsBD,uBAAY,WACjCX,GACHX,MAED,CAACW,EAAsBX,IAC1B,OACE,sBAAKJ,UAAWC,IAAW,CAAE2B,OAAO,EAAMC,KAAMjB,IAAhD,+BACE,qBAAKZ,UAAU,WAAWQ,QAASmB,EAAnC,uBACA,sBACE3B,UAAWC,IAAW,CACpB6B,WAAW,EACX,0BAA2Bd,IAH/B,+BAMGQ,GACC,cAACO,EAAA,EAAD,CAAQC,SAAO,EAAClC,MAAOW,EAAewB,KAAMT,EAA5C,uBAGF,cAAC,EAAD,CACErB,MAAOU,EACPT,YAAaqB,EACbnB,oBAAqBA,EACrBC,SAAUA,EAJZ,uBAOCgB,GAAS,qBAAKvB,UAAW,+BAAhB,8BAAiDuB,IAE3D,cAAC,EAAD,CAAczB,MAAOgB,EAAcf,aAAcA,EAAjD,8BACuB,kBAAbF,EACN,mBAAGG,UAAU,oBAAb,8BAAkCH,IAElCA,IAIJ,sBAAKG,UAAU,gBAAf,+BACGiB,GACC,wBACEiB,SAAUhB,EACVlB,UAAWC,IAAW,YAAa,YACnCO,QAASW,EAHX,8BAKGF,IAIJG,GACC,wBACEc,SAAUb,EACVrB,UAAWC,IAAW,YAAa,WACnCO,QAASc,EAHX,8BAKGF,e,4FCdAe,IAjEI,SAAC,GAYb,IAAD,IAXJC,aAWI,MAXI,GAWJ,MAVJC,YAUI,MAVG,GAUH,EATJC,EASI,EATJA,SASI,IARJC,mBAQI,MARUlC,IAQV,MAPJmC,kBAOI,MAPS,GAOT,EANJC,EAMI,EANJA,MAMI,IALJC,iBAKI,MAL0D,OAK1D,MAJJC,YAII,MAJG,OAIH,MAHJC,eAGI,MAHM,QAGN,MAFJC,aAEI,aADJX,gBACI,SACJ,OACE,sBACElC,UAAWC,IAAW,CACpB6C,OAAO,EACP,iBAAkBZ,EAClB,cAAeW,IAJnB,+BAOGT,EAAQ,mBAAGpC,UAAU,cAAb,8BAA4BoC,IAAa,KAClD,sBACEpC,UAAWC,IAAW,CACpB,yBAAyB,EACzB,iCAA8C,aAAZ2C,IAHtC,+BAMe,aAAZA,EACC,0BACE5C,UAAU,mCACVqC,KAAMA,EACNC,SAAUA,EACVI,UAAWA,EACXD,MAAOA,EACPP,SAAUA,EANZ,uBASA,uBACElC,UAAU,cACV2C,KAAMA,EACNN,KAAMA,EACNC,SAAUA,EACVI,UAAWA,EACXD,MAAOA,EACPP,SAAUA,EAPZ,uBAUDK,GAAeC,EACd,qBAAKxC,UAAU,qBAAqBQ,QAAS+B,EAA7C,8BACE,mBACEvC,UAAWC,IAAW,aACpB,2BAA2B,EAC3B8C,KAAK,GACJP,GAAa,IAEhBhC,QAAS+B,EANX,yBASA,a,yHClEZ,2BA4CeS,IAzCG,WAGhB,OAFsBC,uBAAY,qBAAGC,KAAgBC,iBAOnD,sBAAKnD,UAAU,uBAAf,UACE,cAAC,IAAD,CACEA,UAAU,iBACVoD,GAAG,YACHC,gBAAgB,iBAHlB,SAKE,mBAAGrD,UAAU,2CAEf,cAAC,IAAD,CACEA,UAAU,iBACVoD,GAAG,QACHC,gBAAgB,iBAHlB,SAKE,mBAAGrD,UAAU,yCAEf,cAAC,IAAD,CACEA,UAAU,iBACVoD,GAAG,WACHC,gBAAgB,iBAHlB,SAKE,mBAAGrD,UAAU,4CAEf,cAAC,IAAD,CACEA,UAAU,iBACVoD,GAAG,QACHC,gBAAgB,iBAHlB,SAKE,mBAAGrD,UAAU,4CA/BV,O,qFCuEIsD,IA1EA,SAAC,GAWT,IAAD,IAVJlB,aAUI,MAVI,KAUJ,MATJmB,YASI,MATG,KASH,MARJC,eAQI,MARM,KAQN,MAPJhD,eAOI,WAPMiD,EAON,MANJC,kBAMI,aALJC,aAKI,aAJJd,aAII,aAHJe,gBAGI,aAFJ/D,gBAEI,MAFO,KAEP,MADJC,aACI,MADI,GACJ,IACkC+D,oBAAS,GAD3C,mBACGC,EADH,KACgBC,EADhB,KAEEC,EAAoBtC,uBAAY,WAChCgC,GACFK,GAAgBD,KAEjB,CAACA,EAAaJ,IAEXO,EAAcC,mBAAQ,WAC1B,OAAIV,EACK,qBAAKW,IAAKX,EAASxD,UAAU,eAAeoE,IAAI,GAAhD,uBAGF,mBAAGpE,UAAS,wBAAYuD,QAAZ,IAAYA,IAAQ,QAAhC,yBACN,CAACA,EAAMC,IAEJa,EAAeH,mBAAQ,WAC3B,OAAI9B,EACK,mBAAGpC,UAAU,gBAAb,8BAA8BoC,IAGhC,OACN,CAACA,IAEJ,OACE,sBACEpC,UAAWC,IAAW,CACpB,qBAAqB,EACrB,2BAA4BmC,EAC5B,gBAAiBuB,EACjB,gBAAiBd,IALrB,+BAQE,sBACE7C,UAAWC,IAAW,CACpB,WAAW,EACX,iBAAkBmC,EAClB,qBAAsBA,EACtB,mBAAoBwB,EACpB,eAAgBE,EAChB,iBAAkBJ,IAEpBlD,QAAO,OAAEA,QAAF,IAAEA,IAAWwD,EACpBlE,MAAOA,EAVT,+BAYGmE,EACAI,KAGFxE,EACC,qBACEG,UAAWC,IAAW,CACpB,mBAAmB,EACnB,uBAAwB6D,IAH5B,8BAMGjE,IAED,U,uDCzEV,kBAUeyE,IARK,SAAC,GAAkC,IAAD,IAA/BrC,YAA+B,MAAxB,SAAwB,EAAdzB,EAAc,EAAdA,QACtC,OACE,qBAAKR,UAAU,aAAaQ,QAASA,EAArC,8BACE,iDAAIyB,Q,6KC6FKsC,IAxFM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACzBC,EAAWC,cACXxB,EAAgBF,uBAAY,qBAAGC,KAAgBC,iBAFL,EAGtBU,mBAAS,IAHa,mBAGzCtC,EAHyC,KAGlCqD,EAHkC,OAIlBf,oBAAS,GAJS,mBAIzCgB,EAJyC,KAIhCC,EAJgC,OAKpBjB,mBAAS,IALW,mBAKzCkB,EALyC,KAKjCC,EALiC,OAMZnB,oBAAS,GANG,mBAMzCoB,EANyC,KAM7BC,EAN6B,KAQ1CC,EAAgBzD,uBAAY,SAAA0D,GACV,WAAlBA,EAAEC,OAAOhD,MACX2C,EAAUI,EAAEC,OAAO5C,SAEpB,IAEG6C,EAAY5D,sBAAW,uCAC3B,WAAM0D,GAAN,qBAAAG,EAAA,yDACEH,EAAEI,kBACEX,EAFN,iEAMIC,GAAW,GANf,SAOUJ,EACJe,YAAY,CACVV,SACAW,UAAWlB,EAAQkB,UACnBC,OAAQnB,EAAQoB,UAXxB,OAcIV,GAAc,GAdlB,kDAgBIW,QAAQtE,MAAR,MACIiD,IACIsB,EAAe,KAAIC,QACnBC,EAFK,UAEW,KAAIC,gBAFf,iBAEW,EAAcC,YAFzB,aAEW,EAAoBJ,aAC1ClB,EAAQ,OAACoB,QAAD,IAACA,IAAiBF,IApBhC,yBAuBIhB,GAAW,GAvBf,6EAD2B,sDA2B3B,CAACJ,EAAUK,EAAQF,EAASL,IAY9B,OARA2B,qBAAU,WACH3B,IACHM,GAAW,GACXF,EAAS,MACTM,GAAc,MAEf,CAACV,IAGF,cAAC,IAAD,CACEpE,YAAaqE,EACb7D,UAAW4D,GAAWrB,EACtBtC,WAAW,WACXG,aAAW,EAJb,8BAMGiE,EACC,sBAAKjF,UAAU,wBAAf,+BACE,mBAAGA,UAAU,uCAAb,uBACA,mBAAGA,UAAU,oBAAb,4DACA,mBAAGA,UAAU,mBAAb,0BAGF,uBAAMA,UAAU,0BAA0BoG,SAAUd,EAApD,+BACG/D,EAAQ,qBAAKvB,UAAU,aAAf,8BAA6BuB,IAAe,KACpDsD,EAAU,cAAC,IAAD,CAAQ7C,SAAO,EAACC,KAAK,iBAArB,uBAA2C,KACtD,mBAAGjC,UAAU,qBAAb,4GAIA,cAAC,IAAD,CACEqC,KAAK,SACLC,SAAU6C,EACV1C,MAAOsC,EACPrC,UAAU,UACVG,OAAK,EALP,uBAOA,cAAC,IAAD,CAAaZ,KAAK,WAAWzB,QAAS8E,EAAtC,8B,oHCDKe,IApFI,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAW7B,EAAiB,EAAjBA,WAAiB,EACtBZ,mBAAS,IADa,mBACzCtC,EADyC,KAClCqD,EADkC,OAElBf,oBAAS,GAFS,mBAEzCgB,EAFyC,KAEhCC,EAFgC,OAGlBjB,oBAAS,GAHS,mBAGzC0C,EAHyC,KAGhCC,EAHgC,KAK1CC,EAAc/E,sBAAW,uCAC7B,WAAM0D,GAAN,qBAAAG,EAAA,yDACEH,EAAEI,kBACCX,EAFL,iEAMIC,GAAW,GACK4B,EAAkBJ,EAA1BV,OAAYF,EAAcY,EAAdZ,UACdiB,EAAgB,CACpBC,eAAgBlB,EAChBmB,UAAWC,KAAKC,OAVtB,SAY2BC,IAAKC,KAAL,eAA0B,CAC/CC,KAAK,qBAAD,OAAuBR,GAC3BjE,MAAOkE,IAdb,kBAYYT,KAICiB,GACPX,GAAW,GAEX5B,EAAS,0BAnBf,kDAsBIiB,QAAQtE,MAAR,MAtBJ,yBAwBIuD,GAAW,GAxBf,6EAD6B,sDA4B7B,CAACwB,EAAUzB,IAGPuC,EAAQ1F,uBAAY,WACxB+C,EAAW,QACV,CAACA,IAWJ,OARA0B,qBAAU,WACHG,IACHxB,GAAW,GACXF,EAAS,MACT4B,GAAW,MAEZ,CAACF,IAGF,cAAC,IAAD,CACElG,YAAaqE,EACb7D,YAAa0F,EACbzF,WAAW,aACXI,QACI4D,GAAYtD,GAAUgF,GACtBA,GAAWhF,IAAU,KADY,QAGrCL,eAAgB2D,EAChB1D,eAAgBoF,GAAWhF,EAAQ6F,EAAQX,EAC3ClG,SAAUgG,EACVvF,aAAW,EAXb,8BAaGuF,EACC,sBAAKvG,UAAU,wBAAf,+BACE,mBAAGA,UAAU,uCAAb,uBACA,mBAAGA,UAAU,oBAAb,+DAGF,uBAAMA,UAAU,0BAA0BoG,SAAUK,EAApD,+BACGlF,EAAQ,mBAAGvB,UAAU,aAAb,8BAA2BuB,IAAa,KAChDA,GAAS,mBAAGvB,UAAU,qBAAb,qDACT6E,EAAU,cAAC,IAAD,CAAQ5C,KAAK,aAAb,uBAA+B,MACxCV,IAAUsD,GACV,mBAAG7E,UAAU,qBAAb,kF,sICEGqH,IAzEK,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAY7C,EAAiB,EAAjBA,WAC3BC,EAAWC,cADiC,EAExBd,mBAAS,IAFe,mBAE3CtC,EAF2C,KAEpCqD,EAFoC,OAGpBf,oBAAS,GAHW,mBAG3CgB,EAH2C,KAGlCC,EAHkC,OAIRjB,oBAAS,GAJD,mBAI3C0D,EAJ2C,KAI5BC,EAJ4B,KAM5CC,EAAe/F,sBAAW,uCAC9B,WAAM0D,GAAN,qBAAAG,EAAA,yDACEH,EAAEI,kBACCX,EAFL,iEAMIC,GAAW,GANf,SAOU4C,YACJ,IACAJ,EAAW5B,UACX4B,EAAW1B,OAHP8B,CAIJhD,GAXN,OAYI8C,GAAiB,GAZrB,kDAcI3B,QAAQtE,MAAR,MACI+F,IACIxB,EAAe,KAAIC,QACnBC,EAFQ,UAEQ,KAAIC,gBAFZ,iBAEQ,EAAcC,YAFtB,aAEQ,EAAoBJ,aAC1ClB,EAAQ,OAACoB,QAAD,IAACA,IAAiBF,IAlBhC,yBAqBIhB,GAAW,GArBf,6EAD8B,sDAyB9B,CAACJ,EAASG,EAASyC,IAYrB,OARAnB,qBAAU,WACHmB,IACHxC,GAAW,GACXF,EAAS,MACT4C,GAAiB,MAElB,CAACF,IAGF,cAAC,IAAD,CACElH,YAAaqE,EACb7D,YAAa0G,EACbzG,WAAW,iBAHb,8BAKG0G,EACC,sBAAKvH,UAAU,oBAAf,+BACE,mBAAGA,UAAU,uCAAb,uBACA,mBAAGA,UAAU,oBAAb,oEAQF,uBAAMA,UAAU,sBAAsBoG,SAAUqB,EAAhD,+BACGlG,EAAQ,qBAAKvB,UAAU,aAAf,8BAA6BuB,IAAe,KACpDsD,EAAU,cAAC,IAAD,CAAQ7C,SAAO,EAACC,KAAK,iBAArB,uBAA2C,KACtD,mBAAGjC,UAAU,iBAAb,uGAGA,cAAC,IAAD,CAAaiC,KAAK,SAASzB,QAASiH,EAApC,8B,6GCpEJE,EAAkBC,IAAMC,MAAK,kBAAM,gEAqC1BC,IAnCO,SAACC,GAIhB,IACGtD,EAAwBsD,EAAxBtD,WAAYD,EAAYuD,EAAZvD,QACdE,EAAWC,cACXxB,EAAgBF,uBAAY,qBAAGC,KAAgBC,iBAE/C6E,EAAS9D,mBACb,kBAAM,cAAC,IAAD,CAAQjC,KAAK,aAAanC,MAAO,CAAEmI,OAAQ,UAA3C,yBACN,IAGIb,EAAQ1F,uBAAY,WACxBgD,EAASwD,eACTzD,MACC,CAACC,EAAUD,IAEd,OAAKD,GAAWrB,EACP,KAIP,sBAAKnD,UAAU,kBAAf,+BACE,qBAAKA,UAAU,gBAAgBQ,QAAS4G,EAAxC,uBACA,qBAAKpH,UAAU,gBAAf,8BACE,cAAC,WAAD,CAAUmI,SAAUH,EAApB,8BACE,cAACL,EAAD,2BAAqBI,GAArB,qC","file":"static/js/7.a023bb5f.chunk.js","sourcesContent":["import classNames from \"classnames\";\n\nimport \"./css/index.scoped.css\";\n\nconst ModalContent = ({ children = null, style = {}, contentClass = \"\" }) => (\n  <div className={classNames(\"content\", contentClass)} style={style}>\n    {children}\n  </div>\n);\n\nexport default ModalContent;\n","import * as Utils from \"../../../../utils\";\n\nimport \"./css/index.scoped.css\";\n\nconst ModalTitle = ({\n  title = \"\",\n  toggleModal = Utils.EMPTY_FN,\n  forceRenderTitleBar = false,\n  hideXBtn = false\n}) =>\n  title || forceRenderTitleBar ? (\n    <div className=\"head\">\n      <p className=\"head-title\">{title}</p>\n      {!hideXBtn && (\n        <div className=\"head-close\" onClick={toggleModal}>\n          <i className=\"fas fa-times\"></i>\n        </div>\n      )}\n    </div>\n  ) : null;\n\nexport default ModalTitle;\n","import { useCallback } from \"react\";\nimport classNames from \"classnames\";\n\nimport * as Utils from \"../../utils\";\nimport Loader from \"../../common/Loader\";\n\nimport ModalContent from \"./components/ModalContent\";\nimport ModalTitle from \"./components/ModalTitle\";\n\nimport \"./css/index.scoped.css\";\n\nconst Modal = ({\n  modalOpen = false,\n  toggleModal,\n  modalTitle = \"\",\n  children,\n  contentStyle = Utils.EMPTY_OBJ,\n  disableBackdropClose = false,\n  forceRenderTitleBar = false,\n  hideXBtn = false,\n  noFullWidth = false,\n  blueBtn = \"\",\n  disableBlueBtn = false,\n  onClickBlueBtn = Utils.EMPTY_FN,\n  redBtn = \"\",\n  disableRedBtn = false,\n  onClickRedBtn = Utils.EMPTY_FN,\n  contentClass = \"\",\n  error = \"\",\n  textIfLoading = \"\"\n}) => {\n  const closeModal = useCallback(() => {\n    toggleModal();\n  }, [toggleModal]);\n  const handleBackdropClick = useCallback(() => {\n    if (!disableBackdropClose) {\n      toggleModal();\n    }\n  }, [disableBackdropClose, toggleModal]);\n  return (\n    <div className={classNames({ modal: true, open: modalOpen })}>\n      <div className=\"backdrop\" onClick={handleBackdropClick} />\n      <div\n        className={classNames({\n          container: true,\n          \"container-no-full-width\": noFullWidth\n        })}\n      >\n        {textIfLoading && (\n          <Loader overlay style={OVERLAY_STYLE} text={textIfLoading} />\n        )}\n\n        <ModalTitle\n          title={modalTitle}\n          toggleModal={closeModal}\n          forceRenderTitleBar={forceRenderTitleBar}\n          hideXBtn={hideXBtn}\n        />\n\n        {error && <div className={\"form-error form-error-margin\"}>{error}</div>}\n\n        <ModalContent style={contentStyle} contentClass={contentClass}>\n          {typeof children === \"string\" ? (\n            <p className=\"text-align-center\">{children}</p>\n          ) : (\n            children\n          )}\n        </ModalContent>\n\n        <div className=\"color-buttons\">\n          {blueBtn && (\n            <button\n              disabled={disableBlueBtn}\n              className={classNames(\"color-btn\", \"blue-btn\")}\n              onClick={onClickBlueBtn}\n            >\n              {blueBtn}\n            </button>\n          )}\n\n          {redBtn && (\n            <button\n              disabled={disableRedBtn}\n              className={classNames(\"color-btn\", \"red-btn\")}\n              onClick={onClickRedBtn}\n            >\n              {redBtn}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst OVERLAY_STYLE = {\n  borderRadius: \"15px\"\n};\n\nexport default Modal;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport * as Utils from \"../../utils\";\n\nimport \"./css/index.scoped.css\";\n\nconst InputGroup = ({\n  label = \"\",\n  name = \"\",\n  onChange,\n  inputAction = Utils.EMPTY_FN,\n  actionIcon = \"\",\n  value,\n  inputMode = /** @type {React.HTMLAttributes['inputMode']} */ (\"text\"),\n  type = \"text\",\n  element = \"input\",\n  small = false,\n  disabled = false\n}) => {\n  return (\n    <div\n      className={classNames({\n        group: true,\n        \"group-disabled\": disabled,\n        \"group-small\": small\n      })}\n    >\n      {label ? <p className=\"group-label\">{label}</p> : null}\n      <div\n        className={classNames({\n          \"group-input-container\": true,\n          \"group-input-textarea-container\": element === \"textarea\"\n        })}\n      >\n        {element === \"textarea\" ? (\n          <textarea\n            className=\"group-input group-input-textarea\"\n            name={name}\n            onChange={onChange}\n            inputMode={inputMode}\n            value={value}\n            disabled={disabled}\n          />\n        ) : (\n          <input\n            className=\"group-input\"\n            type={type}\n            name={name}\n            onChange={onChange}\n            inputMode={inputMode}\n            value={value}\n            disabled={disabled}\n          />\n        )}\n        {inputAction && actionIcon ? (\n          <div className=\"group-input-action\" onClick={inputAction}>\n            <i\n              className={classNames({\n                \"group-input-action-icon\": true,\n                fas: true,\n                [actionIcon]: true\n              })}\n              onClick={inputAction}\n            ></i>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default InputGroup;\n","import { NavLink } from \"react-router-dom\";\nimport { useSelector } from \"../../store\";\n\nconst BottomBar = () => {\n  const authenticated = useSelector(({ auth }) => auth.authenticated);\n\n  if (!authenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"bottom-nav-container\">\n      <NavLink\n        className=\"bottom-nav-btn\"\n        to=\"/overview\"\n        activeClassName=\"active-nav-btn\"\n      >\n        <i className=\"bottom-nav-btn-icon icon-thin-wallet\"></i>\n      </NavLink>\n      <NavLink\n        className=\"bottom-nav-btn\"\n        to=\"/chat\"\n        activeClassName=\"active-nav-btn\"\n      >\n        <i className=\"bottom-nav-btn-icon icon-thin-chat\"></i>\n      </NavLink>\n      <NavLink\n        className=\"bottom-nav-btn\"\n        to=\"/profile\"\n        activeClassName=\"active-nav-btn\"\n      >\n        <i className=\"bottom-nav-btn-icon icon-thin-profile\"></i>\n      </NavLink>\n      <NavLink\n        className=\"bottom-nav-btn\"\n        to=\"/feed\"\n        activeClassName=\"active-nav-btn\"\n      >\n        <i className=\"bottom-nav-btn-icon icon-thin-feed\"></i>\n      </NavLink>\n    </div>\n  );\n};\n\nexport default BottomBar;\n","import { useCallback, useMemo, useState } from \"react\";\nimport classNames from \"classnames\";\nimport \"./css/index.scoped.css\";\n\nconst AddBtn = ({\n  label = null,\n  icon = null,\n  iconURL = null,\n  onClick = undefined,\n  nestedMode = false,\n  large = false,\n  small = false,\n  relative = false,\n  children = null,\n  style = {}\n}) => {\n  const [optionsOpen, setOptionsOpen] = useState(false);\n  const toggleOptionsOpen = useCallback(() => {\n    if (nestedMode) {\n      setOptionsOpen(!optionsOpen);\n    }\n  }, [optionsOpen, nestedMode]);\n\n  const iconElement = useMemo(() => {\n    if (iconURL) {\n      return <img src={iconURL} className=\"add-btn-icon\" alt=\"\" />;\n    }\n\n    return <i className={`fas fa-${icon ?? \"plus\"}`}></i>;\n  }, [icon, iconURL]);\n\n  const labelElement = useMemo(() => {\n    if (label) {\n      return <p className=\"add-btn-label\">{label}</p>;\n    }\n\n    return null;\n  }, [label]);\n\n  return (\n    <div\n      className={classNames({\n        \"add-btn-container\": true,\n        \"add-btn-round-container\": !label,\n        \"add-btn-large\": large,\n        \"add-btn-small\": small\n      })}\n    >\n      <div\n        className={classNames({\n          \"add-btn\": true,\n          \"add-btn-round\": !label,\n          \"add-btn-extended\": !!label,\n          \"add-btn-relative\": relative,\n          \"add-btn-open\": optionsOpen,\n          \"add-btn-nested\": nestedMode\n        })}\n        onClick={onClick ?? toggleOptionsOpen}\n        style={style}\n      >\n        {iconElement}\n        {labelElement}\n      </div>\n\n      {children ? (\n        <div\n          className={classNames({\n            \"add-btn-options\": true,\n            \"add-btn-options-open\": optionsOpen\n          })}\n        >\n          {children}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default AddBtn;\n","import \"./ModalSubmit.scoped.css\";\n\nconst ModalSubmit = ({ text = \"Submit\", onClick }) => {\n  return (\n    <div className=\"submit-btn\" onClick={onClick}>\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default ModalSubmit;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"../../../../store\";\nimport Modal from \"../../../../common/Modal\";\nimport ModalSubmit from \"../../../../common/Modal/components/ModalSubmit\";\nimport InputGroup from \"../../../../common/InputGroup\";\nimport { sendTipPost } from \"../../../../actions/FeedActions\";\nimport Loader from \"../../../../common/Loader\";\nimport \"./css/index.scoped.css\";\n\nconst SendTipModal = ({ tipData, toggleOpen }) => {\n  const dispatch = useDispatch();\n  const authenticated = useSelector(({ auth }) => auth.authenticated);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState(\"\");\n  const [tipSuccess, setTipSuccess] = useState(false);\n\n  const onInputChange = useCallback(e => {\n    if (e.target.name === \"amount\") {\n      setAmount(e.target.value);\n    }\n  }, []);\n\n  const submitTip = useCallback(\n    async e => {\n      e.preventDefault();\n      if (loading) {\n        return;\n      }\n      try {\n        setLoading(true);\n        await dispatch(\n          sendTipPost({\n            amount,\n            publicKey: tipData.publicKey,\n            postId: tipData.postID\n          })\n        );\n        setTipSuccess(true);\n      } catch (err) {\n        console.error(err);\n        if (tipData) {\n          const errorMessage = err.message;\n          const responseError = err.response?.data?.errorMessage;\n          setError(responseError ?? errorMessage);\n        }\n      } finally {\n        setLoading(false);\n      }\n    },\n    [dispatch, amount, loading, tipData]\n  );\n\n  // Reset the modal's state\n  useEffect(() => {\n    if (!tipData) {\n      setLoading(false);\n      setError(null);\n      setTipSuccess(false);\n    }\n  }, [tipData]);\n\n  return (\n    <Modal\n      toggleModal={toggleOpen}\n      modalOpen={tipData && authenticated}\n      modalTitle=\"Send Tip\"\n      noFullWidth\n    >\n      {tipSuccess ? (\n        <div className=\"tip-modal-success m-1\">\n          <i className=\"tip-success-icon fas fa-check-circle\"></i>\n          <p className=\"tip-success-title\">Post tipped successfully!</p>\n          <p className=\"tip-success-desc\"></p>\n        </div>\n      ) : (\n        <form className=\"modal-form tip-form m-1\" onSubmit={submitTip}>\n          {error ? <div className=\"form-error\">{error}</div> : null}\n          {loading ? <Loader overlay text=\"Sending Tip...\" /> : null}\n          <p className=\"tip-modal-desc m-1\">\n            Please specify the amount of sats you'd like to tip this user with\n            below.\n          </p>\n          <InputGroup\n            name=\"amount\"\n            onChange={onInputChange}\n            value={amount}\n            inputMode=\"decimal\"\n            small\n          />\n          <ModalSubmit text=\"SEND TIP\" onClick={submitTip} />\n        </form>\n      )}\n    </Modal>\n  );\n};\n\nexport default SendTipModal;\n","import { useCallback, useEffect, useState } from \"react\";\nimport Modal from \"../../../../common/Modal\";\nimport Loader from \"../../../../common/Loader\";\nimport \"./css/index.scoped.css\";\nimport { Http } from \"../../../../utils\";\n\nconst ShareModal = ({ shareData, toggleOpen }) => {\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  const submitShare = useCallback(\n    async e => {\n      e.preventDefault();\n      if(loading){\n        return\n      }\n      try {\n        setLoading(true);\n        const { postID: id, publicKey } = shareData;\n        const sharedPostRaw = {\n          originalAuthor: publicKey,\n          shareDate: Date.now()\n        };\n        const { data } = await Http.post(`/api/gun/put`, {\n          path: `$user>sharedPosts>${id}`,\n          value: sharedPostRaw\n        });\n        if (data.ok) {\n          setSuccess(true);\n        } else {\n          setError(\"Share operation failed\");\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [shareData,loading]\n  );\n\n  const close = useCallback(() => {\n    toggleOpen(null);\n  }, [toggleOpen]);\n\n  // Reset the modal's state\n  useEffect(() => {\n    if (!shareData) {\n      setLoading(false);\n      setError(null);\n      setSuccess(false);\n    }\n  }, [shareData]);\n\n  return (\n    <Modal\n      toggleModal={toggleOpen}\n      modalOpen={!!shareData}\n      modalTitle=\"Share post\"\n      blueBtn={\n        (!loading && !error && !success && \"SHARE\") ||\n        ((success || error) && \"OK\")\n      }\n      disableBlueBtn={loading}\n      onClickBlueBtn={success || error ? close : submitShare}\n      hideXBtn={success}\n      noFullWidth\n    >\n      {success ? (\n        <div className=\"tip-modal-success m-1\">\n          <i className=\"tip-success-icon fas fa-check-circle\"></i>\n          <p className=\"tip-success-title\">Post shared successfully!</p>\n        </div>\n      ) : (\n        <form className=\"modal-form tip-form m-1\" onSubmit={submitShare}>\n          {error ? <p className=\"form-error\">{error}</p> : null}\n          {error && <p className=\"tip-modal-desc m-1\">You can try again.</p>}\n          {loading ? <Loader text=\"Sharing...\" /> : null}\n          {!error && !loading && (\n            <p className=\"tip-modal-desc m-1\">\n              This post will be shared on your profile\n            </p>\n          )}\n        </form>\n      )}\n    </Modal>\n  );\n};\n\nexport default ShareModal;\n","// @ts-check\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Modal from \"../../../../common/Modal\";\nimport ModalSubmit from \"../../../../common/Modal/components/ModalSubmit\";\nimport { unlockContent } from \"../../../../actions/ContentActions\";\nimport Loader from \"../../../../common/Loader\";\nimport \"./css/index.scoped.css\";\n\nconst UnlockModal = ({ unlockData, toggleOpen }) => {\n  const dispatch = useDispatch();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [unlockSuccess, setUnlockSuccess] = useState(false);\n\n  const submitUnlock = useCallback(\n    async e => {\n      e.preventDefault();\n      if(loading){\n        return\n      }\n      try {\n        setLoading(true);\n        await unlockContent(\n          100,\n          unlockData.publicKey,\n          unlockData.postID\n        )(dispatch);\n        setUnlockSuccess(true);\n      } catch (err) {\n        console.error(err);\n        if (unlockData) {\n          const errorMessage = err.message;\n          const responseError = err.response?.data?.errorMessage;\n          setError(responseError ?? errorMessage);\n        }\n      } finally {\n        setLoading(false);\n      }\n    },\n    [dispatch,loading, unlockData]\n  );\n\n  // Reset the modal's state\n  useEffect(() => {\n    if (!unlockData) {\n      setLoading(false);\n      setError(null);\n      setUnlockSuccess(false);\n    }\n  }, [unlockData]);\n\n  return (\n    <Modal\n      toggleModal={toggleOpen}\n      modalOpen={!!unlockData}\n      modalTitle=\"Unlock content\"\n    >\n      {unlockSuccess ? (\n        <div className=\"tip-modal-success\">\n          <i className=\"tip-success-icon fas fa-check-circle\"></i>\n          <p className=\"tip-success-title\">Content unlocked successfully!</p>\n          {/*<p className=\"tip-success-desc\">\n            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Sunt\n            ratione repudiandae voluptates debitis esse ea ut molestiae\n            praesentium possimus quia\n          </p>*/}\n        </div>\n      ) : (\n        <form className=\"modal-form tip-form\" onSubmit={submitUnlock}>\n          {error ? <div className=\"form-error\">{error}</div> : null}\n          {loading ? <Loader overlay text=\"Sending Tip...\" /> : null}\n          <p className=\"tip-modal-desc\">\n            100 sats will be sent to the owner of the post to unlock the content\n          </p>\n          <ModalSubmit text=\"UNLOCK\" onClick={submitUnlock} />\n        </form>\n      )}\n    </Modal>\n  );\n};\n\nexport default UnlockModal;\n","import React, { Suspense, useCallback, useMemo } from \"react\";\nimport { resetPaymentResponse } from \"../../actions/GuestActions\";\nimport { useSelector } from \"../../store\";\nimport Loader from \"../Loader\";\nimport \"./css/index.scoped.css\";\nimport { useDispatch } from \"react-redux\";\n\nconst TipModalContent = React.lazy(() => import(\"./components/Modal\"));\n\nconst GuestTipModal = (props: {\n  toggleOpen: (data?: any) => void;\n  tipData: any;\n  publicKey: string;\n}) => {\n  const { toggleOpen, tipData } = props;\n  const dispatch = useDispatch();\n  const authenticated = useSelector(({ auth }) => auth.authenticated);\n\n  const loader = useMemo(\n    () => <Loader text=\"Loading...\" style={{ margin: \"40px 0\" }} />,\n    []\n  );\n\n  const close = useCallback(() => {\n    dispatch(resetPaymentResponse());\n    toggleOpen();\n  }, [dispatch, toggleOpen]);\n\n  if (!tipData || authenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal-overlay\" onClick={close}></div>\n      <div className=\"modal-content\">\n        <Suspense fallback={loader}>\n          <TipModalContent {...props} />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default GuestTipModal;\n"],"sourceRoot":""}