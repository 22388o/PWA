{"version":3,"sources":["common/Post/components/Video/index.js","images/share.svg","common/Post/index.tsx"],"names":["Video","id","item","index","postId","tipValue","tipCounter","videoRef","hideRibbon","useRef","useState","playing","setPlaying","observe","useInView","trackVisibility","delay","onEnter","current","play","onLeave","pause","togglePlayingStatus","useCallback","updatedPlaying","console","log","videoHeight","useMemo","CSS","supports","aspectRatio","height","onPause","readyState","className","ref","style","classNames","onClick","data-torrent","magnetURI","data-file-key","alt","data-played","controls","muted","TipRibbon","Post","publicKey","openTipModal","openUnlockModal","openDeleteModal","undefined","openShareModal","_","dispatch","Store","unlockedContent","content","authenticated","auth","useEmblaCarousel","slidesToScroll","align","carouselRef","carouselAPI","author","post","React","tips","Object","values","length","sum","sliderLength","setSliderLength","activeSlide","setActiveSlide","isPrivate","setIsPrivate","isOnlineNode","useEffect","subPostContent","subPostTips","liveStatus","stream","contentItems","find","type","viewersCounter","getMediaContent","entries","filter","forEach","k","e","path","parseContent","key","text","finalMagnetURI","cached","Image","width","Common","playbackMagnet","Stream","nextSlide","canScrollNext","scrollNext","prevSlide","canScrollPrev","scrollPrev","handleUserKeyDown","updateActiveSlide","selectedScrollSnap","on","scrollSnapList","window","addEventListener","removeEventListener","off","tipPost","targetType","postID","unlockPost","deletePost","shared","sharePost","url","location","host","navigator","share","displayName","clipboard","writeText","Tooltip","rebuild","ShockAvatar","Pad","amt","insideRow","to","live","waiting","wasLive","DateTime","fromMillis","date","toRelative","getTextContent","map","Array","from","scrollTo","data-tip","src","ShareIcon","color","marginLeft"],"mappings":"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","file":"static/js/38.d9fa34d7.chunk.js","sourcesContent":["import classNames from \"classnames\";\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nimport useInView from \"react-cool-inview\";\nimport TipRibbon from \"../TipRibbon\";\nimport \"./css/index.scoped.css\";\n\nconst Video = ({\n  id = \"\",\n  item,\n  index = 0,\n  postId = \"\",\n  tipValue = 0,\n  tipCounter = 0,\n  hideRibbon = false\n}) => {\n  const videoRef = useRef(null);\n  const [playing, setPlaying] = useState(false);\n  const { observe } = useInView({\n    trackVisibility: false,\n    delay: 100,\n    onEnter: () => {\n      if (videoRef.current) {\n        setPlaying(true);\n        videoRef.current.play();\n      }\n    },\n    onLeave: () => {\n      if (!videoRef.current) {\n        return;\n      }\n\n      setPlaying(false);\n      videoRef.current.pause();\n    }\n  });\n\n  const togglePlayingStatus = useCallback(() => {\n    const updatedPlaying = !playing;\n    setPlaying(updatedPlaying);\n    if (videoRef.current) {\n      if (!updatedPlaying) {\n        videoRef.current.pause();\n        return;\n      }\n\n      console.log(\"Playing video\", updatedPlaying);\n      videoRef.current.play();\n    }\n  }, [playing]);\n\n  const videoHeight = useMemo(() => {\n    if (CSS.supports(\"aspect-ratio: 16 / 9\")) {\n      return {\n        aspectRatio: \"16 / 9\"\n      };\n    }\n\n    return {\n      height: 400\n    };\n  }, []);\n\n  const onPause = useCallback(() => {\n    if (videoRef.current?.readyState === 4) {\n      setPlaying(false);\n    }\n  }, [videoRef]);\n\n  return (\n    <div className=\"media-container\" ref={observe}>\n      <div className=\"video-container\" style={videoHeight}>\n        <div\n          className={classNames({\n            \"thumbnail-container\": true,\n            \"video-hidden\": playing\n          })}\n          onClick={togglePlayingStatus}\n        >\n          <div className=\"play-btn\">\n            <i className=\"fas fa-play\" />\n          </div>\n          <img\n            className=\"video-thumbnail hidden\"\n            data-torrent={item.magnetURI}\n            data-file-key={index}\n            alt=\"Video thumbnail\"\n          />\n          <video\n            className=\"dynamic-thumbnail hidden\"\n            data-torrent={item.magnetURI}\n            data-file-key={index}\n            data-played=\"false\"\n            controls={false}\n            muted\n          />\n        </div>\n        <video\n          className={classNames({\n            \"torrent-video video-js vjs-default-skin\": true,\n            \"video-hidden\": !playing\n          })}\n          data-torrent={item.magnetURI}\n          data-file-key={index}\n          data-played=\"false\"\n          controls\n          ref={videoRef}\n          muted\n          onPause={onPause}\n        />\n        <TipRibbon tipCounter={tipCounter} tipValue={tipValue} />\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n","export default __webpack_public_path__ + \"static/media/share.8ed36b2d.svg\";","import React, { useEffect, useState, useCallback } from \"react\";\nimport * as Common from \"shock-common\";\nimport { Link } from \"react-router-dom\";\nimport { useEmblaCarousel } from \"embla-carousel/react\";\nimport Tooltip from \"react-tooltip\";\nimport classNames from \"classnames\";\nimport sum from \"lodash/sum\";\nimport { DateTime } from \"luxon\";\n\nimport * as Store from \"../../store\";\nimport ShockAvatar from \"../ShockAvatar\";\nimport Pad from \"../Pad\";\nimport { subPostContent, subPostTips } from \"../../actions/FeedActions\";\n\nimport Video from \"./components/Video\";\nimport Image from \"./components/Image\";\nimport Stream from \"./components/Stream\";\nimport \"./css/index.scoped.css\";\n\nimport ShareIcon from \"../../images/share.svg\";\n\nconst Post = ({\n  id,\n  publicKey,\n  openTipModal,\n  openUnlockModal,\n  openDeleteModal = undefined,\n  openShareModal = _ => {}\n}) => {\n  const dispatch = Store.useDispatch();\n  const unlockedContent = Store.useSelector(\n    ({ content }) => content.unlockedContent\n  );\n  const authenticated = Store.useSelector(({ auth }) => auth.authenticated);\n  const [carouselRef, carouselAPI] = useEmblaCarousel({\n    slidesToScroll: 1,\n    align: \"center\"\n  });\n  const author = Store.useSelector(Store.selectUser(publicKey));\n  const post = Store.useSelector(Store.selectSinglePost(publicKey, id));\n  const [tipCounter, tipValue] = React.useMemo(() => {\n    const tips = Object.values(\n      post.tips ||\n        {} /* cached data from previous app version won't have the tips object */\n    );\n\n    return [tips.length, sum(tips)];\n  }, [post]);\n\n  const [sliderLength, setSliderLength] = useState(0);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [isPrivate, setIsPrivate] = useState(false);\n\n  const isOnlineNode = /*Utils.isOnline(\n    Store.useSelector(Store.selectUser(publicKey)).lastSeenApp\n  );*/ true;\n\n  useEffect(() => {\n    const subscription = dispatch(subPostContent(publicKey, id));\n    return subscription;\n  }, [dispatch, id, publicKey]);\n\n  useEffect(() => {\n    const subscription = dispatch(subPostTips(publicKey, id));\n    return subscription;\n  }, [dispatch, id, publicKey]);\n\n  const liveStatus = React.useMemo<Common.LiveStatus | null>(() => {\n    const stream = Object.values(post.contentItems ?? {}).find(\n      item => item.type === \"stream/embedded\"\n    ) as Common.EmbeddedStream;\n\n    if (stream) {\n      return stream.liveStatus;\n    }\n\n    return null;\n  }, [post.contentItems]);\n\n  const viewersCounter = React.useMemo<number | null>(() => {\n    const stream = Object.values(post.contentItems ?? {}).find(\n      item => item.type === \"stream/embedded\"\n    ) as Common.EmbeddedStream;\n\n    if (stream && stream.liveStatus === \"live\") {\n      return stream.viewersCounter;\n    }\n\n    return null;\n  }, [post.contentItems]);\n\n  const getMediaContent = useCallback(() => {\n    return Object.entries(post.contentItems ?? {}).filter(\n      ([_, item]) => item.type !== \"text/paragraph\"\n    );\n  }, [post.contentItems]);\n\n  const getTextContent = () => {\n    return Object.entries(post.contentItems ?? {}).filter(\n      ([_, item]) => item.type === \"text/paragraph\"\n    );\n  };\n\n  useEffect(() => {\n    getMediaContent().forEach(([k, e]) => {\n      const path = `${publicKey}>posts>${k}`;\n      // @ts-expect-error\n      if (e.isPrivate && !unlockedContent[path]) {\n        setIsPrivate(true);\n      }\n    });\n  }, [getMediaContent, publicKey, unlockedContent]);\n\n  const parseContent = ([key, item]: [string, Common.ContentItem], index) => {\n    if (item.type === \"text/paragraph\") {\n      return <p key={key}>{item.text}</p>;\n    }\n\n    let finalMagnetURI = \"\";\n    if (item.isPrivate) {\n      const path = `${publicKey}>posts>${id}`;\n      const cached = unlockedContent[path];\n      if (cached) {\n        finalMagnetURI = cached;\n      } else {\n        return (\n          <div key={key}>\n            <i className=\"fas fa-lock fa-10x\"></i>\n          </div>\n        );\n      }\n    }\n\n    if (item.type === \"image/embedded\") {\n      return (\n        <Image\n          id={key}\n          item={{\n            ...item,\n            magnetURI: finalMagnetURI || item.magnetURI\n          }}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    if (item.type === \"video/embedded\") {\n      return (\n        <Video\n          id={key}\n          item={{\n            ...item,\n            magnetURI: finalMagnetURI || item.magnetURI\n          }}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n        />\n      );\n    }\n    if (Common.isEmbeddedStream(item)) {\n      if (item.playbackMagnet) {\n        return (\n          <Video\n            id={key}\n            item={{\n              ...item,\n              magnetURI: item.playbackMagnet\n            }}\n            index={index}\n            postId={id}\n            tipCounter={tipCounter}\n            tipValue={tipValue}\n            key={`${id}-${index}`}\n          />\n        );\n      }\n      return (\n        <Stream\n          id={key}\n          item={{\n            ...item,\n            magnetURI: finalMagnetURI || item.magnetURI\n          }}\n          index={index}\n          postId={id}\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          key={`${id}-${index}`}\n          hideRibbon={undefined}\n          width={undefined}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const nextSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollNext()) {\n      carouselAPI.scrollNext();\n    }\n  }, [carouselAPI]);\n\n  const prevSlide = useCallback(() => {\n    if (!carouselAPI) return;\n\n    if (carouselAPI.canScrollPrev()) {\n      carouselAPI.scrollPrev();\n    }\n  }, [carouselAPI]);\n\n  const handleUserKeyDown = useCallback(\n    e => {\n      if (sliderLength === 0) return;\n      const { key } = e;\n\n      if (key === \"ArrowRight\") {\n        nextSlide();\n      }\n\n      if (key === \"ArrowLeft\") {\n        prevSlide();\n      }\n    },\n    [sliderLength, prevSlide, nextSlide]\n  );\n\n  const updateActiveSlide = useCallback(() => {\n    setActiveSlide(carouselAPI.selectedScrollSnap());\n  }, [carouselAPI, setActiveSlide]);\n\n  useEffect(() => {\n    if (!carouselAPI) return;\n\n    carouselAPI.on(\"scroll\", updateActiveSlide);\n    setSliderLength(carouselAPI.scrollSnapList().length);\n    window.addEventListener(\"keydown\", handleUserKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleUserKeyDown);\n      carouselAPI.off(\"scroll\", updateActiveSlide);\n    };\n  }, [carouselAPI, sliderLength, handleUserKeyDown, updateActiveSlide]);\n\n  const tipPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openTipModal({\n      targetType: \"post\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openTipModal, publicKey]);\n\n  const unlockPost = useCallback(() => {\n    if (!isOnlineNode) {\n      return;\n    }\n\n    openUnlockModal({\n      targetType: \"unlock\",\n      postID: id,\n      publicKey\n    });\n  }, [id, isOnlineNode, openUnlockModal, publicKey]);\n\n  const deletePost = useCallback(() => {\n    openDeleteModal({ id, shared: false });\n  }, [id, openDeleteModal]);\n\n  const sharePost = useCallback(() => {\n    if (!authenticated) {\n      const url = `https://${window.location.host}/${publicKey}/post/${id}`;\n\n      if (navigator.share) {\n        navigator.share({\n          text: `Check out ${author.displayName}'s post on Lightning.Page!`,\n          url\n        });\n        return;\n      }\n\n      navigator.clipboard.writeText(url);\n      return;\n    }\n\n    openShareModal({\n      targetType: \"share\",\n      postID: id,\n      publicKey\n    });\n  }, [publicKey, id, openShareModal]);\n\n  useEffect(() => {\n    try {\n      Tooltip.rebuild();\n    } catch (e) {\n      console.log(`Error inside <Post />: `, e);\n    }\n  }, []);\n\n  const readableLiveStatus: Record<Common.LiveStatus, string> = {\n    live: \"Is Live\",\n    waiting: \"Waiting\",\n    wasLive: \"Was Live\"\n  };\n\n  return (\n    <div className=\"post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <ShockAvatar height={50} publicKey={publicKey} />\n\n          <Pad amt={10} insideRow />\n\n          <div className=\"details\">\n            <div className=\"username\">\n              <Link to={`/otherUser/${publicKey}`}>{author.displayName}</Link>\n              {liveStatus && (\n                <p className=\"liveStatus\">\n                  {readableLiveStatus[liveStatus]}\n                  <i\n                    className={`fas fa-circle liveStatusIcon ${\n                      liveStatus === \"live\" ? \"liveIcon\" : \"\"\n                    }`}\n                  ></i>\n                  {liveStatus === \"live\" && (\n                    <span> | {viewersCounter} watching</span>\n                  )}\n                </p>\n              )}\n            </div>\n            <p>{DateTime.fromMillis(post.date).toRelative()}</p>\n          </div>\n        </div>\n        {openDeleteModal && (\n          <i className=\"fas fa-trash trash-icon\" onClick={deletePost}></i>\n        )}\n      </div>\n\n      <div className=\"content\">\n        {getTextContent().map(parseContent)}\n        <div className=\"media-content-carousel\">\n          {sliderLength > 1 ? (\n            <div className=\"media-carousel-controls-container\">\n              <div\n                className=\"media-carousel-arrow fas fa-angle-left\"\n                onClick={prevSlide}\n              ></div>\n              <div className=\"media-carousel-pages\">\n                {Array.from({ length: sliderLength }).map((_, key) => (\n                  <div\n                    // TODO: Get the actual ID here. However posts can't be\n                    // edited so index is stable.\n                    key={key}\n                    className={classNames({\n                      \"media-carousel-page\": true,\n                      \"active-carousel-page\": activeSlide === key\n                    })}\n                    onClick={() => carouselAPI?.scrollTo(key)}\n                  ></div>\n                ))}\n              </div>\n              <div\n                className=\"media-carousel-arrow fas fa-angle-right\"\n                onClick={nextSlide}\n              ></div>\n            </div>\n          ) : null}\n          <div className=\"media-content-root\" ref={carouselRef}>\n            <div className=\"media-content-container\">\n              {getMediaContent().map(parseContent)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"actions\">\n        <div></div>\n        <div\n          className=\"icon-tip-btn\"\n          data-tip={isPrivate ? \"Unlock this post\" : \"Tip this post\"}\n          onClick={isPrivate ? unlockPost : tipPost}\n        >\n          <div className=\"tip-icon icon-thin-feed\"></div>\n        </div>\n        {openShareModal && (\n          <div className=\"icon-tip-btn\" data-tip=\"share\" onClick={sharePost}>\n            <img\n              alt=\"Share this post\"\n              src={ShareIcon}\n              style={{ color: \"#4285b9\", marginLeft: \"auto\" }}\n            />\n          </div>\n        )}\n        {!openShareModal && <div></div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}