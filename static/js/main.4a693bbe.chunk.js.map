{"version":3,"sources":["actions/OrdersActions.js","common/Loader/index.js","utils/Date.ts","utils/index.ts","utils/Http.js","actions/AuthActions.ts","reducers/NodeReducer.js","reducers/AuthReducer.js","reducers/WalletReducer.js","reducers/ChatReducer.js","reducers/DrawerReducer.js","reducers/ContentReducer.js","reducers/FeesReducer.js","reducers/FeedReducer.js","reducers/EncryptionReducer.js","reducers/UserProfilesReducer.js","reducers/OrdersReducer.js","reducers/index.ts","store/Migrations/index.js","store/Migrations/PeerMigration.js","store/sagas/node.ts","store/sagas/_store.ts","store/sagas/ping.ts","store/sagas/index.ts","store/selectors/auth.ts","store/selectors/users.ts","store/index.ts","actions/ChatActions.js","utils/WebSocket.js","utils/JSON.ts","utils/Encryption.ts","actions/WalletActions.js","actions/UserProfilesActions.ts","actions/ContentActions.js","common/Drawer/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js","actions/NodeActions.js","utils/FieldError.ts","actions/FeedActions.js","schema/index.ts","utils/Error.ts","actions/EncryptionActions.js","actions/DrawerActions.js","actions/FeesActions.js","utils/Gun.js","utils/String.js"],"names":["ACTIONS","ADD_MY_SERVICE","REMOVE_MY_SERVICE","ADD_BOUGHT_SERVICE","createService","clear","encrypted","dispatch","a","Http","post","path","value","data","ok","id","all","Object","entries","map","name","console","log","$$__ENCRYPT__FOR","Promise","serviceType","deleteService","subscribeMyServices","hostIP","query","rifleSocketExists","rifle","host","publicKey","reconnect","on","services","servicesEntries","forEach","get","service","type","serviceInfo","disconnectRifleSocket","buyService","owner","serviceID","servicePrice","amt","Number","to","memo","feeLimit","ackInfo","orderAck","JSON","parse","response","Loader","text","fullScreen","small","overlay","overlayBackground","style","height","use100vh","standaloneMode","window","matchMedia","matches","fullScreenStyles","marginBottom","overlayStyles","backgroundColor","className","classNames","useForceUpdate","React","setTick","tick","logger","warn","error","resizeImage","img","desiredLongEdge","compression","canvas","document","createElement","width","Math","round","getContext","drawImage","toDataURL","processImageFile","file","startsWith","TypeError","size","Common","res","rej","reader","FileReader","onload","e","target","result","ArrayBuffer","onFail","Error","stringify","onerror","onabort","readAsArrayBuffer","imageBuffer","url","URL","webkitURL","createObjectURL","Blob","_image","Image","src","image","resizedImage","normalizeURL","_url","__url","_","protocol","href","getContact","contacts","filter","contact","pk","unprotectedRoutes","GET","POST","PUT","DELETE","encryptRequest","config","store","hostKeys","getState","encryption","hostId","node","remotePublicKey","Encryption","message","encryptedMessage","decryptResponse","userKeys","localPrivateKey","privateKey","decryptedMessage","interceptors","request","use","authToken","deviceId","localRequest","indexOf","headers","common","Authorization","method","toUpperCase","includes","reject","RESET_AUTH_INFO","SET_AUTH_STEP","SET_AUTHENTICATED","SET_AUTH_METHOD","LOGOUT","setAuthenticated","status","setAuthStep","step","setAuthMethod","logout","INITIAL_STATE","alias","authTokenExpirationDate","authMethod","hostingAttemptsDone","state","action","RESET_NODE_INFO","SET_HOST_IP","SET_HOST_ID","SET_AUTHENTICATED_USER","defaults","SET_ATTEMPTS_DONE","AUTH_ACTIONS","authenticated","authStep","userSessionKey","APISessionKey","defaultSteps","manual","shockWizard","shockCloud","auth","totalBalance","channelBalance","confirmedBalance","pendingChannelBalance","USDRate","transactions","content","page","totalPages","totalItems","payments","channels","invoices","peers","recentTransactions","_getUnifiedTransactionDate","item","parseInt","creation_date","settle_date","time_stamp","wallet","LOAD_BALANCE","Big","add","toString","LOAD_USD_RATE","LOAD_PEERS","ADD_PEER","REMOVE_PEER","peer","pub_key","LOAD_CHANNELS","LOAD_TRANSACTIONS","LOAD_MORE_TRANSACTIONS","LOAD_INVOICES","LOAD_MORE_INVOICES","LOAD_PAYMENTS","LOAD_MORE_PAYMENTS","LOAD_RECENT_TRANSACTIONS","newRecentTransactions","sort","b","aDate","bDate","date","payment_hash","hash","payment_request","tx_hash","amount","label","RESET_RECENT_TRANSACTIONS","messages","sentRequests","receivedRequests","requestBlacklist","_identicalMessages","oldMessage","newMessage","localId","_sortMessages","timestamp","_processNewMessage","outgoing","userMessages","recipientPublicKey","existingMessage","body","sortedMessages","chat","LOAD_CHAT_DATA","LOAD_SENT_REQUESTS","requestPublicKeys","pendingRequests","loading","LOAD_RECEIVED_REQUESTS","SENT_REQUEST","avatar","changedAddress","displayName","Date","now","ACCEPT_HANDSHAKE_REQUEST","requestId","DECLINE_HANDSHAKE_REQUEST","trim","SENDING_MESSAGE","Schema","SENDING","SENT_MESSAGE","SENT","FAILED_MESSAGE","FAILED","RECEIVED_MESSAGE","RECEIVED","open","drawer","SET_DRAWER_OPEN","seedProviderPub","streamUserToken","streamLiveToken","publishedContent","unlockedContent","seedInfo","availableTokens","availableStreamTokens","SET_SEED_PROVIDER_PUB","ADD_PUBLISHED_CONTENT","contentTmp","ADD_UNLOCKED_CONTENT","unlockedTmp","contentPath","ADD_STREAM","liveToken","seedToken","REMOVE_STREAM","SET_SEED_INFO","ADD_AVAILABLE_TOKEN","seedUrl","userToken","availableTmp","push","REMOVE_USED_TOKEN","index","splice","ADD_STREAM_TOKEN","REMOVE_STREAM_TOKEN","source","rate","feeRates","fastestFee","halfHourFee","hourFee","fees","RESET_FEES","LOAD_FEE_RATES","SET_SOURCE","SET_RATE","follows","posts","feed","RESET_FOLLOWS","ADD_FOLLOW","existingFollow","find","follow","user","REMOVE_FOLLOW","UPDATE_FOLLOW","key","profile","ADD_USER_POST","authorId","userPosts","existingPost","DELETE_USER_POST","LOAD_POSTS","LOAD_SHARED_POST","sharerId","updatedPosts","originalPost","uuidv4","SET_DEVICE_ID","ADD_USER_KEY_PAIR","keyPair","ADD_HOST_KEY","userProfiles","NODE_ACTIONS","RESET_USER_PROFILES","LOAD_USER_PROFILE","REMOVE_USER_PROFILE","profiles","UPDATE_USER_PROFILE","newProfile","oldProfile","CHAT_ACTIONS","produce","draft","c","req","myServices","boughtServices","orders","tmp","servicesTmp","selectedService","reducers","combineReducers","NodeReducer","AuthReducer","EncryptionReducer","WalletReducer","ChatReducer","DrawerReducer","ContentReducer","FeesReducer","FeedReducer","UserProfilesReducer","OrdersReducer","users","Migrations","1","newState","handleTokenInvalidation","nodeSaga","Utils","takeEvery","currStore","getStore","ping","rootSaga","socket","select","token","off","close","put","SocketIO","withCredentials","parser","binaryParser","transports","payload","normalizeTimestampToMs","Constants","ErrorCode","NOT_AUTH","timeout","reason","connect","attemptNumber","selectSelfPublicKey","isAuth","selectHost","selectSelfUser","selfPublicKey","maybeUser","createEmptyUser","selectUser","selectAllPublicKeys","keys","selectAllOtherPublicKeys","persistConfig","storage","blacklist","version","stateReconciler","autoMergeLevel2","migrate","createMigrate","debug","process","persistedReducer","persistReducer","rootReducer","initializedStore","sagaMiddleware","createSagaMiddleware","appliedMiddleware","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","persistor","persistStore","setSagaStore","run","setInterval","initializeStore","useSelector","selector","origUseSelector","SET_CHAT_CONTACTS","SET_CHAT_MESSAGES","loadChatData","getChats","loadSentRequests","getSentRequests","err","recipientAvatar","recipientDisplayName","recipientChangedRequestAddress","loadReceivedRequests","getReceivedRequests","requestorPK","requestorAvatar","requestorDisplayName","subscribeChatMessages","userPublicKey","incomingId","incomingMessages","initialMessagePrefix","rawMsg","msg","acceptHandshakeRequest","accept","sendHandshakeRequest","sendMessage","tempId","DateTime","utc","toMillis","options","reconnection","rejectUnauthorized","rifleSockets","Map","GunSocket","LNDSocket","connectSocket","disconnectSocket","decryptEventCallback","callback","encryptedEmit","eventName","encryptedData","emit","encryptedOn","responses","decryptedResponses","fetchSocket","namespace","resolve","then","DataSocket","encryptionId","FieldError","field","cachedSocket","delete","opts","$shock","publicKeyForDecryption","set","chats","reduce","safeParseJSON","nonEncryptedEvents","convertBase64ToBuffer","Buffer","from","convertBufferToBase64","processKey","Uint8Array","convertToEncryptedMessageResponse","ciphertext","iv","mac","ephemPublicKey","convertToEncryptedMessage","isEncryptedMessage","isNonEncrypted","generateKeyPair","ECCrypto","generatePrivate","getPublic","privateKeyBase64","publicKeyBase64","encryptMessage","processedPublicKey","messageBuffer","encrypt","encryptedMessageResponse","decryptMessage","processedPrivateKey","decrypt","decryptedMessageBuffer","parsedMessage","fetchWalletBalance","channel_balance","confirmed_balance","pending_channel_balance","fetchUSDRate","exchangeRate","replace","fetchTransactions","itemsPerPage","reset","params","fetchChannels","fetchPeers","fetchInvoices","fetchUnifiedTransactions","connectPeer","pubkey","newPeer","address","bytes_sent","bytes_recv","sat_sent","sat_recv","inbound","openChannel","channelCapacity","pushAmount","channelPushAmount","satPerByte","updateUserProfile","subscribeUserProfile","subscription","binarySub","header","onError","onNotAuth","unsubscribeUserProfile","setSeedProviderPub","pub","setSeedInfo","infoS","addPublishedContent","toSet","unlockContent","postID","revealRes","unlockedContents","contentID","hasOwnProperty","call","addStream","removeStream","addAvailableToken","removeUnavailableToken","addStreamToken","Drawer","useDispatch","Store","useCallback","closeDrawer","onClickLogout","confirm","onClickScan","onClick","color","OverviewPage","lazy","AdvancedPage","MessagesPage","ProfilePage","ChatPage","SendPage","RequestPage","AuthPage","FeedPage","MoonPayPage","PublishContentPage","offerServicePage","createPostPage","GoLivePage","OtherUserPage","Story","Stories","QRScannerPage","PrivateRoute","component","authorizedComponent","App","useEffect","videojs","addLanguage","tokenExpired","JWTDecode","exp","subbedUsers","useRef","contactPKs","sentReqsPKs","r","receivedReqsPKs","publicKeysToSub","uniq","current","batch","currentSubbedUsers","length","fallback","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","origin","addEventListener","fetch","contentType","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","SET_CONNECTION_STATUS","SET_NODE_HEALTH","setHostId","retryOperation","operation","delay","retries","ms","setTimeout","bind","fetchNodeHealth","APIStatus","fetchNodeUnlockStatus","walletExists","walletStatus","connectHost","resetData","done","health","baseURL","throttledExchangeKeyPair","sanitizedHostIP","nodeHealthHttps","withProtocolHostIP","nodeHealth","unlockWallet","password","decodedToken","jwtDecode","authorization","parseError","createWallet","SetAttemptsDone","stack","RESET_FEED","POST_TIPPED","removeFollow","addFollow","loadSharedPost","postId","sharerPublicKey","subscribeUserPosts","postEntries","newPosts","GUN_PROPS","deletedPosts","subscribeSharedUserPosts","originalAuthor","subscribeFollows","sendTipPost","CHAT_MESSAGE_STATUS","errorMessage","exchangingKeypair","addUserKeyPair","addHostKey","getDeviceId","APIPublicKey","openDrawer","loadFeeRates","capitalizeText","split","word","slice","toLowerCase","join","processDisplayName","suffix"],"mappings":"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","file":"static/js/main.4a693bbe.chunk.js","sourcesContent":["import Http from \"../utils/Http\"\nimport {rifle,rifleSocketExists,disconnectRifleSocket} from '../utils/WebSocket'\nexport const ACTIONS = {\n  ADD_MY_SERVICE: \"service/add\",\n  REMOVE_MY_SERVICE: \"service/remove\",\n  ADD_BOUGHT_SERVICE:\"service/add/bought\"\n};\n\nexport const createService = (clear,encrypted) => async dispatch => {\n\n  const {data} = await Http.post('/api/gun/set',{\n    path:'$user>offeredServices',\n    value:clear,\n    \n  })\n  const {ok,id} = data\n  if(!ok){\n    return \"\"\n  }\n  const all = Object.entries(encrypted).map(([name,value]) => {\n    if(!value){\n      return\n    }\n    console.log(`setting: ${name} to ${value}`)\n    return Http.post('/api/gun/put',{\n      path:`$user>offeredServices>${id}>${name}`,\n      value:{\n        $$__ENCRYPT__FOR:'me',\n        value\n      },\n    })\n  })\n  await Promise.all(all)\n  const {serviceType} = clear\n  //update the offered service\n  if(serviceType === 'torrentSeed' || serviceType === 'streamSeed'){\n    console.log(\"updating profile with service\")\n    await Http.post('/api/gun/put',{\n      path:`$user>Profile>SeedServiceProvided`,\n      value:id,\n    })\n  }\n  /* - The update will come from APi, this should not be needed \n  dispatch({\n    type: ACTIONS.ADD_MY_SERVICE,\n    data: {id,serviceInfo}\n  });*/\n  return id\n};\n\n\n\nexport const deleteService = id => async dispatch => {\n  return await Http.post('/api/gun/put',{\n    path:`$user>offeredServices>${id}`,\n    value:null\n  })\n};\n\nexport const subscribeMyServices = (hostIP) => async (dispatch) => {\n  const query = `$user::offeredServices::on`\n  const socketExists = rifleSocketExists(query)\n  const subscription = await rifle({\n    host: hostIP,\n    query,\n    publicKey:\"\",\n    reconnect:false\n  });\n  subscription.on(\"$shock\", async services => {\n    const servicesEntries = Object.entries(services);\n    console.log(servicesEntries)\n\n    servicesEntries.forEach(async ([id]) => {\n      if(id === \"_\"){\n        return\n      }\n      const { data: service } = await  Http.get(\n        `/api/gun/user/load/offeredServices>${id}`\n      )\n      console.log(service.data)\n      if (service.data === null) {\n        dispatch({\n          type: ACTIONS.REMOVE_MY_SERVICE,\n          data: id\n        });\n        return\n      }\n      dispatch({\n        type: ACTIONS.ADD_MY_SERVICE,\n        data: {id,serviceInfo:service.data}\n      });\n    })\n  });\n  return () => {\n    disconnectRifleSocket(query)\n  }\n}\n\nexport const buyService = (owner,serviceID,servicePrice) => async (dispatch) => {\n  const {data} = await Http.post('/api/lnd/unifiedTrx',{\n    type: 'service',\n    amt:Number(servicePrice),\n    to: owner,\n    memo:\"\",\n    feeLimit:500,\n    ackInfo:serviceID\n  })\n  console.log(data)\n  const orderAck = JSON.parse(data.orderAck.response)\n  dispatch({\n    type:ACTIONS.ADD_BOUGHT_SERVICE,\n    data:{orderAck,owner,serviceID}\n  })\n  return orderAck\n\n}","import classNames from \"classnames\";\nimport { use100vh } from \"react-div-100vh\";\nimport \"./css/index.css\";\n\nconst Loader = ({\n  text = \"Loading...\",\n  fullScreen = false,\n  small = false,\n  overlay = false,\n  overlayBackground = \"rgba(44, 51, 58, 0.95)\",\n  style = {}\n}) => {\n  const height = use100vh() ?? \"100vh\";\n  // Fixes cutoff loading overlay in PWA mode\n  const standaloneMode = window.matchMedia(\"(display-mode: standalone)\").matches\n  const fullScreenStyles = fullScreen\n    ? { height: standaloneMode ? \"100%\" : height, marginBottom: 0 }\n    : {};\n  const overlayStyles = overlay\n    ? {\n        backgroundColor: overlayBackground\n      }\n    : {};\n  return (\n    <div\n      className={classNames({\n        \"loading-wall\": true,\n        \"loading-small\": small,\n        \"loading-overlay\": overlay\n      })}\n      style={{\n        ...fullScreenStyles,\n        ...overlayStyles,\n        ...style\n      }}\n    >\n      <div className=\"loading-wall-icon\">\n        <span className=\"loading-circle loading-circle-1\"></span>\n        <span className=\"loading-circle loading-circle-2\"></span>\n        <span className=\"loading-circle loading-circle-3\"></span>\n        {!small ? (\n          <>\n            <span className=\"loading-circle loading-circle-4\"></span>\n            <span className=\"loading-circle loading-circle-5\"></span>\n          </>\n        ) : null}\n      </div>\n      {text ? <div className=\"loading-wall-text\">{text}</div> : null}\n    </div>\n  );\n};\n\nexport default Loader;\n","import * as React from \"react\";\nimport * as Common from \"shock-common\";\n\nexport function useForceUpdate(): () => void {\n  const [, setTick] = React.useState(0);\n  const update = React.useCallback(() => {\n    setTick(tick => tick + 1);\n  }, []);\n  return update;\n}\n\nexport const isOnline = (lastSeen: number): boolean =>\n  Date.now() - lastSeen < Common.SET_LAST_SEEN_APP_INTERVAL * 2;\n","import * as Common from \"shock-common\";\n\nimport { Contact, ReceivedRequest, SentRequest } from \"../schema\";\n\nexport * from \"./Date\";\nexport { default as Http } from \"./Http\";\nexport * from \"./Error\";\n\nexport const logger = {\n  log: (...args: any[]) => console.log(...args),\n  warn: (...args: any[]) => console.warn(...args),\n  error: (...args: any[]) => console.error(...args)\n};\n\nexport interface File {\n  size: number;\n  type: string;\n}\n\n/**\n * Max limit in API 's http config.\n */\nexport const LARGEST_RES_SIZE = 102400;\n\n/**\n * @returns Image in jpeg format, in a data url presentation (base64).\n */\nexport const resizeImage = (\n  img: HTMLImageElement,\n  desiredLongEdge: number,\n  compression: number\n) => {\n  const canvas = document.createElement(\"canvas\");\n  let { width, height } = img;\n\n  if (width > height) {\n    if (width > desiredLongEdge) {\n      //height *= max_width / width;\n      height = Math.round((height *= desiredLongEdge / width));\n      width = desiredLongEdge;\n    }\n  } /* height > width */ else {\n    if (height > desiredLongEdge) {\n      width = Math.round((width *= desiredLongEdge / height));\n      height = desiredLongEdge;\n    }\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n\n  canvas.getContext(\"2d\").drawImage(img, 0, 0, width, height);\n  return canvas.toDataURL(\"image/jpeg\", compression);\n};\n\n/**\n * @returns Image in jpeg format, in a data url presentation (base64).\n */\nexport const processImageFile = async (\n  file: File,\n  desiredLongEdge: number,\n  compression: number\n) => {\n  // based on https://github.com/josefrichter/resize/blob/master/public/preprocess.js\n  if (!file.type.startsWith(\"image/\")) {\n    throw new TypeError(\n      `Got a file of type ${file.type} with size: ${file.size}, expected type to start with \"image\"`\n    );\n  }\n\n  const imageBuffer = await Common.makePromise<ArrayBuffer>((res, rej) => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      if (e.target.result instanceof ArrayBuffer) {\n        res(e.target.result);\n      } else {\n        rej(\n          new TypeError(\n            `Non ArrayBuffer file reader result when trying to load image file.`\n          )\n        );\n      }\n    };\n\n    const onFail = (e: ProgressEvent<FileReader>) => {\n      rej(\n        new Error(\n          `Error inside processImageFile()->imageBuffer->${JSON.stringify(e)}`\n        )\n      );\n    };\n    reader.onerror = onFail;\n    reader.onabort = onFail;\n\n    /// TODO: Why the need to cast and heck why does it even allow the cast?\n    reader.readAsArrayBuffer(file as Blob);\n  });\n\n  const url = (window.URL ?? window.webkitURL).createObjectURL(\n    new Blob([imageBuffer], { type: \"image/jpeg\" })\n  );\n\n  const image = await Common.makePromise<HTMLImageElement>((res, rej) => {\n    const _image = new Image();\n    _image.src = url;\n\n    _image.onload = () => {\n      res(_image);\n    };\n\n    _image.onerror = e => {\n      if (typeof e === \"string\") {\n        rej(new Error(e));\n      } else {\n        rej(new Error(JSON.stringify(e)));\n      }\n    };\n  });\n\n  const resizedImage = resizeImage(image, desiredLongEdge, compression);\n\n  return resizedImage;\n};\n\nexport const wait = (ms: number): Promise<void> =>\n  new Promise<void>(r => {\n    setTimeout(r, ms);\n  });\n\nexport const retryOperation = <T>(\n  operation: () => Promise<T>,\n  delay: number,\n  retries: number\n): Promise<T> =>\n  new Promise<T>((resolve, reject) => {\n    return operation()\n      .then(resolve)\n      .catch(reason => {\n        if (retries > 0) {\n          return (\n            wait(delay)\n              .then(retryOperation.bind(null, operation, delay, retries - 1))\n              // @ts-expect-error\n              .then(resolve)\n              .catch(reject)\n          );\n        }\n        return reject(reason);\n      });\n  });\n\n/**\n * Returns an empty string if the string provided is not an url.\n */\nexport const normalizeURL = (_url: string): string => {\n  let url = _url;\n\n  if (url.startsWith(\"www.\")) {\n    url = \"https://\" + url;\n  }\n\n  // https://stackoverflow.com/a/43467144\n  const isURL = (() => {\n    let __url: URL;\n\n    try {\n      __url = new URL(url);\n    } catch (_) {\n      return false;\n    }\n\n    return __url.protocol === \"http:\" || __url.protocol === \"https:\";\n  })();\n\n  if (isURL) {\n    return new URL(url).href;\n  }\n\n  return \"\";\n};\n\nexport const getContact = (\n  contacts: Array<Contact | SentRequest | ReceivedRequest>,\n  publicKey: string\n) => contacts.filter(contact => contact.pk === publicKey)[0];\n","import Http from \"axios\";\nimport * as Encryption from \"./Encryption\";\n\nconst unprotectedRoutes = {\n  GET: [\n    \"/healthz\",\n    \"/ping\",\n    // Errors out when viewing an API page from the browser\n    \"/favicon.ico\",\n    \"/api/lnd/wallet/status\"\n  ],\n  POST: [\"/api/security/exchangeKeys\", \"/api/encryption/exchange\"],\n  PUT: [],\n  DELETE: []\n};\n\nconst encryptRequest = async config => {\n  const { store } = await import(\"../store\");\n  const { hostKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  const { data } = config;\n\n  const remotePublicKey = hostKeys[hostId];\n\n  if (!remotePublicKey) {\n    console.warn(\n      \"[ENCRYPTION] Unable to retrieve key for specified Host ID:\",\n      hostId,\n      hostKeys\n    );\n    return config;\n  }\n\n  const encryptedMessage = await Encryption.encryptMessage({\n    publicKey: remotePublicKey,\n    message: JSON.stringify(data)\n  });\n\n  return {\n    ...config,\n    data: encryptedMessage\n  };\n};\n\nconst decryptResponse = async response => {\n  if (!response) {\n    return response;\n  }\n\n  const { store } = await import(\"../store\");\n  const { userKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  const { data } = response;\n\n  if (!Encryption.isEncryptedMessage(data)) {\n    return response;\n  }\n\n  const localPrivateKey = userKeys[hostId]?.privateKey;\n\n  if (!localPrivateKey) {\n    console.warn(\n      \"[ENCRYPTION] Unable to retrieve key for specified Host ID:\",\n      hostId,\n      userKeys\n    );\n    return response;\n  }\n\n  const decryptedMessage = await Encryption.decryptMessage({\n    privateKey: localPrivateKey,\n    encryptedMessage: data\n  });\n\n  return { ...response, data: decryptedMessage };\n};\n\nHttp.interceptors.request.use(async config => {\n  try {\n    const { store } = await import(\"../store\");\n    const { authToken } = store.getState().node;\n    const { deviceId } = store.getState().encryption;\n    const localRequest = config.url.indexOf(\"/\") === 0;\n\n    if (localRequest) {\n      config.headers.common.Authorization = `Bearer ${authToken}`;\n      config.headers.common[\"encryption-device-id\"] = deviceId;\n    }\n\n    if (\n      localRequest &&\n      !unprotectedRoutes[config.method.toUpperCase()].includes(config.url)\n    ) {\n      return await encryptRequest(config);\n    }\n\n    return config;\n  } catch (error) {\n    console.error(error);\n  }\n});\n\nHttp.interceptors.response.use(\n  async response => {\n    return decryptResponse(response);\n  },\n  async error => {\n    try {\n      const response = await decryptResponse(error.response);\n      error.response = response;\n      return Promise.reject(error);\n    } catch (err) {\n      console.error(err);\n      throw error;\n    }\n  }\n);\n\nexport default Http;\n","export const ACTIONS = {\n  RESET_AUTH_INFO: \"auth/reset\",\n  SET_AUTH_STEP: \"auth/step/set\",\n  SET_AUTHENTICATED: \"auth/authenticated/set\",\n  SET_AUTH_METHOD: \"auth/method/set\",\n  LOGOUT: \"auth/logout\"\n};\n\nexport const setAuthenticated = status => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_AUTHENTICATED,\n    data: status\n  });\n};\n\nexport const setAuthStep = step => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_AUTH_STEP,\n    data: step\n  });\n};\n\nexport const setAuthMethod = method => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_AUTH_METHOD,\n    data: method\n  });\n};\n\nexport const logout = () => ({\n  type: ACTIONS.LOGOUT\n});\n","import Http from \"axios\";\nimport { ACTIONS } from \"../actions/NodeActions\";\nimport { ACTIONS as AUTH_ACTIONS } from \"../actions/AuthActions\";\n\nconst INITIAL_STATE = {\n  hostId: null,\n  hostIP: null,\n  alias: null,\n  authToken: null,\n  publicKey: null,\n  authTokenExpirationDate: null,\n  authMethod: null,\n  hostingAttemptsDone: false\n};\n\nconst node = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.RESET_NODE_INFO: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.SET_HOST_IP: {\n      const hostIP = action.data;\n      return {\n        ...state,\n        hostIP\n      };\n    }\n    case ACTIONS.SET_HOST_ID: {\n      const hostId = action.data;\n      return {\n        ...state,\n        hostId\n      };\n    }\n    case ACTIONS.SET_AUTHENTICATED_USER: {\n      const {\n        authToken,\n        alias,\n        publicKey,\n        authTokenExpirationDate,\n        authMethod\n      } = action.data;\n\n      Http.defaults.headers.common.Authorization = `Bearer ${authToken}`;\n\n      return {\n        ...state,\n        authToken,\n        authTokenExpirationDate,\n        alias,\n        publicKey,\n        authMethod\n      };\n    }\n    case ACTIONS.SET_ATTEMPTS_DONE: {\n      return { ...state, hostingAttemptsDone: true };\n    }\n\n    case AUTH_ACTIONS.LOGOUT: {\n      return {\n        ...state,\n        authToken: null,\n        publicKey: null,\n        authTokenExpirationDate: null,\n        authMethod: null,\n        hostingAttemptsDone: false\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default node;\n","import { ACTIONS } from \"../actions/AuthActions\";\n\nconst INITIAL_STATE = {\n  authenticated: false,\n  authStep: \"host\",\n  authMethod: null,\n  userSessionKey: null,\n  APISessionKey: null\n};\n\nconst defaultSteps = {\n  manual: \"host\",\n  shockWizard: \"scan\",\n  shockCloud: \"inviteCode\"\n};\n\nconst auth = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_AUTHENTICATED: {\n      return { ...state, authenticated: action.data };\n    }\n    case ACTIONS.SET_AUTH_STEP: {\n      return {\n        ...state,\n        authStep: action.data\n      };\n    }\n    case ACTIONS.SET_AUTH_METHOD: {\n      const method = action.data;\n      return {\n        ...state,\n        authMethod: method,\n        authStep: defaultSteps[method]\n      };\n    }\n    case ACTIONS.LOGOUT: {\n      return INITIAL_STATE;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-check\n/**\n * @typedef {import('shock-common').Channel} Channel\n */\n\nimport Big from \"big.js\";\nimport { ACTIONS } from \"../actions/WalletActions\";\n\nconst INITIAL_STATE = {\n  // Wallet Balance\n  totalBalance: \"0\",\n  channelBalance: \"0\",\n  confirmedBalance: \"0\",\n  pendingChannelBalance: \"0\",\n  USDRate: null,\n\n  transactions: { content: [], page: -1, totalPages: 0, totalItems: 0 },\n  payments: { content: [], page: -1, totalPages: 0, totalItems: 0 },\n  /**\n   * @type {readonly Channel[]}\n   */\n  channels: [],\n  invoices: { content: [], page: -1, totalPages: 0, totalItems: 0 },\n  peers: [],\n  // Includes transactions, payments and invoices combined with a unified schema\n  // and sorted by date\n  recentTransactions: []\n};\n\nconst _getUnifiedTransactionDate = item =>\n  parseInt(item.creation_date || item.settle_date || item.time_stamp, 10);\n\n/**\n * @returns {typeof INITIAL_STATE}\n */\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_BALANCE: {\n      const {\n        channelBalance,\n        confirmedBalance,\n        pendingChannelBalance\n      } = action.data;\n      const totalBalance = new Big(confirmedBalance)\n        .add(channelBalance)\n        .add(pendingChannelBalance)\n        .toString();\n\n      return {\n        ...state,\n        totalBalance,\n        channelBalance,\n        confirmedBalance,\n        pendingChannelBalance\n      };\n    }\n    case ACTIONS.LOAD_USD_RATE: {\n      const { data } = action;\n\n      return {\n        ...state,\n        USDRate: data\n      };\n    }\n    case ACTIONS.LOAD_PEERS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        peers: data\n      };\n    }\n    case ACTIONS.ADD_PEER: {\n      const { data } = action;\n\n      return {\n        ...state,\n        peers: [data, ...state.peers]\n      };\n    }\n    case ACTIONS.REMOVE_PEER: {\n      const { data } = action;\n\n      return {\n        ...state,\n        peers: state.peers.filter(peer => peer.pub_key !== data.publicKey)\n      };\n    }\n    case ACTIONS.LOAD_CHANNELS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        channels: data\n      };\n    }\n    case ACTIONS.LOAD_TRANSACTIONS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        transactions: data\n      };\n    }\n    case ACTIONS.LOAD_MORE_TRANSACTIONS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        transactions: {\n          ...data,\n          content: [...state.transactions.content, ...data.content]\n        }\n      };\n    }\n    case ACTIONS.LOAD_INVOICES: {\n      const { data } = action;\n\n      return {\n        ...state,\n        invoices: data\n      };\n    }\n    case ACTIONS.LOAD_MORE_INVOICES: {\n      const { data } = action;\n\n      return {\n        ...state,\n        invoices: {\n          ...data,\n          content: [...state.invoices.content, ...data.content]\n        }\n      };\n    }\n    case ACTIONS.LOAD_PAYMENTS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        payments: data\n      };\n    }\n    case ACTIONS.LOAD_MORE_PAYMENTS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        payments: {\n          ...data,\n          content: [...state.payments.content, ...data.content]\n        }\n      };\n    }\n    case ACTIONS.LOAD_RECENT_TRANSACTIONS: {\n      const { transactions, payments, invoices } = action.data;\n      const newRecentTransactions = [\n        ...transactions.content,\n        ...payments.content,\n        ...invoices.content\n      ]\n        .sort((a, b) => {\n          const aDate = _getUnifiedTransactionDate(a);\n          const bDate = _getUnifiedTransactionDate(b);\n\n          return aDate < bDate ? 1 : aDate > bDate ? -1 : 0;\n        })\n        .map(item => {\n          const date = _getUnifiedTransactionDate(item);\n\n          if (item.payment_hash) {\n            return {\n              type: \"payment\",\n              hash: item.payment_hash,\n              value: item.value,\n              date\n            };\n          }\n\n          if (item.payment_request) {\n            return {\n              type: \"invoice\",\n              hash: item.payment_request,\n              value: item.value,\n              date,\n              message: item.memo\n            };\n          }\n\n          if (item.tx_hash) {\n            return {\n              type: \"chain\",\n              hash: item.tx_hash,\n              value: item.amount,\n              date,\n              message: item.label\n            };\n          }\n\n          console.warn(\"Invalid transaction detected\", item);\n          return null;\n        })\n        .filter(item => item !== null);\n\n      return {\n        ...state,\n        transactions,\n        payments,\n        invoices,\n        recentTransactions: newRecentTransactions\n      };\n    }\n    case ACTIONS.RESET_RECENT_TRANSACTIONS: {\n      return {\n        ...state,\n        recentTransactions: []\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default wallet;\n","// @ts-check\n/**\n * @format\n */\n/**\n * @typedef {import('redux').AnyAction} AnyAction\n */\n/**\n * @template S\n * @typedef {import('redux').Reducer<S, AnyAction>} Reducer\n */\n\nimport * as Schema from \"../schema\";\nimport { ACTIONS } from \"../actions/ChatActions\";\n/**\n * @typedef {import('../schema').Contact} Contact\n * @typedef {import('../schema').ReceivedRequest} ReceivedRequest\n * @typedef {import(\"../schema\").SentRequest} SentRequest\n *\n * @typedef {import('../actions/ChatActions').SentRequestAction} SentRequestAction\n * @typedef {import('../actions/ChatActions').LoadChatDataAction} LoadChatDataAction\n * @typedef {import('../actions/ChatActions').LoadReceivedRequestsAction} LoadReceivedRequestsAction\n * @typedef {import('../actions/ChatActions').LoadSentRequestsAction} LoadSentRequestsAction\n */\n\nconst INITIAL_STATE = {\n  contacts: /** @type {Contact[]} */ ([]),\n  /**\n   * @type {Record<string, Schema.ChatMessage[]>}\n   */\n  messages: {},\n  sentRequests: /** @type {SentRequest[]} */ ([]),\n  receivedRequests: /** @type {ReceivedRequest[]} */ ([]),\n  requestBlacklist: []\n};\n\n/**\n * @param {Schema.ChatMessage} oldMessage\n * @param {Schema.ChatMessage} newMessage\n * @returns {boolean}\n */\nconst _identicalMessages = (oldMessage, newMessage) =>\n  oldMessage.id && newMessage.id\n    ? oldMessage.id === newMessage.id\n    : oldMessage.localId === newMessage.localId;\n\n/**\n * @param {Schema.ChatMessage[]} messages\n * @returns {Schema.ChatMessage[]}\n */\nconst _sortMessages = (messages = []) =>\n  messages.sort((a, b) => b.timestamp - a.timestamp);\n\n/**\n * @typedef {object} ProcessNewMessageParams\n * @prop {Schema.ChatMessage} data\n * @prop {Schema.ChatMessageStatus} status\n * @prop {typeof INITIAL_STATE} state\n * @prop {boolean=} outgoing\n */\n\n/**\n * @param {ProcessNewMessageParams} args\n * @returns {typeof INITIAL_STATE}\n */\nconst _processNewMessage = ({ data, status, state, outgoing = false }) => {\n  const userMessages = state.messages[data.recipientPublicKey] ?? [];\n  const [existingMessage] = userMessages.filter(message =>\n    _identicalMessages(message, data)\n  );\n\n  if (existingMessage) {\n    console.warn(\"Duplicate Message:\", existingMessage?.body);\n  }\n\n  if (existingMessage) {\n    const messages = userMessages.map(message =>\n      _identicalMessages(message, existingMessage)\n        ? { ...existingMessage, ...data, status, outgoing }\n        : message\n    );\n    const sortedMessages = _sortMessages(messages);\n\n    return {\n      ...state,\n      messages: {\n        ...state.messages,\n        [data.recipientPublicKey]: sortedMessages\n      }\n    };\n  }\n\n  const messages = [{ ...data, status, outgoing }, ...userMessages];\n  const sortedMessages = _sortMessages(messages);\n\n  return {\n    ...state,\n    messages: {\n      ...state.messages,\n      [data.recipientPublicKey]: sortedMessages\n    }\n  };\n};\n\n/**\n * @type {Reducer<typeof INITIAL_STATE>}\n */\nconst chat = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_CHAT_DATA: {\n      const {\n        data: { contacts, messages }\n      } = /** @type {LoadChatDataAction} */ (action);\n      return { ...state, contacts, messages };\n    }\n    case ACTIONS.LOAD_SENT_REQUESTS: {\n      const {\n        data: sentRequests\n      } = /** @type {LoadSentRequestsAction} */ (action);\n      const requestPublicKeys = state.sentRequests.map(request => request.pk);\n      const pendingRequests = state.sentRequests.filter(\n        request => request.loading && !requestPublicKeys.includes(request.pk)\n      );\n\n      return {\n        ...state,\n        sentRequests: [...pendingRequests, ...sentRequests]\n      };\n    }\n    case ACTIONS.LOAD_RECEIVED_REQUESTS: {\n      const {\n        data: receivedRequests\n      } = /** @type {LoadReceivedRequestsAction} */ (action);\n\n      return {\n        ...state,\n        receivedRequests\n      };\n    }\n    case ACTIONS.SENT_REQUEST: {\n      const { data: publicKey } = /** @type {SentRequestAction} */ (action);\n      return {\n        ...state,\n        sentRequests: [\n          ...state.sentRequests,\n          {\n            avatar: null,\n            changedAddress: false,\n            displayName: null,\n            id: \"loading/\" + publicKey,\n            pk: publicKey,\n            timestamp: Date.now(),\n            loading: true\n          }\n        ]\n      };\n    }\n    case ACTIONS.ACCEPT_HANDSHAKE_REQUEST: {\n      const requestId = action.data;\n      return {\n        ...state,\n        receivedRequests: state.receivedRequests.filter(\n          request => request.id !== requestId\n        )\n      };\n    }\n    case ACTIONS.DECLINE_HANDSHAKE_REQUEST: {\n      const requestId = action.data;\n      if (!requestId || !requestId.trim()) {\n        return state;\n      }\n\n      return {\n        ...state,\n        requestBlacklist: [...state.requestBlacklist, requestId]\n      };\n    }\n    case ACTIONS.SENDING_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: Schema.CHAT_MESSAGE_STATUS.SENDING,\n        state,\n        outgoing: true\n      });\n    }\n    case ACTIONS.SENT_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: Schema.CHAT_MESSAGE_STATUS.SENT,\n        state,\n        outgoing: true\n      });\n    }\n    case ACTIONS.FAILED_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: Schema.CHAT_MESSAGE_STATUS.FAILED,\n        state,\n        outgoing: true\n      });\n    }\n    case ACTIONS.RECEIVED_MESSAGE: {\n      const { data } = action;\n      return _processNewMessage({\n        data,\n        status: Schema.CHAT_MESSAGE_STATUS.RECEIVED,\n        state\n      });\n    }\n    default:\n      return state;\n  }\n};\n\nexport default chat;\n","/**\n * @format\n */\nimport { ACTIONS } from \"../actions/DrawerActions\";\n\nconst INITIAL_STATE = {\n  open: false\n};\n\nconst drawer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_DRAWER_OPEN: {\n      return { ...state, open: action.data };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default drawer;\n","import { ACTIONS } from \"../actions/ContentActions\";\nconst INITIAL_STATE = {\n  seedProviderPub:'test',\n  streamUserToken:'',\n  streamLiveToken:'',\n  publishedContent:{},\n  unlockedContent:{},\n  seedInfo:{},\n  availableTokens:{},\n  availableStreamTokens:{}\n};\n\nconst content = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_SEED_PROVIDER_PUB: {\n      return { ...state, seedProviderPub: action.data };\n    }\n    case ACTIONS.ADD_PUBLISHED_CONTENT:{\n      const {data} = action\n      const {content,res} = data\n      const contentTmp = {...state.publishedContent}\n      if(res.ok){\n        contentTmp[res.id] = content \n      }\n      return { ...state, publishedContent:contentTmp} \n    }\n    case ACTIONS.ADD_UNLOCKED_CONTENT:{\n      const {data} = action\n      const unlockedTmp = {...state.unlockedContent}\n      unlockedTmp[data.contentPath] = data.content\n      return {...state,unlockedContent:unlockedTmp}\n    }\n    case ACTIONS.ADD_STREAM:{\n      const {data} = action\n      return {...state, streamLiveToken:data.liveToken,streamUserToken:data.seedToken}\n    }\n    case ACTIONS.REMOVE_STREAM:{\n      return {...state, streamLiveToken:'',streamUserToken:''}\n    }\n    case ACTIONS.SET_SEED_INFO:{\n      const {data} = action\n      return {...state, seedInfo:data}\n    }\n    case ACTIONS.ADD_AVAILABLE_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableTokens}\n      if(!availableTmp[seedUrl]){\n        availableTmp[seedUrl] = []\n      }\n      availableTmp[seedUrl].push(userToken)\n      return {...state,availableTokens:availableTmp}\n    }\n    case ACTIONS.REMOVE_USED_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableTokens}\n      if(!availableTmp[seedUrl]){\n        return state\n      }\n      const index = availableTmp[seedUrl].indexOf(userToken);\n      if (index > -1) {\n        availableTmp[seedUrl].splice(index, 1);\n        return {...state,availableTokens:availableTmp}\n      }\n      return state\n    }\n    case ACTIONS.ADD_STREAM_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableStreamTokens}\n      if(!availableTmp[seedUrl]){\n        availableTmp[seedUrl] = []\n      }\n      availableTmp[seedUrl].push(userToken)\n      return {...state,availableStreamTokens:availableTmp}\n    }\n    case ACTIONS.REMOVE_STREAM_TOKEN:{\n      const {data} = action\n      const {seedUrl,userToken} = data\n      const availableTmp = {...state.availableStreamTokens}\n      if(!availableTmp[seedUrl]){\n        return state\n      }\n      const index = availableTmp[seedUrl].indexOf(userToken);\n      if (index > -1) {\n        availableTmp[seedUrl].splice(index, 1);\n        return {...state,availableStreamTokens:availableTmp}\n      }\n      return state\n    }\n    default:\n      return state;\n  }\n};\n\nexport default content;\n","import { ACTIONS } from \"../actions/FeesActions\";\n\nconst INITIAL_STATE = {\n  source: \"https://mempool.space/api/v1/fees/recommended\",\n  rate: \"halfHourFee\",\n  feeRates: {\n    fastestFee: 0,\n    halfHourFee: 0,\n    hourFee: 0\n  }\n};\n\nconst fees = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.RESET_FEES: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.LOAD_FEE_RATES: {\n      const feeRates = action.data;\n      return {\n        ...state,\n        feeRates\n      };\n    }\n    case ACTIONS.SET_SOURCE: {\n      const source = action.data;\n      return {\n        ...state,\n        source\n      };\n    }\n    case ACTIONS.SET_RATE: {\n      const rate = action.data;\n      return {\n        ...state,\n        rate\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default fees;\n","import { ACTIONS } from \"../actions/FeedActions\";\n\nconst INITIAL_STATE = {\n  follows: [],\n  posts: {}\n};\n\nconst feed = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.RESET_FOLLOWS: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.ADD_FOLLOW: {\n      const { data } = action;\n      const existingFollow = state.follows.find(\n        follow => data.user === follow.user\n      );\n\n      if (existingFollow) {\n        return {\n          ...state,\n          follows: state.follows.map(follow =>\n            follow.user === data.user ? data : follow\n          )\n        };\n      }\n\n      return {\n        ...state,\n        follows: [...state.follows, data]\n      };\n    }\n    case ACTIONS.REMOVE_FOLLOW: {\n      const { data } = action;\n      return {\n        ...state,\n        follows: state.follows.filter(follow => follow.user !== data)\n      };\n    }\n    case ACTIONS.UPDATE_FOLLOW: {\n      const { data } = action;\n\n      const follows = state.follows.map(follow => {\n        if (follow.user === data.key) {\n          return {\n            ...follow,\n            profile: data\n          };\n        }\n\n        return follow;\n      });\n\n      return {\n        ...state,\n        follows\n      };\n    }\n    case ACTIONS.ADD_USER_POST: {\n      const { data } = action;\n      const authorId = data.authorId;\n      const userPosts = state.posts[authorId] ?? [];\n      const existingPost = userPosts.find(post => data.id === post.id);\n\n      if (existingPost) {\n        return state;\n      }\n\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [authorId]: [...userPosts, data]\n        }\n      };\n    }\n    case ACTIONS.DELETE_USER_POST: {\n      const { id, authorId } = action.data;\n      const userPosts = (state.posts[authorId] ?? []).filter(\n        post => post.id !== id\n      );\n\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [authorId]: userPosts\n        }\n      };\n    }\n    case ACTIONS.LOAD_POSTS: {\n      const { data } = action;\n\n      return {\n        ...state,\n        posts: data\n      };\n    }\n    case ACTIONS.LOAD_SHARED_POST: {\n      const { data } = action;\n      const { id, sharerId } = data;\n      const userPosts = state.posts[sharerId] ?? [];\n      const updatedPosts = userPosts.map(post => {\n        if (post.id === id && post.type === \"shared\") {\n          return {\n            ...post,\n            originalPost: data\n          };\n        }\n\n        return post;\n      });\n\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [sharerId]: updatedPosts\n        }\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default feed;\n","import { v4 as uuidv4 } from \"uuid\";\nimport { ACTIONS } from \"../actions/EncryptionActions\";\n\nconst INITIAL_STATE = {\n  deviceId: uuidv4(),\n  userKeys: {},\n  hostKeys: {}\n};\n\nconst encryption = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_DEVICE_ID: {\n      const deviceId = action.data;\n      return {\n        ...state,\n        deviceId\n      };\n    }\n    case ACTIONS.ADD_USER_KEY_PAIR: {\n      const { hostId, keyPair } = action.data;\n      return { ...state, userKeys: { ...state.userKeys, [hostId]: keyPair } };\n    }\n    case ACTIONS.ADD_HOST_KEY: {\n      const { hostId, publicKey } = action.data;\n      return { ...state, hostKeys: { ...state.hostKeys, [hostId]: publicKey } };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default encryption;\n","import * as Common from \"shock-common\";\nimport produce from \"immer\";\n\nimport { ACTIONS } from \"../actions/UserProfilesActions\";\nimport { ACTIONS as NODE_ACTIONS } from \"../actions/NodeActions\";\nimport { ACTIONS as CHAT_ACTIONS } from \"../actions/ChatActions\";\n/**\n * @typedef {import('../actions/ChatActions').LoadChatDataAction} LoadChatDataAction\n * @typedef {import(\"../actions/ChatActions\").LoadSentRequestsAction} LoadSentRequestsAction\n * @typedef {import('../actions/ChatActions').LoadReceivedRequestsAction} LoadReceivedRequestsAction\n * @typedef {import('../actions/ChatActions').SentRequestAction} SentRequestAction\n */\n\n/**\n * @typedef {Record<string, Common.User>} UserProfilesState\n */\n\n/**\n * @type {UserProfilesState}\n */\nconst INITIAL_STATE = {};\n\n/**\n * @param {UserProfilesState} state\n * @param {import('redux').AnyAction} action\n * @returns {UserProfilesState}\n */\nconst userProfiles = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NODE_ACTIONS.SET_AUTHENTICATED_USER: {\n      const { publicKey } = action.data;\n      return {\n        ...state,\n        [publicKey]: {\n          ...Common.createEmptyUser(publicKey),\n          ...state[publicKey]\n        }\n      };\n    }\n    case ACTIONS.RESET_USER_PROFILES: {\n      return INITIAL_STATE;\n    }\n    case ACTIONS.LOAD_USER_PROFILE: {\n      const { publicKey, profile } = action.data;\n\n      if (!publicKey || !profile) {\n        return state;\n      }\n\n      return {\n        ...state,\n        [publicKey]: {\n          ...Common.createEmptyUser(publicKey),\n          ...state[publicKey],\n          ...profile\n        }\n      };\n    }\n    case ACTIONS.REMOVE_USER_PROFILE: {\n      const { publicKey } = action.data;\n      // Deletes the user profile property without mutating the state object\n      const { [publicKey]: deletedProfile, ...profiles } = state;\n\n      return profiles;\n    }\n    case ACTIONS.UPDATE_USER_PROFILE: {\n      const { publicKey, profile: newProfile } = action.data;\n      const oldProfile = state[publicKey];\n\n      console.log(\"Updating User Profile:\", publicKey, newProfile);\n      if (!oldProfile || !newProfile) {\n        return state;\n      }\n\n      return {\n        ...state,\n        [publicKey]: {\n          ...Common.createEmptyUser(publicKey),\n          ...oldProfile,\n          ...newProfile\n        }\n      };\n    }\n    case CHAT_ACTIONS.LOAD_CHAT_DATA: {\n      return produce(state, draft => {\n        const { data } = /** @type {LoadChatDataAction} */ (action);\n\n        data.contacts.forEach(c => {\n          draft[c.pk] = {\n            ...Common.createEmptyUser(c.pk),\n            ...draft[c.pk],\n            avatar: c.avatar,\n            displayName: c.displayName\n          };\n        });\n      });\n    }\n    case CHAT_ACTIONS.LOAD_RECEIVED_REQUESTS: {\n      return produce(state, draft => {\n        const { data } = /** @type {LoadReceivedRequestsAction} */ (action);\n\n        data.forEach(req => {\n          draft[req.pk] = {\n            ...Common.createEmptyUser(req.pk),\n            ...draft[req.pk],\n            avatar: req.avatar,\n            displayName: req.displayName\n          };\n        });\n      });\n    }\n    case CHAT_ACTIONS.LOAD_SENT_REQUESTS: {\n      return produce(state, draft => {\n        const { data } = /** @type {LoadSentRequestsAction} */ (action);\n\n        data.forEach(req => {\n          draft[req.pk] = {\n            ...Common.createEmptyUser(req.pk),\n            ...draft[req.pk],\n            avatar: req.avatar,\n            displayName: req.displayName\n          };\n        });\n      });\n    }\n    case CHAT_ACTIONS.SENT_REQUEST: {\n      return produce(state, draft => {\n        const { data: pk } = /** @type {SentRequestAction} */ (action);\n\n        if (!draft[pk]) {\n          draft[pk] = Common.createEmptyUser(pk);\n        }\n      });\n    }\n    default:\n      return state;\n  }\n};\n\nexport default userProfiles;\n","import { ACTIONS } from \"../actions/OrdersActions\";\n\nconst INITIAL_STATE = {\n    myServices:{},\n    services:{},\n    boughtServices:{}\n};\n\n\n\nconst orders = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.ADD_MY_SERVICE: {\n      const {id,serviceInfo} = action.data\n      const tmp = {...state.myServices}\n      tmp[id] = serviceInfo\n      return { ...state, myServices: tmp };\n    }\n    case ACTIONS.REMOVE_MY_SERVICE:{\n      const id = action.data\n      const tmp = {...state.myServices}\n      delete tmp[id]\n      return { ...state, myServices: tmp };\n    }\n    case ACTIONS.ADD_BOUGHT_SERVICE:{\n      const {orderAck,owner,serviceID} = action.data\n      const servicesTmp = {...state.boughtServices}\n      \n      if(!servicesTmp[owner]){\n        servicesTmp[owner] = {}\n      }\n      const selectedService = servicesTmp[owner]\n      if(!selectedService[serviceID]){\n        selectedService[serviceID] = []\n      }\n      selectedService[serviceID].push(orderAck)\n      return {...state, boughtServices:servicesTmp}\n    }\n    default:\n      return state;\n  }\n};\n\nexport default orders;\n","import { combineReducers } from \"redux\";\nimport * as Common from \"shock-common\";\n\nimport NodeReducer from \"./NodeReducer\";\nimport AuthReducer from \"./AuthReducer\";\nimport WalletReducer from \"./WalletReducer\";\nimport ChatReducer from \"./ChatReducer\";\nimport DrawerReducer from \"./DrawerReducer\";\nimport ContentReducer from \"./ContentReducer\";\nimport FeesReducer from \"./FeesReducer\";\nimport FeedReducer from \"./FeedReducer\";\nimport EncryptionReducer from \"./EncryptionReducer\";\nimport UserProfilesReducer from \"./UserProfilesReducer\";\nimport OrdersReducer from \"./OrdersReducer\"\n\nconst reducers = combineReducers({\n  node: NodeReducer,\n  auth: AuthReducer,\n  encryption: EncryptionReducer,\n  wallet: WalletReducer,\n  chat: ChatReducer,\n  drawer: DrawerReducer,\n  content: ContentReducer,\n  fees: FeesReducer,\n  feed: FeedReducer,\n  userProfiles: UserProfilesReducer,\n  orders:OrdersReducer,\n  users: () => {\n    return {} as Record<string, Common.User>;\n  }\n});\n\nexport type State = ReturnType<typeof reducers>;\n\nexport default reducers;\n","import PeerMigration from \"./PeerMigration\";\n\nconst Migrations = {\n  1: PeerMigration\n};\n\nexport default Migrations;\n","const PeerMigration = state => {\n  console.log(\"--- PeerMigration Started ---\");\n  const newState = {\n    ...state,\n    wallet: {\n      ...state.wallet,\n      peers: []\n    }\n  };\n  console.log(\"--- PeerMigration Ended ---\", newState);\n  return newState;\n};\n\nexport default PeerMigration;\n","import { all, takeEvery } from \"redux-saga/effects\";\n\nimport * as Utils from \"../../utils\";\n\n// eslint-disable-next-line require-yield\nfunction* handleTokenInvalidation() {\n  try {\n    // Utils.navigate(\"/\");\n  } catch (e) {\n    Utils.logger.error(`Error inside handleTokenInvalidation* ()`);\n    Utils.logger.error(e);\n  }\n}\n\nfunction* auth() {\n  try {\n    yield;\n  } catch (e) {\n    Utils.logger.error(\"Error inside auth* ()\");\n    Utils.logger.error(e);\n  }\n}\n\nfunction* nodeSaga() {\n  yield all([\n    auth,\n    takeEvery(\"node/tokenDidInvalidate\", handleTokenInvalidation)\n  ]);\n}\n\nexport default nodeSaga;\n","import { Store, AnyAction } from \"redux\";\n\nimport { State } from \"../../reducers\";\n\ntype ShockStore = Store<State, AnyAction>;\n\nlet currStore = {} as ShockStore;\n\nexport const _setStore = (store: ShockStore) => {\n  currStore = store;\n};\n\nexport const getStore = () => currStore;\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport SocketIO from \"socket.io-client\";\nimport binaryParser from \"socket.io-msgpack-parser\"\nimport { Constants, normalizeTimestampToMs } from \"shock-common\";\n\nimport * as Utils from \"../../utils\";\n\nimport { getStore } from \"./_store\";\n\nlet socket: ReturnType<typeof SocketIO> | null = null;\n\nfunction* ping() {\n  try {\n    const {\n      node: { authToken: token, hostIP: host }\n    } = yield select();\n\n    if ((!token || !host) && socket) {\n      Utils.logger.log(\n        `Will kill ping socket because of token invalidation or host was unset`\n      );\n      socket.off(\"*\");\n      socket.close();\n      socket = null;\n\n      // force next tick\n      yield put({ type: \"shock::keepAlive\" });\n    }\n\n    if (token && host && !socket) {\n      Utils.logger.log(`Will try to connect ping socket`);\n      socket = SocketIO(`http://${host}/shockping`, {\n        withCredentials: true,\n        parser: binaryParser,\n        transports: ['websocket', 'polling'],\n        auth: {\n          token\n        }\n      });\n\n      socket.on(\"shockping\", () => {\n        getStore().dispatch({\n          type: \"node/ping\",\n          payload: {\n            timestamp: normalizeTimestampToMs(Date.now())\n          }\n        });\n      });\n\n      socket.on(Constants.ErrorCode.NOT_AUTH, () => {\n        getStore().dispatch({\n          type: \"node/tokenDidInvalidate\"\n        });\n      });\n\n      socket.on(\"$error\", (e: string) => {\n        Utils.logger.error(`Error received by ping socket: ${e}`);\n      });\n\n      socket.on(\"connect_error\", (e: unknown) => {\n        Utils.logger.error(`ping socket connect_error`);\n        Utils.logger.error(e);\n      });\n\n      socket.on(\"connect_timeout\", (timeout: unknown) => {\n        Utils.logger.log(`ping socket connect_timeout`);\n        Utils.logger.log(timeout);\n      });\n\n      socket.on(\"connect\", () => {\n        Utils.logger.log(\"ping socket connect\");\n      });\n\n      socket.on(\"disconnect\", (reason: string) => {\n        Utils.logger.log(`ping socket disconnected due to -> ${reason}`);\n\n        // from docs\n        if (reason === \"io server disconnect\") {\n          // the disconnection was initiated by the server, you need to reconnect manually\n          socket && socket.connect();\n        }\n        // else the socket will automatically try to reconnect\n      });\n\n      socket.on(\"error\", (e: unknown) => {\n        Utils.logger.error(`Error inside ping socket`);\n        Utils.logger.error(e);\n      });\n\n      socket.on(\"reconnect\", (attemptNumber: number) => {\n        Utils.logger.log(`ping socket reconnect attempt -> ${attemptNumber}`);\n      });\n\n      socket.on(\"reconnecting\", (attemptNumber: number) => {\n        Utils.logger.log(\n          `ping socket reconnecting attempt -> ${attemptNumber}`\n        );\n      });\n\n      socket.on(\"reconnect_error\", (e: unknown) => {\n        Utils.logger.log(`ping socket reconnect_error`);\n        Utils.logger.error(e);\n      });\n\n      socket.on(\"reconnect_failed\", () => {\n        Utils.logger.error(`ping socket reconnect_failed`);\n      });\n\n      socket.on(\"ping\", () => {\n        Utils.logger.log(`ping socket pinging api (socket.io internal)`);\n      });\n\n      socket.on(\"pong\", () => {\n        Utils.logger.log(`ping socket ponged by api (socket.io internal)`);\n\n        getStore().dispatch({\n          type: \"ping\",\n          payload: {\n            timestamp: normalizeTimestampToMs(Date.now())\n          }\n        });\n      });\n    }\n  } catch (err) {\n    Utils.logger.error(\"Error inside ping* ()\");\n    Utils.logger.error(err.message);\n  }\n}\n\nfunction* rootSaga() {\n  yield takeEvery(\"*\", ping);\n}\n\nexport default rootSaga;\n","import { all } from \"redux-saga/effects\";\n\nimport node from \"./node\";\nimport ping from \"./ping\";\n\nimport { _setStore } from \"./_store\";\n\nfunction* rootSaga() {\n  yield all([node, ping]);\n}\n\nexport { _setStore };\nexport default rootSaga;\n","import { State } from \"../../reducers\";\n\nexport const selectSelfPublicKey = (state: State): string =>\n  state.node.publicKey;\n\nexport const isAuth = (state: State): boolean => !!state.node.publicKey;\n\nexport const selectHost = (state: State): string => state.node.hostIP;\n","import { Schema } from \"shock-common\";\n\nimport { State } from \"../../reducers\";\n\nimport { selectSelfPublicKey } from \"./auth\";\n\nexport const selectSelfUser = (state: State) => {\n  const selfPublicKey = selectSelfPublicKey(state);\n  const maybeUser = state.userProfiles[selfPublicKey];\n  if (maybeUser) {\n    return maybeUser;\n  } else {\n    console.error(\"No self user created at auth?\");\n    return Schema.createEmptyUser(selfPublicKey);\n  }\n};\n\nexport const selectUser = (publicKey: string) => (\n  state: State\n): Schema.User => {\n  const maybeUser = state.userProfiles[publicKey];\n\n  if (maybeUser) {\n    return maybeUser;\n  } else {\n    return Schema.createEmptyUser(publicKey);\n  }\n};\n\nexport const selectAllPublicKeys = (state: State): string[] => {\n  return Object.keys(state.userProfiles);\n};\n\nexport const selectAllOtherPublicKeys = (state: State): string[] => {\n  const selfPublicKey = selectSelfPublicKey(state);\n  return selectAllPublicKeys(state).filter(key => key !== selfPublicKey);\n};\n","import { createStore, applyMiddleware, compose, AnyAction } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer, { State } from \"../reducers\";\nimport { useSelector as origUseSelector } from \"react-redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport Migrations from \"./Migrations\";\nimport createMigrate from \"redux-persist/es/createMigrate\";\nimport autoMergeLevel2 from \"redux-persist/es/stateReconciler/autoMergeLevel2\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootSaga, { _setStore as setSagaStore } from \"./sagas\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [\"auth\"],\n  version: 1,\n  stateReconciler: autoMergeLevel2,\n  migrate: createMigrate(Migrations, {\n    debug: process.env.NODE_ENV === \"development\"\n  })\n};\n\nconst persistedReducer = persistReducer<State, AnyAction>(\n  persistConfig,\n  rootReducer\n);\n\nconst initializeStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const appliedMiddleware = applyMiddleware(thunk, sagaMiddleware);\n  // @ts-expect-error\n  const store = window.__REDUX_DEVTOOLS_EXTENSION__\n    ? createStore(\n        persistedReducer,\n        // @ts-expect-error\n        compose(appliedMiddleware, window.__REDUX_DEVTOOLS_EXTENSION__())\n      )\n    : createStore(persistedReducer, appliedMiddleware);\n  let persistor = persistStore(store);\n  setSagaStore(store);\n  sagaMiddleware.run(rootSaga);\n  // In the future if polls (which cause ticks in the store) are moved to sagas\n  // they will be dependant on the ping socket, we need a keep alive tick for\n  // when the are no actions being dispatched making the store tick and\n  // therefore the ping saga realizing the socket died, if it did so. Ideally,\n  // the ping/socket subscription should emit a timeout event of such but I'd\n  // rather do that when I learn Event Channels and implement the ping socket\n  // using that.\n  setInterval(() => {\n    store.dispatch({\n      type: \"shock::keepAlive\"\n    });\n  }, 20000);\n  return { store, persistor };\n};\n\nconst initializedStore = initializeStore();\n\nexport const store = initializedStore.store;\n\nexport const persistor = initializedStore.persistor;\n\n/**\n * React-redux 's useSelector with our state type pre-specified.\n */\nexport const useSelector = <TSelected = unknown>(\n  selector: (state: State) => TSelected\n): TSelected => origUseSelector<State, TSelected>(selector);\n\nexport * from \"./selectors\";\n","// @ts-check\nimport Http from \"../utils/Http\";\nimport { DateTime } from \"luxon\";\nimport { v4 as uuidv4 } from \"uuid\";\n/**\n * @typedef {import('shock-common').Message} RawMessage\n */\n\nimport {\n  getChats,\n  getReceivedRequests,\n  getSentRequests,\n  rifle\n} from \"../utils/WebSocket\";\nimport { initialMessagePrefix } from \"../utils/String\";\nimport * as Schema from \"../schema\";\n/**\n * @typedef {import('../schema').Contact} Contact\n * @typedef {import('../schema').SentRequest} SentRequest\n * @typedef {import(\"../schema\").ReceivedRequest} ReceivedRequest\n * @typedef {import('../schema').ChatMessage} ChatMessage\n */\n\nexport const ACTIONS = {\n  LOAD_CHAT_DATA: /** @type {\"chat/loadData\"} */ (\"chat/loadData\"),\n  LOAD_SENT_REQUESTS: /** @type {\"chat/loadSentRequests\"} */ (\"chat/loadSentRequests\"),\n  LOAD_RECEIVED_REQUESTS: /** @type {\"chat/loadReceivedRequests\"} */ (\"chat/loadReceivedRequests\"),\n  SET_CHAT_CONTACTS: \"chat/contacts\",\n  SET_CHAT_MESSAGES: \"chat/messages\",\n  SENT_REQUEST: /** @type {\"chat/request/sent\"} */ (\"chat/request/sent\"),\n  ACCEPT_HANDSHAKE_REQUEST: \"chat/request/accept\",\n  DECLINE_HANDSHAKE_REQUEST: \"chat/request/decline\",\n  SENDING_MESSAGE: \"chat/message/sending\",\n  SENT_MESSAGE: \"chat/message/sent\",\n  FAILED_MESSAGE: \"chat/message/failed\",\n  RECEIVED_MESSAGE: /** @type {\"chat/message/received\"} */ (\"chat/message/received\")\n};\n\n/**\n * @typedef {object} SentRequestAction\n * @prop {typeof ACTIONS.SENT_REQUEST} type\n * @prop {string} data The public key.\n */\n\n/**\n * @typedef {object} LoadChatDataAction\n * @prop {typeof ACTIONS.LOAD_CHAT_DATA} type\n * @prop {{ messages: Record<string, ChatMessage[]> , contacts: Contact[] }} data\n */\n\n/**\n * @typedef {object} LoadSentRequestsAction\n * @prop {typeof ACTIONS.LOAD_SENT_REQUESTS} type\n * @prop {SentRequest[]} data\n */\n\n/**\n * @typedef {object} LoadReceivedRequestsAction\n * @prop {typeof ACTIONS.LOAD_RECEIVED_REQUESTS} type\n * @prop {ReceivedRequest[]} data\n */\n\n/**\n * @typedef {object} ReceivedMessageAction\n * @prop {typeof ACTIONS.RECEIVED_MESSAGE} type\n * @prop {ChatMessage} data\n */\n\nexport const loadChatData = () => async (dispatch, getState) => {\n  const { hostIP, authToken } = getState().node;\n  const data = await getChats({ hostIP, authToken });\n  console.log(\"LOAD_CHAT_DATA:\", data);\n\n  dispatch({\n    type: ACTIONS.LOAD_CHAT_DATA,\n    data\n  });\n};\n\nexport const loadSentRequests = () => (dispatch, getState) => {\n  const { hostIP, authToken } = getState().node;\n  getSentRequests({ hostIP, authToken }, (err, sentRequests) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    console.log(\"sentRequests:\", sentRequests);\n\n    /** @type {LoadSentRequestsAction} */\n    const action = {\n      type: ACTIONS.LOAD_SENT_REQUESTS,\n      data: sentRequests.map(request => {\n        /** @type {SentRequest} */\n        const req = {\n          id: request.id,\n          pk: request.recipientPublicKey,\n          avatar: request.recipientAvatar,\n          displayName: request.recipientDisplayName,\n          changedAddress: request.recipientChangedRequestAddress,\n          timestamp: request.timestamp,\n          loading: false\n        };\n\n        return req;\n      })\n    };\n\n    dispatch(action);\n  });\n};\n\nexport const loadReceivedRequests = () => (dispatch, getState) => {\n  const { hostIP, authToken } = getState().node;\n  getReceivedRequests({ hostIP, authToken }, (err, receivedRequests) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    console.log(\"receivedRequests:\", receivedRequests);\n\n    /** @type {LoadReceivedRequestsAction} */\n    const action = {\n      type: ACTIONS.LOAD_RECEIVED_REQUESTS,\n      data: receivedRequests.map(request => {\n        /** @type {ReceivedRequest} */\n        const req = {\n          id: request.id,\n          pk: request.requestorPK,\n          avatar: request.requestorAvatar,\n          displayName: request.requestorDisplayName,\n          timestamp: request.timestamp\n        };\n\n        return req;\n      })\n    };\n\n    dispatch(action);\n  });\n};\n\nexport const subscribeChatMessages = (\n  userPublicKey,\n  recipientPublicKey\n) => async (dispatch, getState) => {\n  const { hostIP } = getState().node;\n  const { data: incomingId } = await Http.get(\n    `/api/gun/user/once/userToIncoming>${recipientPublicKey}`,\n    {\n      headers: {\n        \"public-key-for-decryption\": userPublicKey\n      }\n    }\n  );\n\n  if (!incomingId.data) {\n    console.warn(\"Unable to retrieve incoming ID for selected contact\");\n    return null;\n  }\n\n  const incomingMessages = await rifle({\n    host: hostIP,\n    query: `${recipientPublicKey}::outgoings>${incomingId.data}>messages::map.on`,\n    publicKey: recipientPublicKey\n  });\n\n  incomingMessages.on(\"$shock\", (message, id) => {\n    if (!message.body || message.body === initialMessagePrefix) {\n      return;\n    }\n    /** @type {RawMessage} */\n    const rawMsg = message;\n\n    /** @type {ChatMessage} */\n    const msg = {\n      body: rawMsg.body,\n      id,\n      localId: id,\n      outgoing: false,\n      recipientPublicKey,\n      status: Schema.CHAT_MESSAGE_STATUS.SENT,\n      timestamp: rawMsg.timestamp\n    };\n\n    /** @type {ReceivedMessageAction} */\n    const action = {\n      type: ACTIONS.RECEIVED_MESSAGE,\n      data: msg\n    };\n\n    dispatch(action);\n  });\n\n  return incomingMessages;\n};\n\nexport const acceptHandshakeRequest = requestId => async dispatch => {\n  const { data } = await Http.put(`/api/gun/requests/${requestId}`, {\n    accept: true\n  });\n\n  dispatch({\n    type: ACTIONS.ACCEPT_HANDSHAKE_REQUEST,\n    data: requestId\n  });\n\n  return data;\n};\n\nexport const sendHandshakeRequest = publicKey => async (dispatch, getState) => {\n  const { data } = await Http.post(`/api/gun/requests`, {\n    publicKey\n  });\n\n  /** @type {SentRequest[]} */\n  const sentRequests = getState().chat.sentRequests;\n  const [userExists] = sentRequests.filter(request => request.pk === publicKey);\n\n  if (!userExists) {\n    /** @type {SentRequestAction} */\n    const action = {\n      type: ACTIONS.SENT_REQUEST,\n      data: publicKey\n    };\n    dispatch(action);\n  }\n\n  return data;\n};\n\nexport const sendMessage = ({\n  publicKey,\n  message,\n  localId\n}) => async dispatch => {\n  const tempId = localId ?? uuidv4();\n  try {\n    dispatch({\n      type: ACTIONS.SENDING_MESSAGE,\n      data: {\n        body: message,\n        localId: tempId,\n        timestamp: DateTime.utc().toMillis(),\n        recipientPublicKey: publicKey\n      }\n    });\n    const { data } = await Http.post(`/api/gun/chats/${publicKey}`, {\n      body: message\n    });\n    console.log(data);\n    dispatch({\n      type: ACTIONS.SENT_MESSAGE,\n      data: { ...data, localId: tempId, recipientPublicKey: publicKey }\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIONS.FAILED_MESSAGE,\n      data: {\n        body: message,\n        localId: tempId,\n        timestamp: DateTime.utc().toMillis(),\n        recipientPublicKey: publicKey\n      }\n    });\n  }\n};\n","import SocketIO from \"socket.io-client\";\nimport binaryParser from \"socket.io-msgpack-parser\";\nimport * as Encryption from \"./Encryption\";\nimport { initialMessagePrefix } from \"../utils/String\";\nimport FieldError from \"./FieldError\";\n/**\n * @typedef {import('../schema').Contact} Contact\n */\n\nconst options = {\n  reconnection: true,\n  rejectUnauthorized: false,\n  parser: binaryParser,\n  withCredentials: true\n};\n\nconst rifleSockets = new Map();\n\nexport let GunSocket = null;\n\nexport let LNDSocket = null;\n\nexport const connectSocket = url => {\n  GunSocket = SocketIO.connect(`${url}/gun`, options);\n  LNDSocket = SocketIO.connect(`${url}/lndstreaming`, options);\n  return { GunSocket, LNDSocket };\n};\n\nexport const disconnectSocket = socket => {\n  socket.off(\"*\");\n  socket.close();\n};\n\nconst decryptEventCallback = async ({ err, data, callback, privateKey }) => {\n  if (\n    (err && !Encryption.isEncryptedMessage(err)) ||\n    (data && !Encryption.isEncryptedMessage(data))\n  ) {\n    callback(err, data);\n    return;\n  }\n\n  if (err) {\n    const decryptedMessage = await Encryption.decryptMessage({\n      privateKey,\n      encryptedMessage: err\n    });\n\n    callback(decryptedMessage, data);\n    return;\n  }\n\n  if (data) {\n    const decryptedMessage = await Encryption.decryptMessage({\n      privateKey,\n      encryptedMessage: data\n    });\n\n    callback(err, decryptedMessage);\n    return;\n  }\n};\n\nconst encryptedEmit = socket => async (eventName, message, callback) => {\n  // TODO: remove circular dep\n  const { store } = await import(\"../store\");\n  const { hostKeys, userKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  if (!Encryption.isNonEncrypted(eventName)) {\n    socket.on(eventName, callback);\n    return;\n  }\n\n  const remotePublicKey = hostKeys[hostId];\n  const localPrivateKey = userKeys[hostId]?.privateKey;\n\n  if (!remotePublicKey || !localPrivateKey) {\n    console.error(\"[WS] Unable to retrieve key for specified Host ID:\", hostId);\n\n    return;\n  }\n\n  const encryptedData = await (message\n    ? Encryption.encryptMessage({\n        publicKey: remotePublicKey,\n        message\n      })\n    : null);\n\n  socket.emit(eventName, encryptedData, (err, data) => {\n    decryptEventCallback({\n      err,\n      data,\n      callback,\n      privateKey: localPrivateKey\n    });\n  });\n};\n\nconst encryptedOn = socket => async (eventName, callback) => {\n  // TODO: remove circular dep\n  const { store } = await import(\"../store\");\n  const { userKeys } = store.getState().encryption;\n  const { hostId } = store.getState().node;\n\n  if (Encryption.isNonEncrypted(eventName)) {\n    socket.on(eventName, callback);\n    return;\n  }\n\n  const localPrivateKey = userKeys[hostId]?.privateKey;\n\n  if (!localPrivateKey) {\n    console.error(\"[WS] Unable to retrieve key for specified Host ID:\", hostId);\n\n    return;\n  }\n\n  socket.on(eventName, async (...responses) => {\n    const decryptedResponses = await Promise.all(\n      responses.map(async response => {\n        if (!response) {\n          return response;\n        }\n\n        if (response && !Encryption.isEncryptedMessage(response)) {\n          console.warn(\"Non-encrypted socket message\", response);\n          return response;\n        }\n\n        return Encryption.decryptMessage({\n          privateKey: localPrivateKey,\n          encryptedMessage: response\n        });\n      })\n    );\n\n    callback(...decryptedResponses);\n  });\n};\n\nconst fetchSocket = ({ hostIP, authToken, namespace, callback }) =>\n  new Promise((resolve, reject) => {\n    try {\n      import(\"../store\").then(({ store }) => {\n        const { encryption } = store.getState();\n        const DataSocket = SocketIO.connect(`${hostIP}/${namespace}`, {\n          ...options,\n          auth: {\n            token: authToken,\n            encryptionId: encryption.deviceId\n          }\n        });\n        const on = encryptedOn(DataSocket);\n\n        on(\"$shock\", async data => {\n          if (callback) {\n            callback(null, data);\n            return;\n          }\n          resolve(data);\n        });\n\n        on(\"$error\", async error => {\n          if (callback) {\n            callback(error);\n            return;\n          }\n          disconnectSocket(DataSocket);\n          reject(\n            new FieldError({\n              field: \"socket\",\n              message: error\n            })\n          );\n        });\n\n        on(\"error\", error => {\n          console.error(error);\n          if (callback) {\n            callback(error);\n            return;\n          }\n          disconnectSocket(DataSocket);\n          reject(\n            new FieldError({\n              field: \"socket\",\n              message: error\n            })\n          );\n        });\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  });\n\nexport const disconnectRifleSocket = query => {\n  const cachedSocket = rifleSockets.get(query);\n\n  if (cachedSocket) {\n    cachedSocket.off(\"*\");\n    cachedSocket.close();\n    rifleSockets.delete(query);\n  }\n};\n\nexport const rifleSocketExists = query => {\n  const cachedSocket = rifleSockets.get(query);\n  return !!cachedSocket;\n};\n\n/**\n * @typedef {object} RifleParams\n * @prop {string} host\n * @prop {string} query\n * @prop {string=} publicKeyForDecryption\n * @prop {string=} publicKey Alias for publicKeyForDecryption\n * @prop {boolean=} reconnect\n */\n\n/**\n * Returns a socket wired up to the given query. Use `.on('$shock')` for values.\n * Please do not forget to listen to the NOT_AUTH event and react accordingly.\n * Query example:\n * ```js\n * rifle(`$user::Profile>displayName::on`)\n * // results in:\n * gun.user().get('Profile').get('displayName').on(...)\n *\n * const pk = '....'\n * rifle(`${pk}::Profile::map.once`)\n * // results in:\n * gun.user(pk).get('Profile').get('displayName').map()once(...)\n *\n * rifle(`$gun::handshakeNodes::on`)\n * // results in:\n * gun.get('handshakeNodes').on(...)\n * ```\n * @param {RifleParams} args\n * @returns {Promise<SocketIOClient.Socket>}\n */\nexport const rifle = async ({ host, query, publicKey, reconnect }) => {\n  // TODO: remove circular dep\n  const { store } = await import(\"../store\");\n  const opts = {\n    ...options,\n    auth: {\n      encryptionId: store.getState().encryption.deviceId,\n      $shock: query,\n      publicKeyForDecryption: publicKey ?? \"\"\n    }\n  };\n\n  const cachedSocket = rifleSockets.get(query);\n\n  if (reconnect && cachedSocket) {\n    disconnectRifleSocket(query);\n  }\n\n  if (!cachedSocket || reconnect) {\n    const socket = SocketIO(`${host}/gun`, opts);\n    rifleSockets.set(query, socket);\n    const on = encryptedOn(socket);\n    const emit = encryptedEmit(socket);\n\n    on(\"$error\", err => {\n      console.error(`Gun rifle error (${query})`);\n\n      console.error(err);\n    });\n\n    return {\n      on,\n      emit,\n      off: () => socket.off(),\n      close: () => socket.close()\n    };\n  }\n\n  return cachedSocket;\n};\n\n/**\n * @returns {{ messages: any , contacts: Contact[]}}\n */\nexport const getChats = async ({ hostIP, authToken }) => {\n  try {\n    const chats = await fetchSocket({ hostIP, authToken, namespace: \"chats\" });\n\n    const contacts = chats.map(chat => ({\n      pk: chat.recipientPublicKey,\n      avatar: chat.recipientAvatar,\n      displayName: chat.recipientDisplayName\n    }));\n\n    const messages = chats.reduce(\n      (messages, chat) => ({\n        ...messages,\n        [chat.recipientPublicKey]: chat.messages\n          ?.filter(\n            message =>\n              message.body &&\n              message.body.trim() &&\n              message.body !== initialMessagePrefix\n          )\n          .sort((a, b) => b.timestamp - a.timestamp)\n      }),\n      {}\n    );\n\n    return {\n      contacts,\n      messages\n    };\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n\nexport const getSentRequests = async ({ hostIP, authToken }, callback) => {\n  try {\n    const sentRequests = await fetchSocket({\n      hostIP,\n      authToken,\n      namespace: \"sentReqs\",\n      callback\n    });\n\n    return sentRequests;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const getReceivedRequests = async ({ hostIP, authToken }, callback) => {\n  try {\n    const receivedRequests = await fetchSocket({\n      hostIP,\n      authToken,\n      namespace: \"receivedReqs\",\n      callback\n    });\n\n    return receivedRequests.map(request => ({\n      id: request.id,\n      pk: request.recipientPublicKey,\n      avatar: request.recipientAvatar,\n      displayName: request.recipientDisplayName,\n      changedAddress: request.recipientChangedRequestAddress,\n      timestamp: request.timestamp\n    }));\n  } catch (err) {\n    console.error(err);\n  }\n};\n","export const safeParseJSON = (data: string): string | object => {\n  try {\n    const parsedJSON = JSON.parse(data);\n    return parsedJSON;\n  } catch (err) {\n    return data;\n  }\n};\n","import { Buffer } from \"buffer\";\nimport ECCrypto from \"eccrypto\";\nimport FieldError from \"./FieldError\";\nimport { safeParseJSON } from \"./JSON\";\n\ninterface EncryptedMessage {\n  ciphertext: Uint8Array;\n  ephemPublicKey: Uint8Array;\n  iv: Uint8Array;\n  mac: Uint8Array;\n}\n\ninterface EncryptedMessageResponse {\n  ciphertext: string;\n  ephemPublicKey: string;\n  iv: string;\n  mac: string;\n}\n\ninterface DeriveKey {\n  localPrivateKey: Uint8Array | string;\n  remotePublicKey: Uint8Array | string;\n}\n\ninterface EncryptMessageArgs {\n  publicKey: Uint8Array | string;\n  sharedKey: Uint8Array | string;\n  message: string;\n}\n\ninterface DecryptMessageArgs {\n  privateKey: Uint8Array | string;\n  encryptedMessage: EncryptedMessage;\n}\n\nconst nonEncryptedEvents = [\n  \"ping\",\n  \"disconnect\",\n  \"IS_GUN_AUTH\",\n  \"SET_LAST_SEEN_APP\",\n  \"NOT_AUTH\"\n];\n\nexport const convertUTF8ToBase64 = (value: string) => {\n  return Buffer.from(value, \"utf-8\").toString(\"base64\");\n};\n\nexport const convertBase64ToBuffer = (value: string) => {\n  return Buffer.from(value, \"base64\");\n};\n\nexport const convertUTF8ToBuffer = (value: string) => {\n  return Buffer.from(value, \"utf-8\");\n};\n\nexport const convertBufferToBase64 = (value: Uint8Array) => {\n  return Buffer.from(value).toString(\"base64\");\n};\n\nexport const processKey = (key: Uint8Array | string): Uint8Array => {\n  if (key instanceof Uint8Array) {\n    return key;\n  }\n\n  const convertedKey = convertBase64ToBuffer(key);\n  return convertedKey;\n};\n\nexport const convertToEncryptedMessageResponse = (\n  encryptedMessage: EncryptedMessage | EncryptedMessageResponse\n): EncryptedMessageResponse => {\n  if (\n    typeof encryptedMessage.ciphertext === \"string\" &&\n    typeof encryptedMessage.iv === \"string\" &&\n    typeof encryptedMessage.mac === \"string\" &&\n    typeof encryptedMessage.ephemPublicKey === \"string\"\n  ) {\n    // @ts-ignore\n    return encryptedMessage;\n  }\n\n  if (\n    encryptedMessage.ciphertext instanceof Uint8Array &&\n    encryptedMessage.iv instanceof Uint8Array &&\n    encryptedMessage.mac instanceof Uint8Array &&\n    encryptedMessage.ephemPublicKey instanceof Uint8Array\n  ) {\n    return {\n      ciphertext: convertBufferToBase64(encryptedMessage.ciphertext),\n      iv: convertBufferToBase64(encryptedMessage.iv),\n      mac: convertBufferToBase64(encryptedMessage.mac),\n      ephemPublicKey: convertBufferToBase64(encryptedMessage.ephemPublicKey)\n    };\n  }\n\n  throw new FieldError({\n    field: \"encryptedMessage\",\n    message: \"Unknown encrypted message format\"\n  });\n};\n\nexport const convertToEncryptedMessage = (\n  encryptedMessage: EncryptedMessage | EncryptedMessageResponse\n): EncryptedMessage => {\n  if (\n    encryptedMessage.ciphertext instanceof Uint8Array &&\n    encryptedMessage.iv instanceof Uint8Array &&\n    encryptedMessage.mac instanceof Uint8Array &&\n    encryptedMessage.ephemPublicKey instanceof Uint8Array\n  ) {\n    // @ts-ignore\n    return encryptedMessage;\n  }\n\n  if (\n    typeof encryptedMessage.ciphertext === \"string\" &&\n    typeof encryptedMessage.iv === \"string\" &&\n    typeof encryptedMessage.mac === \"string\" &&\n    typeof encryptedMessage.ephemPublicKey === \"string\"\n  ) {\n    return {\n      ciphertext: convertBase64ToBuffer(encryptedMessage.ciphertext),\n      iv: convertBase64ToBuffer(encryptedMessage.iv),\n      mac: convertBase64ToBuffer(encryptedMessage.mac),\n      ephemPublicKey: convertBase64ToBuffer(encryptedMessage.ephemPublicKey)\n    };\n  }\n\n  throw new FieldError({\n    field: \"encryptedMessage\",\n    message: \"Unknown encrypted message format\"\n  });\n};\n\nexport const isEncryptedMessage = (message: any) =>\n  message?.ciphertext && message?.iv && message?.mac && message?.ephemPublicKey;\n\nexport const isNonEncrypted = (eventName: string) =>\n  nonEncryptedEvents.includes(eventName);\n\nexport const generateKeyPair = () => {\n  const privateKey: Uint8Array = ECCrypto.generatePrivate();\n  const publicKey: Uint8Array = ECCrypto.getPublic(privateKey);\n\n  const privateKeyBase64 = convertBufferToBase64(privateKey);\n  const publicKeyBase64 = convertBufferToBase64(publicKey);\n\n  return {\n    privateKey,\n    publicKey,\n    privateKeyBase64,\n    publicKeyBase64\n  };\n};\n\nexport const deriveKey = async ({\n  localPrivateKey,\n  remotePublicKey\n}: DeriveKey) => {\n  const sharedKey: Uint8Array = await ECCrypto.derive(\n    processKey(localPrivateKey),\n    processKey(remotePublicKey)\n  );\n  const sharedKeyBase64 = convertBufferToBase64(sharedKey);\n\n  return { sharedKey, sharedKeyBase64 };\n};\n\nexport const encryptMessage = async ({\n  publicKey,\n  message = \"\"\n}: EncryptMessageArgs): Promise<EncryptedMessageResponse> => {\n  const processedPublicKey = processKey(publicKey);\n  const messageBuffer = convertUTF8ToBuffer(message);\n  const encryptedMessage: EncryptedMessage = await ECCrypto.encrypt(\n    processedPublicKey,\n    messageBuffer\n  );\n  const encryptedMessageResponse = {\n    ciphertext: encryptedMessage.ciphertext,\n    iv: encryptedMessage.iv,\n    mac: encryptedMessage.mac,\n    ephemPublicKey: encryptedMessage.ephemPublicKey\n  };\n\n  return convertToEncryptedMessageResponse(encryptedMessageResponse);\n};\n\nexport const decryptMessage = async ({\n  privateKey,\n  encryptedMessage\n}: DecryptMessageArgs): Promise<string | object> => {\n  const processedPrivateKey = processKey(privateKey);\n  const decryptedMessageBuffer: Uint8Array = await ECCrypto.decrypt(\n    processedPrivateKey,\n    convertToEncryptedMessage(encryptedMessage)\n  );\n  const decryptedMessage = Buffer.from(decryptedMessageBuffer).toString();\n  const parsedMessage = safeParseJSON(decryptedMessage);\n\n  return parsedMessage;\n};\n","import Http from \"axios\";\n\nexport const ACTIONS = {\n  LOAD_BALANCE: \"wallet/balance/load\",\n  LOAD_USD_RATE: \"wallet/usdRate/load\",\n  LOAD_TRANSACTIONS: \"wallet/transactions/load\",\n  LOAD_MORE_TRANSACTIONS: \"wallet/transactions/loadMore\",\n  LOAD_CHANNELS: \"wallet/channels/load\",\n  LOAD_INVOICES: \"wallet/invoices/load\",\n  LOAD_MORE_INVOICES: \"wallet/invoices/loadMore\",\n  LOAD_PAYMENTS: \"wallet/payments/load\",\n  LOAD_MORE_PAYMENTS: \"wallet/payments/loadMore\",\n  LOAD_PEERS: \"wallet/peers/load\",\n  ADD_PEER: \"wallet/peers/add\",\n  REMOVE_PEER: \"wallet/peers/remove\",\n  LOAD_RECENT_TRANSACTIONS: \"wallet/recentTransactions/load\",\n  RESET_RECENT_TRANSACTIONS: \"wallet/recentTransactions/reset\"\n};\n\nexport const fetchWalletBalance = () => async dispatch => {\n  const { data } = await Http.get(`/api/lnd/balance`);\n\n  dispatch({\n    type: ACTIONS.LOAD_BALANCE,\n    data: {\n      channelBalance: data.channel_balance,\n      confirmedBalance: data.confirmed_balance,\n      pendingChannelBalance: data.pending_channel_balance\n    }\n  });\n\n  return data;\n};\n\nexport const fetchUSDRate = () => async dispatch => {\n  const { data } = await Http.get(\n    \"https://api.coinbase.com/v2/prices/spot?currency=USD\"\n  );\n  const exchangeRate = data.data.amount.replace(/,/g, \"\");\n\n  dispatch({\n    type: ACTIONS.LOAD_USD_RATE,\n    data: exchangeRate\n  });\n\n  return exchangeRate;\n};\n\nexport const fetchTransactions = ({\n  page,\n  itemsPerPage = 10,\n  reset = false\n}) => async (dispatch, getState) => {\n  const { transactions } = getState().wallet;\n\n  if ((transactions.page >= page && !reset) || transactions.totalPages < page) {\n    return;\n  }\n\n  const { data } = await Http.get(\"/api/lnd/transactions\", {\n    params: {\n      page,\n      itemsPerPage\n    }\n  });\n\n  dispatch({\n    type: reset ? ACTIONS.LOAD_TRANSACTIONS : ACTIONS.LOAD_MORE_TRANSACTIONS,\n    data\n  });\n\n  return data;\n};\n\nexport const fetchChannels = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/listchannels\");\n\n  dispatch({\n    type: ACTIONS.LOAD_CHANNELS,\n    data: data.channels\n  });\n\n  return data;\n};\n\nexport const fetchPeers = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/listpeers\");\n\n  dispatch({\n    type: ACTIONS.LOAD_PEERS,\n    data: data.peers\n  });\n\n  return data;\n};\n\nexport const fetchInvoices = ({\n  page,\n  itemsPerPage = 10,\n  reset = false\n}) => async (dispatch, getState) => {\n  const { invoices } = getState().wallet;\n\n  if ((invoices.page >= page && !reset) || invoices.totalPages < page) {\n    return;\n  }\n\n  const { data } = await Http.get(\"/api/lnd/invoices\", {\n    params: {\n      page,\n      itemsPerPage\n    }\n  });\n\n  dispatch({\n    type: reset ? ACTIONS.LOAD_INVOICES : ACTIONS.LOAD_MORE_INVOICES,\n    data\n  });\n\n  return data;\n};\n\nexport const fetchPayments = ({\n  page,\n  itemsPerPage = 10,\n  reset = false\n}) => async (dispatch, getState) => {\n  const { payments } = getState().wallet;\n\n  if ((payments.page >= page && !reset) || payments.totalPages < page) {\n    return;\n  }\n\n  const { data } = await Http.get(\"/api/lnd/payments\", {\n    params: {\n      page,\n      itemsPerPage\n    }\n  });\n\n  dispatch({\n    type: reset ? ACTIONS.LOAD_PAYMENTS : ACTIONS.LOAD_MORE_PAYMENTS,\n    data\n  });\n\n  return data;\n};\n\nexport const fetchUnifiedTransactions = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/unifiedTrx\");\n\n  dispatch({\n    type: ACTIONS.LOAD_RECENT_TRANSACTIONS,\n    data\n  });\n\n  return data;\n};\n\nexport const connectPeer = ({ publicKey, host }) => async dispatch => {\n  try {\n    await Http.post(\"/api/lnd/connectpeer\", {\n      pubkey: publicKey,\n      host: host\n    });\n\n    const newPeer = {\n      pub_key: publicKey,\n      address: host,\n      bytes_sent: 0,\n      bytes_recv: 0,\n      sat_sent: 0,\n      sat_recv: 0,\n      inbound: false\n    };\n\n    dispatch({\n      type: ACTIONS.ADD_PEER,\n      data: newPeer\n    });\n\n    return newPeer;\n  } catch (err) {\n    console.error(err);\n    throw err?.response?.data ?? err;\n  }\n};\n\nexport const openChannel = ({\n  publicKey = \"\",\n  channelCapacity = 0,\n  pushAmount = 0\n}) => async (dispatch, getState) => {\n  try {\n    const { feeRates, rate } = getState().fees;\n    await Http.post(\"/api/lnd/openchannel\", {\n      pubkey: publicKey,\n      channelCapacity: channelCapacity.toString(),\n      channelPushAmount: pushAmount.toString(),\n      satPerByte: feeRates[rate]\n    });\n\n    const data = await fetchChannels()(dispatch);\n\n    return data.channels;\n  } catch (err) {\n    console.error(err);\n    throw err?.response?.data ?? err;\n  }\n};\n","import * as Common from \"shock-common\";\n\nimport * as Utils from \"../utils\";\nimport { disconnectRifleSocket, rifle } from \"../utils/WebSocket\";\n\nimport { setAuthenticated } from \"./AuthActions\";\n\nexport const ACTIONS = {\n  RESET_USER_PROFILES: \"userProfiles/profiles/reset\",\n  LOAD_USER_PROFILE: \"userProfiles/profiles/load\",\n  REMOVE_USER_PROFILE: \"userProfiles/profiles/remove\",\n  UPDATE_USER_PROFILE: \"userProfiles/profiles/update\"\n};\n\nexport const updateUserProfile = (\n  publicKey: string,\n  profile: Partial<Common.User>\n) => ({\n  type: ACTIONS.UPDATE_USER_PROFILE,\n  data: {\n    publicKey,\n    profile\n  }\n});\n\n/**\n * Returns an un subscription function.\n */\nexport const subscribeUserProfile = (publicKey: string) => async (\n  dispatch: (action: object) => void,\n  getState: () => {\n    node: { hostIP: string };\n    userProfiles: Record<string, Common.User>;\n  }\n) => {\n  const { hostIP } = getState().node;\n  const [subscription, binarySub] = await Promise.all([\n    rifle({\n      host: hostIP,\n      query: `${publicKey}::Profile::on`,\n      reconnect: true\n    }),\n    rifle({\n      host: hostIP,\n      query: `${publicKey}::profileBinary::map.on`,\n      reconnect: true\n    })\n  ]);\n\n  binarySub.on(\"$shock\", (data, key: string) => {\n    if (key === \"avatar\") {\n      if (typeof data !== \"string\" && data !== null) {\n        Utils.logger.error(\n          `Expected avatar data to be string or null, instead got: ${typeof data}. Public key: ${publicKey}`\n        );\n        return;\n      }\n      dispatch(\n        updateUserProfile(publicKey, {\n          avatar: data\n        })\n      );\n    } else if (key === \"header\") {\n      if (typeof data !== \"string\" && data !== null) {\n        Utils.logger.error(\n          `Expected header data to be string or null, instead got: ${typeof data}. Public key: ${publicKey}`\n        );\n        return;\n      }\n      dispatch(\n        updateUserProfile(publicKey, {\n          header: data\n        })\n      );\n    } else {\n      Utils.logger.error(\n        `Unknown key: ${key} for user binary profile data gun RPC socket`\n      );\n    }\n  });\n\n  subscription.on(\"$shock\", profile => {\n    const { [publicKey]: existingUser } = getState().userProfiles;\n\n    if (existingUser) {\n      dispatch({\n        type: ACTIONS.UPDATE_USER_PROFILE,\n        data: { publicKey, profile }\n      });\n      return profile;\n    }\n\n    dispatch({\n      type: ACTIONS.LOAD_USER_PROFILE,\n      data: { publicKey, profile }\n    });\n  });\n\n  const onError = (err: unknown) => {\n    if (err === Common.NOT_AUTH) {\n      dispatch(setAuthenticated(false));\n      return;\n    }\n\n    Utils.logger.error(\n      `Error inside user profile subscription ( ${publicKey} )`\n    );\n    Utils.logger.error(err);\n  };\n\n  const onNotAuth = () => {\n    dispatch(setAuthenticated(false));\n  };\n\n  binarySub.on(\"$error\", onError);\n  subscription.on(\"$error\", onError);\n  binarySub.on(Common.NOT_AUTH, onNotAuth);\n  subscription.on(Common.NOT_AUTH, onNotAuth);\n\n  return () => {\n    binarySub.off(\"*\");\n    binarySub.close();\n    subscription.off(\"*\");\n    subscription.close();\n  };\n};\n\nexport const unsubscribeUserProfile = publicKey => async () => {\n  disconnectRifleSocket(`${publicKey}::Profile::on`);\n  disconnectRifleSocket(`${publicKey}::profileBinary::map.on`);\n};\n","import Http from '../utils/Http'\n\nexport const ACTIONS = {\n  SET_SEED_PROVIDER_PUB:'content/setSeedProviderPub',\n  SET_SEED_INFO:'content/setSeedInfo',\n  ADD_PUBLISHED_CONTENT:'content/addPublishedContent',\n  ADD_UNLOCKED_CONTENT:'content/addUnlocked',\n  ADD_STREAM:'content/addStream',\n  REMOVE_STREAM:'content/removeStream',\n  ADD_AVAILABLE_TOKEN:'content/addToken',\n  REMOVE_USED_TOKEN:'content/removeToken',\n  ADD_STREAM_TOKEN:'content/addStreamToken',\n  REMOVE_STREAM_TOKEN:'content/removeStreamToken',\n};\n\nexport const setSeedProviderPub = pub => async dispatch => {\n  let value = {\n    $$__ENCRYPT__FOR:'me',\n    value:pub\n  }\n  if(!pub){\n    value = \"\"\n  }\n  await Http.post('/api/gun/put',{\n    path:'$user>seedServiceProviderPubKey',\n    value\n  })\n  dispatch({\n    type: ACTIONS.SET_SEED_PROVIDER_PUB,\n    data: pub\n  });\n};\nexport const setSeedInfo = (seedUrl,seedToken) => async dispatch => {\n  const infoS = JSON.stringify({seedUrl,seedToken})\n  await Http.post('/api/gun/put',{\n    path:'$user>seedServiceSeedData',\n    value:{\n      $$__ENCRYPT__FOR:'me',\n      value:infoS\n    }\n  })\n  dispatch({\n    type: ACTIONS.SET_SEED_INFO,\n    data: {seedUrl,seedToken}\n  });\n};\nexport const addPublishedContent = content => async dispatch => {\n  let toSet = content\n  if(typeof content !== 'string'){\n    toSet = JSON.stringify(content)\n  }\n  const {data} = await Http.post('/api/gun/set',{\n    path:'$user>publishedContent',\n    value:{\n      $$__ENCRYPT__FOR:'me',\n      value:toSet\n    }\n  })\n  dispatch({\n    type: ACTIONS.ADD_PUBLISHED_CONTENT,\n    data: {content,res:data}\n  });\n  return data\n};\n\nexport const unlockContent = (amt,owner,postID) => async dispatch => {\n  const {data} = await Http.post('/api/lnd/unifiedTrx',{\n    type: 'contentReveal',\n    amt,\n    to: owner,\n    memo:'',\n    feeLimit:500,\n    ackInfo:postID\n  })\n  const revealRes = JSON.parse(data.orderAck.response)\n  if(revealRes && revealRes.unlockedContents){\n    for (const contentID in revealRes.unlockedContents) {\n      if (Object.hasOwnProperty.call(revealRes.unlockedContents, contentID)) {\n        const content = revealRes.unlockedContents[contentID];\n        dispatch({\n          type:ACTIONS.ADD_UNLOCKED_CONTENT,\n          data:{contentPath:`${owner}>posts>${postID}`,content}\n        })\n      }\n    }\n  }\n}\nexport const addStream = (seedToken, liveToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_STREAM,\n    data: {seedToken,liveToken}\n  });\n};\nexport const removeStream = () => dispatch => {\n  dispatch({\n    type: ACTIONS.REMOVE_STREAM,\n  });\n};\nexport const addAvailableToken = (seedUrl, userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_AVAILABLE_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};\nexport const removeUnavailableToken = (seedUrl,userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.REMOVE_USED_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};\nexport const addStreamToken = (seedUrl, userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_STREAM_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};\nexport const removeStreamToken = (seedUrl,userToken) => dispatch => {\n  dispatch({\n    type: ACTIONS.REMOVE_STREAM_TOKEN,\n    data: {seedUrl,userToken}\n  });\n};","// @ts-check\nimport { useCallback } from \"react\";\nimport classNames from \"classnames\";\nimport \"./css/index.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { logout } from \"../../actions/AuthActions\";\nimport { closeDrawer } from \"../../actions/DrawerActions\";\nimport * as Store from \"../../store\";\n\nconst Drawer = () => {\n  const dispatch = useDispatch();\n  const open = Store.useSelector(({ drawer }) => drawer.open);\n  const close = useCallback(() => {\n    dispatch(closeDrawer());\n  }, [dispatch]);\n  const onClickLogout = useCallback(() => {\n    if (window.confirm(\"Are you sure you wish to log out?\")) {\n      dispatch(logout());\n      dispatch(closeDrawer());\n    }\n  }, [dispatch]);\n\n  const onClickScan = useCallback(() => {}, []);\n\n  return (\n    <>\n      <div\n        className={classNames({\n          \"drawer-overlay\": true,\n          \"drawer-overlay-open\": open\n        })}\n        onClick={close}\n      ></div>\n      <div\n        className={classNames({\n          \"drawer-container\": true,\n          \"drawer-container-open\": open\n        })}\n      >\n        <div className=\"drawer-top-section\">\n          {/* <div className=\"drawer-item\">\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-wallet\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Spending Rules</p>\n          </div> */}\n          {/* <div className=\"drawer-item\">\n        <div className=\"drawer-item-icon\">\n          <i className=\"icon-solid-spending-rule\"></i>\n        </div>\n        <p className=\"drawer-item-title unselectable\">Spending Rules</p>\n      </div> */}\n          <NavLink className=\"drawer-item\" to=\"/advanced\" onClick={close}>\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-spending-rule\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Advanced Lightning</p>\n          </NavLink>\n          <div className=\"drawer-item\">\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-key\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Seed Backup</p>\n          </div>\n        </div>\n        <div className=\"drawer-bottom-section\" >\n          <NavLink className=\"drawer-item\"  to=\"/moonpay\" onClick={close}>\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-help\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Buy Bitcoins</p>\n          </NavLink>\n          <div className=\"drawer-item\">\n            <div className=\"drawer-item-icon\">\n              <i className=\"icon-solid-help\"></i>\n            </div>\n            <p className=\"drawer-item-title unselectable\">Help</p>\n          </div>\n        </div>\n\n        <div className=\"drawer-logout-and-scan\">\n        <NavLink  to=\"/QRScanner\" onClick={close}>\n          <i\n            onClick={onClickScan}\n            className=\"icon-solid-scan\"\n            style={{ color: \"var(--main-blue)\" }}\n          ></i>\n        </NavLink>\n          <i\n            onClick={onClickLogout}\n            className=\"fas fa-power-off\"\n            style={{ color: \"var(--main-blue)\" }}\n          ></i>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Drawer;\n","// @ts-check\nimport React, { Suspense, useEffect, useRef } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { batch, useDispatch } from \"react-redux\";\nimport JWTDecode from \"jwt-decode\";\nimport videojs from \"video.js\";\nimport FullHeight from \"react-div-100vh\";\nimport uniq from \"lodash/uniq\";\n\nimport { setAuthenticated } from \"./actions/AuthActions\";\nimport { loadReceivedRequests, loadSentRequests } from \"./actions/ChatActions\";\nimport Loader from \"./common/Loader\";\nimport Drawer from \"./common/Drawer\";\nimport \"./styles/App.css\";\nimport {\n  subscribeUserProfile,\n  unsubscribeUserProfile\n} from \"./actions/UserProfilesActions\";\nimport * as Store from \"./store\";\n\nconst OverviewPage = React.lazy(() => import(\"./pages/Overview\"));\nconst AdvancedPage = React.lazy(() => import(\"./pages/Advanced\"));\nconst MessagesPage = React.lazy(() => import(\"./pages/Messages\"));\nconst ProfilePage = React.lazy(() => import(\"./pages/Profile\"));\nconst ChatPage = React.lazy(() => import(\"./pages/Chat\"));\nconst SendPage = React.lazy(() => import(\"./pages/Send\"));\nconst RequestPage = React.lazy(() => import(\"./pages/Request\"));\nconst AuthPage = React.lazy(() => import(\"./pages/Auth\"));\nconst FeedPage = React.lazy(() => import(\"./pages/Feed\"));\nconst MoonPayPage = React.lazy(() => import(\"./pages/MoonPay\"));\nconst PublishContentPage = React.lazy(() =>\n  import(\"./pages/Profile/publishContent\")\n);\nconst offerServicePage = React.lazy(() =>\n  import(\"./pages/Profile/offerService\")\n);\nconst createPostPage = React.lazy(() => import(\"./pages/Profile/createPost\"));\nconst GoLivePage = React.lazy(() => import(\"./pages/Profile/goLive\"));\nconst OtherUserPage = React.lazy(() => import(\"./pages/OtherUser\"));\nconst Story = React.lazy(() => import(\"./pages/Story\"));\nconst Stories = React.lazy(() => import(\"./pages/Stories\"));\nconst QRScannerPage = React.lazy(() => import(\"./pages/QRScanner\"));\n\nconst PrivateRoute = ({ component, ...options }) => {\n  const authenticated = Store.useSelector(({ auth }) => auth.authenticated);\n  const authorizedComponent = authenticated ? component : AuthPage;\n\n  return <Route {...options} component={authorizedComponent} />;\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const authToken = Store.useSelector(({ node }) => node.authToken);\n  const authenticated = Store.useSelector(({ auth }) => auth.authenticated);\n  const publicKey = Store.useSelector(Store.selectSelfPublicKey);\n  const contacts = Store.useSelector(({ chat }) => chat.contacts);\n  const sentRequests = Store.useSelector(({ chat }) => chat.sentRequests);\n  const receivedRequests = Store.useSelector(\n    ({ chat }) => chat.receivedRequests\n  );\n\n  useEffect(() => {\n    videojs.addLanguage(\"en\", {\n      \"The media could not be loaded, either because the server or network failed or because the format is not supported.\":\n        \"Stream Not Available\"\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!authToken) {\n      dispatch(setAuthenticated(false));\n      return;\n    }\n\n    const decodedToken = JWTDecode(authToken);\n    // @ts-expect-error\n    const tokenExpired = decodedToken.exp * 1000 < Date.now();\n    setAuthenticated(tokenExpired);\n  }, [authToken, dispatch]);\n\n  const subbedUsers = useRef(/** @type {string[]} */ ([]));\n\n  useEffect(() => {\n    if (authenticated && dispatch) {\n      dispatch(loadSentRequests());\n      dispatch(loadReceivedRequests());\n      dispatch(subscribeUserProfile(publicKey));\n    }\n  }, [authenticated, dispatch, publicKey]);\n\n  // Keep this effect separate from the one above, as having both together\n  // causes an infinite loop due to implicit/explicit dependencies.\n  useEffect(() => {\n    if (authenticated && dispatch) {\n      const contactPKs = contacts.map(c => c.pk);\n      const sentReqsPKs = sentRequests.map(r => r.pk);\n      const receivedReqsPKs = receivedRequests.map(r => r.pk);\n\n      const publicKeysToSub = uniq(\n        /** @type {string[]} */ ([\n          ...contactPKs,\n          ...sentReqsPKs,\n          ...receivedReqsPKs\n        ])\n      ).filter(pk => !subbedUsers.current.includes(pk));\n\n      publicKeysToSub.forEach(pk => {\n        subbedUsers.current.push(pk);\n      });\n\n      batch(() => {\n        publicKeysToSub.forEach(pk => {\n          dispatch(subscribeUserProfile(pk));\n        });\n      });\n    }\n\n    return () => {\n      // https://github.com/facebook/react/issues/15841#issuecomment-500133759\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const { current: currentSubbedUsers } = subbedUsers;\n\n      batch(() => {\n        currentSubbedUsers.forEach(pk => {\n          dispatch(unsubscribeUserProfile(pk));\n        });\n      });\n\n      currentSubbedUsers.splice(0, currentSubbedUsers.length);\n    };\n  }, [\n    authenticated,\n    dispatch,\n    publicKey,\n    contacts,\n    sentRequests,\n    receivedRequests\n  ]);\n\n  return (\n    <FullHeight className=\"ShockWallet\">\n      <Drawer />\n      <Suspense fallback={<Loader fullScreen text={null} />}>\n        <Switch>\n          <Route path=\"/auth\" exact component={AuthPage} />\n          <PrivateRoute path=\"/overview\" exact component={OverviewPage} />\n          <PrivateRoute path=\"/advanced\" exact component={AdvancedPage} />\n          <PrivateRoute path=\"/chat\" exact component={MessagesPage} />\n          <PrivateRoute path=\"/chat/:publicKey\" component={ChatPage} />\n          <PrivateRoute path=\"/send\" exact component={SendPage} />\n          <PrivateRoute path=\"/request\" exact component={RequestPage} />\n          <PrivateRoute path=\"/profile\" exact component={ProfilePage} />\n          <PrivateRoute\n            path=\"/publishContent\"\n            exact\n            component={PublishContentPage}\n          />\n          <PrivateRoute path=\"/feed\" exact component={FeedPage} />\n          <PrivateRoute path=\"/moonpay\" exact component={MoonPayPage} />\n          <PrivateRoute path=\"/createPost\" exact component={createPostPage} />\n          <PrivateRoute path=\"/goLive\" exact component={GoLivePage} />\n          <PrivateRoute\n            path=\"/offerService\"\n            exact\n            component={offerServicePage}\n          />\n          <PrivateRoute path=\"/QRScanner\" exact component={QRScannerPage} />\n          <PrivateRoute\n            path=\"/otherUser/:publicKey\"\n            exact\n            component={OtherUserPage}\n          />\n          <Route path=\"/story\" exact component={Story} />\n          <Route path=\"/stories\" exact component={Stories} />\n          <Redirect to=\"/overview\" />\n        </Switch>\n      </Suspense>\n    </FullHeight>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Http from \"axios\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nHttp.defaults.timeout = 10000;\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <Router>\n          <App />\n        </Router>\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n","// @ts-check\nimport jwtDecode from \"jwt-decode\";\nimport Http from \"axios\";\nimport { ACTIONS as AUTH_ACTIONS, setAuthenticated } from \"./AuthActions\";\nimport { parseError } from \"../utils/Error\";\nimport { throttledExchangeKeyPair } from \"./EncryptionActions\";\n\nexport const ACTIONS = {\n  RESET_NODE_INFO: \"node/reset\",\n  SET_HOST_IP: \"node/hostIP\",\n  SET_HOST_ID: \"node/hostId\",\n  SET_AUTHENTICATED_USER: \"node/authenticatedUser\",\n  SET_CONNECTION_STATUS: \"node/connectionStatus\",\n  SET_NODE_HEALTH: \"node/health\",\n  SET_ATTEMPTS_DONE: \"node/attemptsDone\"\n};\n\nexport const resetNodeInfo = () => dispatch => {\n  dispatch({\n    type: ACTIONS.RESET_NODE_INFO\n  });\n};\n\nexport const setHostId = hostId => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_HOST_ID,\n    data: hostId\n  });\n};\n\nconst wait = ms => new Promise(r => setTimeout(r, ms));\n\nconst retryOperation = (operation, delay, retries) =>\n  new Promise((resolve, reject) => {\n    return operation()\n      .then(resolve)\n      .catch(reason => {\n        if (retries > 0) {\n          return wait(delay)\n            .then(retryOperation.bind(null, operation, delay, retries - 1))\n            .then(resolve)\n            .catch(reject);\n        }\n        return reject(reason);\n      });\n  });\n\nexport const fetchNodeHealth = (hostIP, retries) => async dispatch => {\n  try {\n    const { data } = await retryOperation(\n      async () => {\n        const { data } = await Http.get(`${hostIP}/healthz`);\n        if (!data) {\n          throw new Error(\n            `NodeActions->fetchNodeHealth()->No data obtained from healthz endpoint`\n          );\n        }\n        return { data };\n      },\n      1000,\n      retries\n    );\n\n    if (data.APIStatus?.message) {\n      dispatch({\n        type: ACTIONS.SET_CONNECTION_STATUS,\n        data: true\n      });\n    }\n\n    return data;\n  } catch (err) {\n    console.log(`NodeActions->fetchNodeHealth()->Error encountered:`);\n    console.log(err);\n    dispatch({\n      type: ACTIONS.SET_CONNECTION_STATUS,\n      data: false\n    });\n  }\n};\n\nexport const fetchNodeUnlockStatus = () => async dispatch => {\n  const { data } = await Http.get(\"/api/lnd/wallet/status\");\n  const { walletExists, walletStatus } = data;\n\n  if (walletExists) {\n    dispatch({\n      type: AUTH_ACTIONS.SET_AUTH_STEP,\n      data: walletStatus === \"locked\" ? \"unlockWallet\" : \"gunAuth\"\n    });\n    return walletStatus;\n  }\n\n  dispatch({\n    type: AUTH_ACTIONS.SET_AUTH_STEP,\n    data: \"createWallet\"\n  });\n\n  return \"createWallet\";\n};\n\nexport const connectHost = (\n  hostIP,\n  resetData = true,\n  retries = 0\n) => async dispatch => {\n  if (resetData) {\n    dispatch({\n      type: ACTIONS.RESET_NODE_INFO\n    });\n    dispatch({\n      type: AUTH_ACTIONS.RESET_AUTH_INFO\n    });\n  }\n  const done = async (host, health) => {\n    Http.defaults.baseURL = `${host}`;\n\n    dispatch({\n      type: ACTIONS.SET_HOST_IP,\n      data: host\n    });\n\n    await Promise.all([\n      dispatch(fetchNodeUnlockStatus()),\n      dispatch(throttledExchangeKeyPair())\n    ]);\n  };\n\n  let nodeHealthHttps;\n  const sanitizedHostIP = hostIP.replace(/^http(s)?:\\/\\//, \"\");\n  try {\n    nodeHealthHttps = await fetchNodeHealth(\n      `https://${sanitizedHostIP}`,\n      retries\n    )(dispatch);\n    if (nodeHealthHttps) {\n      nodeHealthHttps.withProtocolHostIP = `https://${sanitizedHostIP}`;\n      await done(`https://${sanitizedHostIP}`, nodeHealthHttps);\n      return nodeHealthHttps;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  console.error(\"cannot establish https connection, will try http\");\n  const nodeHealth = await fetchNodeHealth(\n    `http://${sanitizedHostIP}`,\n    retries\n  )(dispatch);\n  nodeHealth.withProtocolHostIP = `http://${sanitizedHostIP}`;\n  await done(`http://${sanitizedHostIP}`, nodeHealth);\n  return nodeHealthHttps || nodeHealth;\n};\n\nexport const unlockWallet = ({ alias, password }) => async dispatch => {\n  try {\n    const { data } = await Http.post(\n      \"/api/lnd/auth\",\n      {\n        alias,\n        password\n      },\n      {\n        // Unlocking can take significantly longer than other endpoints\n        timeout: 30000\n      }\n    );\n\n    dispatch(setAuthenticated(true));\n    const decodedToken = jwtDecode(data.authorization);\n    dispatch({\n      type: ACTIONS.SET_AUTHENTICATED_USER,\n      data: {\n        alias: data.user.alias,\n        authToken: data.authorization,\n        publicKey: data.user.publicKey,\n        // @ts-expect-error\n        authTokenExpirationDate: decodedToken.exp\n      }\n    });\n    return data;\n  } catch (err) {\n    dispatch(setAuthenticated(false));\n    throw parseError(err);\n  }\n};\n\nexport const createAlias = ({ alias, password }) => async dispatch => {\n  try {\n    const { data } = await Http.post(\"/api/lnd/wallet/existing\", {\n      alias,\n      password\n    });\n\n    dispatch(setAuthenticated(true));\n    const decodedToken = jwtDecode(data.authorization);\n    dispatch({\n      type: ACTIONS.SET_AUTHENTICATED_USER,\n      data: {\n        alias: data.user.alias,\n        authToken: data.authorization,\n        publicKey: data.user.publicKey,\n        // @ts-expect-error\n        authTokenExpirationDate: decodedToken.exp\n      }\n    });\n    return data;\n  } catch (err) {\n    dispatch(setAuthenticated(false));\n    throw parseError(err);\n  }\n};\n\nexport const createWallet = ({ alias, password }) => async dispatch => {\n  try {\n    const { data } = await Http.post(\n      \"/api/lnd/wallet\",\n      {\n        alias,\n        password\n      },\n      {\n        // Creating a wallet can take longer than any other endpoints.\n        timeout: 30000\n      }\n    );\n\n    dispatch(setAuthenticated(true));\n    const decodedToken = jwtDecode(data.authorization);\n    dispatch({\n      type: ACTIONS.SET_AUTHENTICATED_USER,\n      data: {\n        alias: data.user.alias,\n        authToken: data.authorization,\n        publicKey: data.user.publicKey,\n        // @ts-expect-error\n        authTokenExpirationDate: decodedToken.exp\n      }\n    });\n    return data;\n  } catch (err) {\n    dispatch(setAuthenticated(false));\n    throw parseError(err);\n  }\n};\n\nexport const SetAttemptsDone = () => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_ATTEMPTS_DONE\n  });\n};\n","export type FieldErrorType = {\n  message: string;\n  field: string;\n  name?: string;\n  stack?: string;\n};\n\nclass FieldError extends Error {\n  field: string;\n\n  constructor(error: any) {\n    super();\n    this.message = error?.message ?? \"An unknown error has occurred\";\n    this.field = error?.field ?? \"unknown\";\n    this.name = error?.name;\n    this.stack = error?.stack;\n  }\n}\n\nexport default FieldError;\n","import { GUN_PROPS } from \"../utils/Gun\";\nimport Http from \"../utils/Http\";\nimport { disconnectRifleSocket, rifle } from \"../utils/WebSocket\";\nimport {\n  subscribeUserProfile,\n  unsubscribeUserProfile\n} from \"./UserProfilesActions\";\n\nexport const ACTIONS = {\n  RESET_FEED: \"feed/reset\",\n  ADD_FOLLOW: \"feed/follows/add\",\n  REMOVE_FOLLOW: \"feed/follows/remove\",\n  UPDATE_FOLLOW: \"feed/follows/update\",\n  LOAD_POSTS: \"feed/posts/load\",\n  ADD_USER_POST: \"feed/posts/add\",\n  DELETE_USER_POST: \"feed/posts/delete\",\n  LOAD_SHARED_POST: \"feed/sharedPosts/load\",\n  POST_TIPPED: \"feed/posts/tipped\"\n};\n\nexport const removeFollow = key => dispatch =>\n  dispatch({\n    type: ACTIONS.REMOVE_FOLLOW,\n    data: key\n  });\n\nexport const addFollow = follow => dispatch =>\n  dispatch({\n    type: ACTIONS.ADD_FOLLOW,\n    data: follow\n  });\n\nexport const loadSharedPost = (\n  postId,\n  publicKey,\n  sharerPublicKey\n) => async dispatch => {\n  const { data: post } = await Http.get(\n    `/api/gun/otheruser/${publicKey}/load/posts>${postId}`\n  );\n  dispatch(subscribeUserProfile(publicKey));\n\n  dispatch({\n    type: ACTIONS.LOAD_SHARED_POST,\n    data: {\n      ...post.data,\n      authorId: publicKey,\n      sharerId: sharerPublicKey,\n      id: postId\n    }\n  });\n};\n\nexport const subscribeUserPosts = publicKey => async (dispatch, getState) => {\n  const { hostIP } = getState().node;\n  const subscription = await rifle({\n    host: hostIP,\n    query: `${publicKey}::posts::on`\n  });\n  subscription.on(\"$shock\", posts => {\n    const postEntries = Object.entries(posts);\n    const newPosts = postEntries\n      .filter(([key, value]) => value !== null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n    const deletedPosts = postEntries\n      .filter(([key, value]) => value === null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n\n    newPosts.map(async id => {\n      const { data: post } = await Http.get(\n        `/api/gun/otheruser/${publicKey}/load/posts>${id}`\n      );\n\n      dispatch({\n        type: ACTIONS.ADD_USER_POST,\n        data: {\n          ...post.data,\n          id,\n          authorId: publicKey,\n          type: \"post\"\n        }\n      });\n    });\n\n    deletedPosts.map(id =>\n      dispatch({\n        type: ACTIONS.DELETE_USER_POST,\n        data: {\n          id,\n          authorId: publicKey,\n          type: \"post\"\n        }\n      })\n    );\n  });\n  return subscription;\n};\n\nexport const subscribeSharedUserPosts = publicKey => async (\n  dispatch,\n  getState\n) => {\n  const { hostIP } = getState().node;\n  const subscription = await rifle({\n    host: hostIP,\n    query: `${publicKey}::sharedPosts::on`\n  });\n  subscription.on(\"$shock\", posts => {\n    const postEntries = Object.entries(posts);\n    const newPosts = postEntries\n      .filter(([key, value]) => value !== null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n    const deletedPosts = postEntries\n      .filter(([key, value]) => value === null && !GUN_PROPS.includes(key))\n      .map(([key]) => key);\n\n    newPosts.map(async id => {\n      const { data: post } = await Http.get(\n        `/api/gun/otheruser/${publicKey}/load/sharedPosts>${id}`\n      );\n\n      dispatch({\n        type: ACTIONS.ADD_USER_POST,\n        data: {\n          ...post.data,\n          id,\n          authorId: publicKey,\n          type: \"shared\"\n        }\n      });\n\n      await loadSharedPost(id, post.data.originalAuthor, publicKey)(dispatch);\n    });\n\n    deletedPosts.map(id =>\n      dispatch({\n        type: ACTIONS.DELETE_USER_POST,\n        data: {\n          id,\n          authorId: publicKey\n        }\n      })\n    );\n  });\n  return subscription;\n};\n\nexport const subscribeFollows = () => async (dispatch, getState) => {\n  const { hostIP, publicKey } = getState().node;\n  const subscription = await rifle({\n    host: hostIP,\n    query: \"$user::follows::map.on\",\n    reconnect: true\n  });\n  console.log(\"subbing follows\");\n  //-- Subscribe to self, posts and shared posts are merged\n  //dispatch(subscribeUserProfile(publicKey))\n  dispatch(subscribeUserPosts(publicKey));\n  dispatch(subscribeSharedUserPosts(publicKey));\n\n  subscription.on(\"$shock\", async (follow, key) => {\n    if (typeof key !== \"string\") {\n      console.warn(`Invalid follow key received: ${key}`);\n      return;\n    }\n\n    if (!follow) {\n      unsubscribeUserProfile(key);\n      dispatch(removeFollow(key));\n      return;\n    }\n\n    if (typeof follow.user !== \"string\") {\n      console.warn(`Invalid follow user received (${follow.user})`);\n      return;\n    }\n\n    dispatch(addFollow(follow));\n    dispatch(subscribeUserProfile(follow.user));\n    dispatch(subscribeUserPosts(follow.user));\n    dispatch(subscribeSharedUserPosts(follow.user));\n  });\n\n  return subscription;\n};\n\nexport const sendTipPost = ({\n  publicKey,\n  postId,\n  amount\n}) => async dispatch => {\n  const { data } = await Http.post(\"/api/lnd/unifiedTrx\", {\n    type: \"tip\",\n    amt: amount,\n    to: publicKey,\n    memo: \"Post Tipped!\",\n    feeLimit: amount * 0.006 + 10, // TODO: Hardcoded fees for now\n    ackInfo: postId\n  });\n  console.log(data);\n  dispatch({\n    type: ACTIONS.POST_TIPPED,\n    data: {\n      publicKey,\n      postId,\n      amount\n    }\n  });\n};\n","export type Contact = {\n  pk: string;\n  avatar: string | null;\n  displayName: string | null;\n};\n\nexport interface ReceivedRequest {\n  id: string;\n  pk: string;\n  avatar: string | null;\n  displayName: string | null;\n  timestamp: number;\n}\n\nexport interface SentRequest {\n  id: string;\n  pk: string;\n  avatar: string | null;\n  displayName: string | null;\n  changedAddress: boolean;\n  timestamp: number;\n  loading: boolean;\n}\n\nexport type ChatMessageStatus = \"SENT\" | \"SENDING\" | \"FAILED\" | \"RECEIVED\";\n\nexport const CHAT_MESSAGE_STATUS = {\n  SENT: \"SENT\",\n  SENDING: \"SENDING\",\n  FAILED: \"FAILED\",\n  RECEIVED: \"RECEIVED\"\n} as const;\n\nexport interface ChatMessage {\n  body: string;\n  id: string;\n  localId: string;\n  outgoing: boolean;\n  recipientPublicKey: string;\n  status: ChatMessageStatus;\n  timestamp: number;\n}\n","import { AxiosError } from \"axios\";\nimport FieldError, { FieldErrorType } from \"./FieldError\";\n\nexport type MixedError = Error | AxiosError | FieldErrorType;\n\nexport const parseError = (error: MixedError) => {\n  if (\"response\" in error) {\n    const response = error.response?.data;\n    return new FieldError({\n      field: response?.field ?? \"unknown\",\n      message: response?.errorMessage ?? \"An unknown error has occurred\"\n    });\n  }\n\n  return new FieldError({\n    field: (\"field\" in error && error.field) ?? \"unknown\",\n    message: error.message ?? \"An unknown error has occurred\"\n  });\n};\n","import { v4 as uuidv4 } from \"uuid\";\nimport Http from \"axios\";\nimport { setHostId } from \"./NodeActions\";\nimport { generateKeyPair } from \"../utils/Encryption\";\n\nexport const ACTIONS = {\n  ADD_USER_KEY_PAIR: \"encryption/userKeyPair\",\n  ADD_HOST_KEY: \"encryption/hostKey\",\n  SET_DEVICE_ID: \"encryption/deviceId\"\n};\n\nlet exchangingKeypair = null;\n\nexport const generateDeviceId = () => dispatch => {\n  const deviceId = uuidv4();\n  dispatch({\n    type: ACTIONS.SET_DEVICE_ID,\n    data: deviceId\n  });\n  return deviceId;\n};\n\nexport const addUserKeyPair = ({ hostId, keyPair }) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_USER_KEY_PAIR,\n    data: { hostId, keyPair }\n  });\n};\n\nexport const addHostKey = ({ hostId, publicKey }) => dispatch => {\n  dispatch({\n    type: ACTIONS.ADD_HOST_KEY,\n    data: {\n      hostId,\n      publicKey\n    }\n  });\n};\n\nconst getDeviceId = () => (dispatch, getState) => {\n  const { deviceId } = getState().node;\n\n  if (!deviceId) {\n    const newDeviceId = dispatch(generateDeviceId());\n    return newDeviceId;\n  }\n\n  return deviceId;\n};\n\nexport const exchangeKeyPair = () => async dispatch => {\n  try {\n    const deviceId = dispatch(getDeviceId());\n\n    const keyPair = generateKeyPair();\n    const { data } = await Http.post(`/api/encryption/exchange`, {\n      publicKey: keyPair.publicKeyBase64,\n      deviceId\n    });\n\n    dispatch(\n      addUserKeyPair({\n        hostId: data.hostId,\n        keyPair\n      })\n    );\n\n    dispatch(\n      addHostKey({\n        hostId: data.hostId,\n        publicKey: data.APIPublicKey\n      })\n    );\n\n    dispatch(setHostId(data.hostId));\n\n    return {\n      user: keyPair,\n      host: data\n    };\n  } catch (err) {\n    console.error(\"[ENCRYPTION] Key Exchange Error:\", err);\n    throw err;\n  }\n};\n\nexport const throttledExchangeKeyPair = () => async dispatch => {\n  try {\n    if (!exchangingKeypair) {\n      exchangingKeypair = dispatch(exchangeKeyPair());\n    }\n\n    const result = await exchangingKeypair;\n\n    // eslint-disable-next-line require-atomic-updates\n    exchangingKeypair = null;\n\n    return result;\n  } catch (err) {\n    console.error(err);\n    exchangingKeypair = null;\n    throw err;\n  }\n};\n","export const ACTIONS = {\n  SET_DRAWER_OPEN: \"drawer/open\"\n};\n\nexport const openDrawer = () => async dispatch => {\n  dispatch({\n    type: ACTIONS.SET_DRAWER_OPEN,\n    data: true\n  });\n};\n\nexport const closeDrawer = () => async dispatch => {\n  dispatch({\n    type: ACTIONS.SET_DRAWER_OPEN,\n    data: false\n  });\n};\n","import Http from \"../utils/Http\";\n\nexport const ACTIONS = {\n  RESET_FEES: \"fees/reset\",\n  LOAD_FEE_RATES: \"fees/feeRates/load\",\n  SET_SOURCE: \"fees/source/set\",\n  SET_RATE: \"fees/rate/set\"\n};\n\nexport const loadFeeRates = () => async (dispatch, getState) => {\n  const { source } = getState().fees;\n  const { data } = await Http.get(source);\n\n  dispatch({\n    type: ACTIONS.LOAD_FEE_RATES,\n    data\n  });\n\n  return data;\n};\n\nexport const setSource = source => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_SOURCE,\n    data: source\n  });\n\n  return source;\n};\n\nexport const setRate = rate => dispatch => {\n  dispatch({\n    type: ACTIONS.SET_RATE,\n    data: rate\n  });\n\n  return rate;\n};\n","export const GUN_PROPS = [\"_\", \"#\"];\n","export const initialMessagePrefix = \"$$__SHOCKWALLET__INITIAL__MESSAGE\";\n\nexport const invoiceMessagePrefix = \"$$__SHOCKWALLET__INVOICE__\";\n\nexport const userMessagePrefix = \"$$__SHOCKWALLET__USER__\";\n\nexport const capitalizeText = text =>\n  text\n    .split(\" \")\n    .map(\n      word => `${word.slice(0, 1).toUpperCase()}${word.slice(1).toLowerCase()}`\n    )\n    .join(\" \");\n\nexport const processDisplayName = (publicKey = \"\", displayName = \"\") => {\n  if (displayName) {\n    return displayName;\n  }\n\n  const suffix = publicKey.slice(-8);\n\n  return `Anon${suffix}`;\n};\n"],"sourceRoot":""}