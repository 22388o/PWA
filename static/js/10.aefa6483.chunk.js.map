{"version":3,"sources":["common/Post/components/Image/index.js","common/Post/SharedPost.tsx"],"names":["Image","id","item","index","postId","tipValue","tipCounter","hideRibbon","width","disableZoom","style","useState","zoomed","setZoomed","zoomLoaded","setZoomLoaded","previewVisible","setPreviewVisible","animationTimer","setAnimationTimer","handleZoomChange","useCallback","value","clearTimeout","timer","setTimeout","contentURL","decodeURIComponent","magnetURI","replace","mainImageStyle","opacity","imgNode","className","alt","data-torrent","data-file-key","src","onLoad","display","isZoomed","onZoomChange","overlayBgColorStart","overlayBgColorEnd","memo","SharedPost","postID","sharerPublicKey","openTipModal","openUnlockModal","openDeleteModal","Utils","openShareModal","dispatch","Store","sharerProfile","sharedPost","originalPost","originalAuthor","deletePost","shared","React","useEffect","subscribeUserProfile","subSinglePost","subPostContent","useLayoutEffect","Tooltip","rebuild","height","publicKey","amt","insideRow","displayName","DateTime","fromMillis","shareDate","toRelative","onClick","text"],"mappings":"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","file":"static/js/10.aefa6483.chunk.js","sourcesContent":["import React, { memo, useState, useCallback } from \"react\";\nimport { Controlled as ControlledZoom } from \"react-medium-image-zoom\";\nimport TipRibbon from \"../TipRibbon\";\nimport \"react-medium-image-zoom/dist/styles.css\";\nimport \"./css/index.scoped.css\";\n\nconst IMAGE_TRANSITION_MS = 200;\n\nconst Image = ({\n  id = \"\",\n  item,\n  index = 0,\n  postId = \"\",\n  tipValue = 0,\n  tipCounter = 0,\n  hideRibbon = false,\n  width = null,\n  disableZoom = false,\n  style = /** @type {import('react').CSSProperties} */ ({})\n}) => {\n  const [zoomed, setZoomed] = useState(false);\n  const [zoomLoaded, setZoomLoaded] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(true);\n  const [animationTimer, setAnimationTimer] = useState(null);\n\n  const handleZoomChange = useCallback(\n    value => {\n      clearTimeout(animationTimer);\n      setZoomed(value);\n      if (!value && zoomLoaded) {\n        setZoomLoaded(false);\n        const timer = setTimeout(() => {\n          setPreviewVisible(true);\n        }, IMAGE_TRANSITION_MS);\n        setAnimationTimer(timer);\n      }\n\n      if (value) {\n        setPreviewVisible(false);\n      }\n    },\n    [\n      animationTimer,\n      zoomLoaded,\n      setZoomed,\n      setZoomLoaded,\n      setPreviewVisible,\n      setAnimationTimer\n    ]\n  );\n\n  const contentURL = decodeURIComponent(\n    item.magnetURI.replace(/.*(ws=)/gi, \"\")\n  );\n  const mainImageStyle = { ...style, opacity: previewVisible ? 1 : 0 };\n  if (width) {\n    mainImageStyle.width = width;\n  }\n\n  const imgNode = (\n    <>\n      <img\n        className={`image torrent-img torrent-img-${postId}-${id}`}\n        alt=\"Post Media\"\n        data-torrent={item.magnetURI}\n        data-file-key={index}\n        style={mainImageStyle}\n        src={contentURL}\n      />\n      <img\n        className={`image enlarged-img enlarged-img-${postId}-${id}`}\n        alt=\"Post Media\"\n        data-file-key={index}\n        onLoad={() => {\n          setZoomLoaded(true);\n        }}\n        style={{\n          opacity: zoomed ? 1 : 0,\n          display: zoomed ? \"block\" : \"none\"\n        }}\n        src={contentURL}\n      />\n      {!hideRibbon && (\n        <TipRibbon\n          tipCounter={tipCounter}\n          tipValue={tipValue}\n          zoomed={zoomed}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <div className=\"media-container\">\n      {disableZoom ? (\n        imgNode\n      ) : (\n        <ControlledZoom\n          isZoomed={zoomed}\n          onZoomChange={handleZoomChange}\n          overlayBgColorStart=\"#16191c00\"\n          overlayBgColorEnd=\"#16191c\"\n        >\n          {imgNode}\n        </ControlledZoom>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Image);\n","import React, { memo, useCallback, useLayoutEffect } from \"react\";\nimport { DateTime } from \"luxon\";\nimport Tooltip from \"react-tooltip\";\n\nimport Post from \".\";\n\nimport * as Store from \"../../store\";\nimport * as Utils from \"../../utils\";\nimport Loader from \"../Loader\";\nimport ShockAvatar from \"../ShockAvatar\";\nimport Pad from \"../Pad\";\nimport { subPostContent, subSinglePost } from \"../../actions/FeedActions\";\nimport { subscribeUserProfile } from \"../../actions/UserProfilesActions\";\nimport \"../Post/css/index.scoped.css\";\n\nexport interface SharedPostProps {\n  postID: string;\n  sharerPublicKey: string;\n  openTipModal?(tipData: any): void;\n  openUnlockModal?(unlockData: any): void;\n  openDeleteModal?(params: { id: string; shared: boolean }): void;\n  openShareModal?(shareData: any): void;\n}\n\nconst SharedPost = ({\n  postID,\n  sharerPublicKey,\n  openTipModal,\n  openUnlockModal,\n  openDeleteModal = Utils.EMPTY_FN,\n  openShareModal = Utils.EMPTY_FN\n}: SharedPostProps) => {\n  const dispatch = Store.useDispatch();\n\n  const sharerProfile = Store.useSelector(Store.selectUser(sharerPublicKey));\n  const sharedPost = Store.useSelector(\n    Store.selectSharedPost(sharerPublicKey, postID)\n  );\n  const originalPost = Store.useSelector(\n    Store.selectSinglePost(sharedPost.originalAuthor, postID)\n  );\n\n  const deletePost = useCallback(() => {\n    openDeleteModal({ id: originalPost.id, shared: true });\n  }, [originalPost, openDeleteModal]);\n\n  React.useEffect(\n    () => dispatch(subscribeUserProfile(sharedPost.originalAuthor)),\n    [dispatch, sharedPost.originalAuthor]\n  );\n\n  React.useEffect(\n    () => dispatch(subscribeUserProfile(sharerPublicKey)),\n    [dispatch, sharerPublicKey]\n  );\n\n  React.useEffect(\n    () => dispatch(subSinglePost(sharedPost.originalAuthor, postID)),\n    [dispatch, postID, sharedPost.originalAuthor]\n  );\n\n  React.useEffect(\n    () => dispatch(subPostContent(sharedPost.originalAuthor, postID)),\n    [dispatch, postID, sharedPost.originalAuthor]\n  );\n\n  useLayoutEffect(() => {\n    Tooltip.rebuild();\n  }, []);\n\n  return (\n    <div className=\"post shared-post\">\n      <div className=\"head\">\n        <div className=\"user\">\n          <ShockAvatar height={50} publicKey={sharerPublicKey} />\n\n          <Pad amt={10} insideRow />\n\n          <div className=\"details\">\n            <p>{sharerProfile?.displayName}</p>\n            <p>\n              {/* @ts-ignore */}\n              Shared {DateTime.fromMillis(sharedPost.shareDate).toRelative()}\n            </p>\n          </div>\n        </div>\n        {openDeleteModal && (\n          <i className=\"fas fa-trash\" onClick={deletePost}></i>\n        )}\n      </div>\n\n      <div className=\"shared-content\">\n        {originalPost ? (\n          <Post\n            id={originalPost.id}\n            publicKey={sharedPost.originalAuthor}\n            openTipModal={openTipModal}\n            openUnlockModal={openUnlockModal}\n            openShareModal={openShareModal}\n          />\n        ) : (\n          <Loader text=\"Loading Post...\" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SharedPost);\n"],"sourceRoot":""}