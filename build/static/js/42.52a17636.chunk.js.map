{"version":3,"sources":["common/TipModal/components/Modal/index.tsx"],"names":["TipModalContent","publicKey","tipData","toggleOpen","dispatch","useDispatch","me","useSelector","guest","user","paymentRequest","response","useState","tipLoading","setTipLoading","tipAmount","setTipAmount","copied","setCopied","ackNode","setAckNode","done","setDone","setCopiedStatus","useCallback","Tooltip","rebuild","timer","setTimeout","clearTimeout","sendTip","a","payUser","senderPair","recipientPublicKey","amount","parseFloat","metadata","targetType","ackInfo","postID","console","error","useEffect","fetchPath","query","then","res","type","closeTipModal","step","className","text","style","marginBottom","value","onChange","e","target","size","bgColor","fgColor","href","onCopy","onClick"],"mappings":"oQA0JeA,UAhJS,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACvCC,EAAWC,wBACXC,EAAKC,uBAAY,qBAAGC,MAAkBC,QACtCC,EAAiBH,uBACrB,qCAAGC,MAAkBE,sBAArB,aAAe,EAAsBC,YAJuB,EAO1BC,oBAAS,GAPiB,mBAOvDC,EAPuD,KAO3CC,EAP2C,OAQ5BF,mBAAS,MARmB,mBAQvDG,EARuD,KAQ5CC,EAR4C,OASlCJ,oBAAS,GATyB,mBASvDK,EATuD,KAS/CC,EAT+C,OAUhCN,mBAAS,IAVuB,mBAUvDO,EAVuD,KAU9CC,EAV8C,OAWtCR,oBAAS,GAX6B,mBAWvDS,EAXuD,KAWjDC,EAXiD,KAaxDC,EAAkBC,uBAAY,WAClCN,GAAU,GACVO,IAAQC,UACR,IAAMC,EAAQC,YAAW,WACvBV,GAAU,GACVO,IAAQC,YACP,KAEH,OAAO,WACLG,aAAaF,MAEd,IAEGG,EAAUN,sBAAW,sBAAC,8BAAAO,EAAA,sEAExBjB,GAAc,GAFU,SAGEV,EACxB4B,YAAQ,CACNC,WAAY3B,EACZ4B,mBAAoBjC,EACpBkC,OAAQC,WAAWrB,GACnBsB,SAAU,CACRC,WAAY,MACZC,QAASrC,EAAQsC,WAVC,gBAGhBrB,EAHgB,EAGhBA,QAWRL,GAAc,GACVK,GACFC,EAAWD,GAhBW,kDAmBxBsB,QAAQC,MAAR,MAnBwB,0DAqBzB,CAACtC,EAAUE,EAAIL,EAAWc,EAAWb,EAAQsC,SAEhDG,qBAAU,WACHxB,GAGLyB,YAAU,CACRC,MAAM,GAAD,OAAK5C,EAAL,6BAAmCkB,EAAnC,UAEJ2B,MAAK,kBACJF,YAAU,CACRC,MAAM,GAAD,OAAK5C,EAAL,6BAAmCkB,QAG3C2B,MAAK,SAAAC,GACa,aAAbA,EAAIC,MACN1B,GAAQ,QAGb,CAACH,EAASlB,EAAWqB,IAExB,IAAM2B,EAAgBzB,uBAAY,WAChCrB,MACC,CAACA,IAEA+C,EAAO,GAGX,OAFIxC,IAAgBwC,EAAO,kBACvB7B,IAAM6B,EAAO,QAEf,sBAAKC,UAAU,YAAf,+BACGtC,EACC,qBAAKsC,UAAU,oBAAf,8BACE,cAAC,IAAD,CACEC,KAAK,4BACLC,MAAO,CAAEC,aAAc,GAFzB,yBAKA,KACJ,qBAAKH,UAAU,iBAAf,8BACE,qBAAKA,UAAU,kBAAf,6CAEQ,KAATD,GACC,sBAAKC,UAAU,oBAAf,+BACE,mBAAGA,UAAU,yBAAb,0JAIA,uBACEA,UAAU,kBACVI,MAAOxC,EACPyC,SAAU,SAAAC,GAAC,OAAIzC,EAAayC,EAAEC,OAAOH,QAHvC,0BAOM,mBAATL,GACC,sBAAKC,UAAU,oBAAf,+BACE,mBAAGA,UAAU,yBAAb,4JAIA,qBAAKA,UAAU,8BAAf,8BACE,cAAC,IAAD,CACEI,MAAO7C,EACPiD,KAAM,IACNC,QAAQ,UACRC,QAAQ,UAJV,yBAOF,sBAAKV,UAAU,wBAAf,+BACE,mBACEW,KAAI,oBAAepD,GACnByC,UAAU,uBAFZ,8CAMA,cAAC,IAAD,CAAeC,KAAM1C,EAAgBqD,OAAQxC,EAA7C,8BACE,qBAAK4B,UAAU,uBAAf,8BACGlC,EAAS,kBAAoB,yBAM9B,SAATiC,GACC,qBAAKC,UAAU,mBAAmBa,QAASf,EAA3C,8BACE,qBAAKE,UAAU,mBAAf,8CAGM,KAATD,GACC,qBAAKC,UAAU,mBAAmBa,QAASlC,EAA3C,8BACE,qBAAKqB,UAAU,mBAAf,kD","file":"static/js/42.52a17636.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"../../../../store\";\nimport CopyClipboard from \"react-copy-to-clipboard\";\nimport Tooltip from \"react-tooltip\";\nimport QRCode from \"react-qr-code\";\nimport { payUser } from \"../../../../actions/GuestActions\";\nimport Loader from \"../../../Loader\";\nimport \"./css/index.scoped.css\";\nimport { fetchPath } from \"../../../../utils/Gun\";\n\nconst TipModalContent = ({ publicKey, tipData, toggleOpen }) => {\n  const dispatch = useDispatch();\n  const me = useSelector(({ guest }) => guest.user);\n  const paymentRequest = useSelector(\n    ({ guest }) => guest.paymentRequest?.response\n  );\n\n  const [tipLoading, setTipLoading] = useState(false);\n  const [tipAmount, setTipAmount] = useState(\"10\");\n  const [copied, setCopied] = useState(false);\n  const [ackNode, setAckNode] = useState(\"\");\n  const [done, setDone] = useState(false);\n\n  const setCopiedStatus = useCallback(() => {\n    setCopied(true);\n    Tooltip.rebuild();\n    const timer = setTimeout(() => {\n      setCopied(false);\n      Tooltip.rebuild();\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  const sendTip = useCallback(async () => {\n    try {\n      setTipLoading(true);\n      const { ackNode } = await dispatch(\n        payUser({\n          senderPair: me,\n          recipientPublicKey: publicKey,\n          amount: parseFloat(tipAmount),\n          metadata: {\n            targetType: \"tip\",\n            ackInfo: tipData.postID\n          }\n        })\n      );\n      setTipLoading(false);\n      if (ackNode) {\n        setAckNode(ackNode);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [dispatch, me, publicKey, tipAmount, tipData.postID]);\n\n  useEffect(() => {\n    if (!ackNode) {\n      return;\n    }\n    fetchPath({\n      query: `${publicKey}::orderToResponse/${ackNode}::on`\n    })\n      .then(() =>\n        fetchPath({\n          query: `${publicKey}::orderToResponse/${ackNode}`\n        })\n      )\n      .then(res => {\n        if (res.type === \"orderAck\") {\n          setDone(true);\n        }\n      });\n  }, [ackNode, publicKey, setDone]);\n\n  const closeTipModal = useCallback(() => {\n    toggleOpen();\n  }, [toggleOpen]);\n\n  let step = \"\";\n  if (paymentRequest) step = \"paymentRequest\";\n  if (done) step = \"done\";\n  return (\n    <div className=\"tip-modal\">\n      {tipLoading ? (\n        <div className=\"tip-modal-loading\">\n          <Loader\n            text=\"Submitting Tip Request...\"\n            style={{ marginBottom: 0 }}\n          />\n        </div>\n      ) : null}\n      <div className=\"tip-modal-head\">\n        <div className=\"tip-modal-title\">Send Tip</div>\n      </div>\n      {step === \"\" && (\n        <div className=\"tip-modal-content\">\n          <p className=\"tip-modal-instructions\">\n            Please specify the amount of sats you'd like to tip this user with\n            below and we'll generate an invoice for you to scan.\n          </p>\n          <input\n            className=\"tip-modal-input\"\n            value={tipAmount}\n            onChange={e => setTipAmount(e.target.value)}\n          />\n        </div>\n      )}\n      {step === \"paymentRequest\" && (\n        <div className=\"tip-modal-content\">\n          <p className=\"tip-modal-instructions\">\n            We've successfully generated an invoice for you to tip, please scan\n            the QR Code below using a Lightning wallet to pay it!\n          </p>\n          <div className=\"tip-modal-qr-code-container\">\n            <QRCode\n              value={paymentRequest}\n              size={210}\n              bgColor=\"#4db1ff\"\n              fgColor=\"#1b2129\"\n            />\n          </div>\n          <div className=\"tip-modal-action-btns\">\n            <a\n              href={`lightning:${paymentRequest}`}\n              className=\"tip-modal-action-btn\"\n            >\n              PAY INVOICE\n            </a>\n            <CopyClipboard text={paymentRequest} onCopy={setCopiedStatus}>\n              <div className=\"tip-modal-action-btn\">\n                {copied ? \"INVOICE COPIED!\" : \"COPY INVOICE\"}\n              </div>\n            </CopyClipboard>\n          </div>\n        </div>\n      )}\n      {step === \"done\" && (\n        <div className=\"tip-modal-footer\" onClick={closeTipModal}>\n          <div className=\"tip-modal-submit\">TIP SENT!</div>\n        </div>\n      )}\n      {step === \"\" && (\n        <div className=\"tip-modal-footer\" onClick={sendTip}>\n          <div className=\"tip-modal-submit\">SEND TIP</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TipModalContent;\n"],"sourceRoot":""}