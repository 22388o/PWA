{"version":3,"sources":["common/Modal/components/ModalSubmit/index.js","../node_modules/uuid/dist/esm-browser/v1.js","pages/Profile/components/UploadThumbnail/components/Thumbnail/index.tsx","pages/Profile/components/UploadThumbnail/components/CustomThumbnail/index.tsx","pages/Profile/components/UploadThumbnail/index.tsx","pages/Profile/PublishContent.tsx"],"names":["ModalSubmit","text","onClick","className","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","Array","node","clockseq","undefined","seedBytes","random","rng","msecs","Date","now","nsecs","dt","Error","tl","tmh","n","stringify","Thumbnail","thumbnail","selected","setSelectedThumbnail","selectThumbnail","useCallback","classNames","choice","active","style","backgroundImage","preview","CustomThumbnail","onUpload","removeCustomThumbnail","htmlFor","type","id","onChange","multiple","accept","getCanvasBlob","canvas","Promise","resolve","toBlob","blob","extractFramesFromVideo","videoObjectUrl","a","fps","limit","randomFrames","video","document","createElement","addEventListener","seekResolve","src","duration","Infinity","isNaN","readyState","r","setTimeout","currentTime","Math","context","getContext","videoWidth","videoHeight","w","h","width","height","frames","interval","length","promiseSeekResolve","drawImage","base64ImageData","toDataURL","canvasBlob","push","UploadThumbnail","open","toggleModal","target","setVideoThumbnails","useState","selectedThumbnail","setSelectedThumbnailPreview","selectedThumbnailFile","setSelectedThumbnailFile","customThumbnail","setCustomThumbnail","videoPlaying","setVideoPlaying","videoFrames","setVideoFrames","videoElement","useRef","e","files","includes","reader","FileReader","result","data","console","log","readAsDataURL","loadVideoFrames","uri","useEffect","updateThumbnail","targetName","index","thumbnails","playVideo","current","paused","pause","play","onEnded","Modal","modalOpen","modalTitle","map","frame","alt","ref","PublishContentPage","dispatch","useDispatch","history","useHistory","seedProviderPub","Store","content","seedInfo","seedUrl","seedToken","availableTokens","userProfiles","error","setError","loading","setLoading","mediaPreviews","setMediaPreviews","title","setTitle","thumbnailOpen","setThumbnailOpen","videoThumbnails","thumbnailTarget","setThumbnailTarget","titleMissing","setTitleMissing","description","setDescription","postType","setPostType","imageFile","videoFile","promptInfo","setPromptInfo","selfPublicKey","selectedFiles","setSelectedFiles","onSubmitCb","servicePrice","serviceID","res","RequestToken","finalSeedUrl","tokens","deleteToken","formData","FormData","all","extension","file","replace","fileName","append","fetch","method","headers","Authorization","body","json","resJson","message","err","removeUnavailableToken","torrent","magnet","firstFile","contentItem","uuid","timestamp","author","magnetURI","addPublishedContent","published","then","txt","catch","errorMessage","closePrompt","submitPrompt","onSubmit","preventDefault","availableToken","key","Object","prototype","hasOwnProperty","call","offerSeedService","Http","get","onDiscard","onInputChange","value","name","onSelectedFile","promises","from","onload","startsWith","allSettled","previews","forEach","singleRes","status","onSelectImageFile","click","onSelectVideoFile","DarkPage","padding","pageTitle","scrolls","Loader","overlay","fullScreen","onReset","display","alignItems","justifyContent","appearance","backgroundColor","color","marginLeft","placeholder","c","gStyles","prev","toString","controls","rows","contentClass","forceRenderTitleBar","blueBtn","noFullWidth","onClickBlueBtn"],"mappings":"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","file":"static/js/27.3eed9db4.chunk.js","sourcesContent":["import \"./ModalSubmit.scoped.css\";\n\nconst ModalSubmit = ({ text = \"Submit\", onClick }) => {\n  return (\n    <div className=\"submit-btn\" onClick={onClick}>\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default ModalSubmit;\n","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import { useCallback } from \"react\";\nimport classNames from \"classnames\";\nimport \"./css/index.scoped.css\";\n\nconst Thumbnail = ({ thumbnail, selected, setSelectedThumbnail }) => {\n  const selectThumbnail = useCallback(() => {\n    setSelectedThumbnail(thumbnail);\n  }, [setSelectedThumbnail, thumbnail]);\n\n  return (\n    <div\n      className={classNames({\n        choice: true,\n        active: selected\n      })}\n      style={{ backgroundImage: `url(${thumbnail.preview})` }}\n      onClick={selectThumbnail}\n    />\n  );\n};\n\nexport default Thumbnail;\n","import { useCallback } from \"react\";\nimport classNames from \"classnames\";\nimport \"./css/index.scoped.css\";\n\nconst CustomThumbnail = ({\n  thumbnail,\n  selected,\n  onUpload,\n  setSelectedThumbnail,\n  removeCustomThumbnail\n}) => {\n  const selectThumbnail = useCallback(() => {\n    setSelectedThumbnail(thumbnail);\n  }, [setSelectedThumbnail, thumbnail]);\n\n  if (thumbnail) {\n    return (\n      <div\n        className={classNames({\n          \"custom-image\": true,\n          active: selected\n        })}\n        style={{ backgroundImage: `url(${thumbnail.preview})` }}\n        onClick={selectThumbnail}\n      >\n        <div className=\"remove-btn\" onClick={removeCustomThumbnail}>\n          <i className=\"fas fa-trash\"></i>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <label className=\"custom-choice\" htmlFor=\"thumbnail\">\n      <i className=\"fas fa-images\" />\n      <p className=\"choice-text\">Upload a Thumbnail</p>\n      <input\n        type=\"file\"\n        id=\"thumbnail\"\n        onChange={onUpload}\n        multiple={false}\n        accept=\"image/*\"\n      />\n    </label>\n  );\n};\n\nexport default CustomThumbnail;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport classNames from \"classnames\";\nimport Modal from \"../../../../common/Modal\";\nimport ModalSubmit from \"../../../../common/Modal/components/ModalSubmit\";\nimport \"./css/index.scoped.css\";\nimport Thumbnail from \"./components/Thumbnail\";\nimport CustomThumbnail from \"./components/CustomThumbnail\";\n\ninterface ThumbnailProps {\n  preview: string;\n  blob: Blob;\n}\n\nconst getCanvasBlob = (canvas: HTMLCanvasElement) =>\n  new Promise(resolve =>\n    canvas.toBlob(blob => {\n      resolve(blob);\n    })\n  );\n\nasync function extractFramesFromVideo(\n  videoObjectUrl,\n  fps = 25,\n  limit = 3,\n  randomFrames = true\n): Promise<ThumbnailProps[]> {\n  return new Promise(async resolve => {\n    let video = document.createElement(\"video\");\n\n    let seekResolve;\n    video.addEventListener(\"seeked\", async function () {\n      if (seekResolve) seekResolve();\n    });\n\n    video.src = videoObjectUrl;\n\n    // workaround chromium metadata bug (https://stackoverflow.com/q/38062864/993683)\n    while (\n      (video.duration === Infinity || isNaN(video.duration)) &&\n      video.readyState < 2\n    ) {\n      await new Promise(r => setTimeout(r, 1000));\n      video.currentTime = 10000000 * Math.random();\n    }\n    let duration = video.duration;\n\n    let canvas = document.createElement(\"canvas\");\n    let context = canvas.getContext(\"2d\");\n    let [w, h] = [video.videoWidth, video.videoHeight];\n    canvas.width = w;\n    canvas.height = h;\n\n    let frames = [];\n    let interval = 15 / fps;\n    let currentTime = 0;\n\n    while (\n      (limit && frames.length < limit) ||\n      (!limit && currentTime < duration)\n    ) {\n      if (randomFrames) {\n        video.currentTime = Math.random() * duration;\n      } else {\n        video.currentTime = currentTime;\n      }\n      let promiseSeekResolve = await new Promise(resolve => resolve);\n      seekResolve = promiseSeekResolve;\n\n      context.drawImage(video, 0, 0, w, h);\n      let base64ImageData = canvas.toDataURL();\n      let canvasBlob = getCanvasBlob(canvas);\n\n      frames.push({ preview: base64ImageData, blob: canvasBlob });\n      currentTime += interval;\n    }\n    resolve(frames);\n  });\n}\n\nconst UploadThumbnail = ({\n  open = false,\n  toggleModal,\n  target,\n  setVideoThumbnails\n}) => {\n  const [selectedThumbnail, setSelectedThumbnailPreview] = useState<\n    string | undefined\n  >();\n  const [selectedThumbnailFile, setSelectedThumbnailFile] = useState<\n    string | undefined\n  >();\n  const [customThumbnail, setCustomThumbnail] = useState<ThumbnailProps>();\n  const [videoPlaying, setVideoPlaying] = useState(false);\n  const [videoFrames, setVideoFrames] = useState<ThumbnailProps[]>([]);\n  const videoElement = useRef<HTMLVideoElement>();\n\n  const setSelectedThumbnail = useCallback(thumbnail => {\n    setSelectedThumbnailPreview(thumbnail.preview);\n    setSelectedThumbnailFile(thumbnail.blob);\n  }, []);\n\n  const onUpload = useCallback(e => {\n    const [thumbnail] = e.target.files;\n\n    if (!thumbnail || !thumbnail.type.includes(\"image/\")) {\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.addEventListener(\"load\", () => {\n      if (typeof reader.result !== \"string\") {\n        return;\n      }\n\n      const data: ThumbnailProps = { preview: reader.result, blob: thumbnail };\n      setCustomThumbnail(data);\n      setSelectedThumbnail(data);\n      console.log(data);\n    });\n\n    reader.readAsDataURL(thumbnail);\n  }, [setSelectedThumbnail]);\n\n  const loadVideoFrames = useCallback(async () => {\n    const frames = await extractFramesFromVideo(target.uri);\n    setVideoFrames(frames);\n    setSelectedThumbnail(frames[0]);\n  }, [target, setSelectedThumbnail]);\n\n  useEffect(() => {\n    if (!target?.uri) {\n      return;\n    }\n\n    loadVideoFrames();\n  }, [loadVideoFrames, target]);\n\n  const updateThumbnail = useCallback(() => {\n    const targetName = `${target.type}-${target.index}`;\n    setVideoThumbnails(thumbnails => ({\n      ...thumbnails,\n      [targetName]: selectedThumbnailFile\n    }));\n    toggleModal();\n  }, [setVideoThumbnails, toggleModal, target, selectedThumbnailFile]);\n\n  const playVideo = useCallback(async () => {\n    if (!videoElement.current) {\n      return;\n    }\n\n    if (\n      videoElement.current.currentTime > 0 &&\n      !videoElement.current.paused &&\n      videoElement.current.readyState > 2\n    ) {\n      videoElement.current.pause();\n      setVideoPlaying(false);\n      return;\n    }\n\n    videoElement.current.play();\n    setVideoPlaying(true);\n  }, [videoElement]);\n\n  const removeCustomThumbnail = useCallback(() => {\n    setCustomThumbnail(null);\n\n    if (videoFrames.length) {\n      setSelectedThumbnail(videoFrames[0]);\n    }\n  }, [videoFrames, setSelectedThumbnail]);\n\n  const onEnded = useCallback(() => {\n    setVideoPlaying(false);\n  }, []);\n\n  return (\n    <Modal\n      modalOpen={open}\n      toggleModal={toggleModal}\n      modalTitle=\"Upload Video Thumbnail\"\n    >\n      <div className=\"section\">\n        <p className=\"section-title\">Choose a Thumbnail</p>\n        <div className=\"choices\">\n          <CustomThumbnail\n            onUpload={onUpload}\n            removeCustomThumbnail={removeCustomThumbnail}\n            setSelectedThumbnail={setSelectedThumbnail}\n            selected={customThumbnail?.preview === selectedThumbnail}\n            thumbnail={customThumbnail}\n          />\n          {videoFrames.map(frame => (\n            <Thumbnail\n              thumbnail={frame}\n              selected={selectedThumbnail === frame.preview}\n              setSelectedThumbnail={setSelectedThumbnail}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"section preview\">\n        <p className=\"section-title\">Video Preview</p>\n        <div\n          className={classNames({\n            \"sample-video\": true,\n            \"video-playing\": videoPlaying\n          })}\n          onClick={playVideo}\n        >\n          <div className=\"play-btn\">\n            <i className=\"fas fa-play\"></i>\n          </div>\n          {selectedThumbnail && (\n            <img src={selectedThumbnail} alt=\"Video thumbnail preview\" />\n          )}\n          {target?.uri && (\n            <video src={target.uri} ref={videoElement} onEnded={onEnded} />\n          )}\n        </div>\n      </div>\n      <ModalSubmit text=\"Update Thumbnail\" onClick={updateThumbnail} />\n    </Modal>\n  );\n};\n\nexport default UploadThumbnail;\n","import { useCallback, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport c from \"classnames\";\nimport { v1 as uuid } from \"uuid\";\n\nimport \"./css/index.scoped.css\";\n\nimport Loader from \"../../common/Loader\";\nimport Http from \"../../utils/Http\";\nimport {\n  addPublishedContent,\n  removeUnavailableToken\n} from \"../../actions/ContentActions\";\nimport { RequestToken } from \"../../utils/seed\";\nimport { useHistory } from \"react-router\";\nimport * as Store from \"../../store\";\nimport Modal from \"../../common/Modal\";\nimport DarkPage from \"../../common/DarkPage\";\nimport UploadThumbnail from \"./components/UploadThumbnail\";\nimport * as gStyles from \"../../styles\";\nimport * as Schema from \"../../schema\";\n\nconst PublishContentPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const seedProviderPub = Store.useSelector(\n    ({ content }) => content.seedProviderPub\n  );\n  const { seedUrl, seedToken } = Store.useSelector(\n    ({ content }) => content.seedInfo\n  );\n  const availableTokens = Store.useSelector(\n    ({ content }) => content.availableTokens\n  );\n  const userProfiles = Store.useSelector(({ userProfiles }) => userProfiles);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [mediaPreviews, setMediaPreviews] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [thumbnailOpen, setThumbnailOpen] = useState(false);\n  const [videoThumbnails, setVideoThumbnails] = useState({});\n  const [thumbnailTarget, setThumbnailTarget] = useState(null);\n  const [titleMissing, setTitleMissing] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [postType, setPostType] = useState<\"public\" | \"private\">(\"public\");\n  const imageFile = useRef(null);\n  const videoFile = useRef(null);\n  const [promptInfo, setPromptInfo] = useState(null);\n  const selfPublicKey = Store.useSelector(Store.selectSelfPublicKey);\n\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const onSubmitCb = useCallback(\n    async (servicePrice?, serviceID?) => {\n      if (loading) {\n        return;\n      }\n      console.log([title, description, mediaPreviews, videoThumbnails]);\n      if (!title) {\n        setError(\"Please input a title\");\n        setTitleMissing(true);\n        return;\n      }\n      if (selectedFiles.length === 0) {\n        setError(\"No selected files\");\n        return;\n      }\n      setLoading(true);\n      let res: Response | null = null;\n      try {\n        const {\n          seedUrl: finalSeedUrl,\n          tokens,\n          deleteToken\n        } = await RequestToken({\n          availableTokens,\n          seedProviderPub,\n          seedToken,\n          seedUrl,\n          serviceID,\n          servicePrice\n        });\n        const formData = new FormData();\n        //TODO support public/private content by requesting two tokens and doing this req twice\n        await Promise.all(\n          mediaPreviews.map(async preview => {\n            const extension = preview.file.type.replace(`${preview.type}/`, \"\");\n            const fileName = `${preview.type}-${preview.index}`;\n\n            if (preview.type === \"video\") {\n              const thumbnail = videoThumbnails[fileName];\n\n              formData.append(\n                \"files\",\n                preview.file,\n                `${fileName}.${extension}`\n              );\n\n              if (thumbnail && thumbnail.type) {\n                // extract extension from base64\n                const extension = thumbnail.type?.replace(/.*\\//gi, \"\");\n\n                formData.append(\n                  \"files\",\n                  thumbnail,\n                  `${fileName}-thumb.${extension}`\n                );\n              }\n\n              return;\n            }\n\n            formData.append(\"files\", preview.file);\n          })\n        );\n        formData.append(\"info\", \"extraInfo\");\n        formData.append(\"comment\", \"comment\");\n        console.log(\"Form Data:\", formData);\n        res = await fetch(`${finalSeedUrl}/api/put_file`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${tokens[0]}`\n          },\n          body: formData\n        });\n        const resJson = await res.json();\n        console.log(resJson);\n        if (resJson.error && resJson.error.message) {\n          const err = resJson.error.message;\n          if (err === \"The provided token has already been used\") {\n            setError(\"An error occurred, please try again\");\n            removeUnavailableToken(finalSeedUrl, tokens[0])(dispatch);\n          } else {\n            setError(err);\n          }\n          setLoading(false);\n          return;\n        }\n        const { torrent } = resJson.data;\n        const { magnet } = torrent;\n        const [firstFile] = mediaPreviews;\n        console.log(firstFile);\n\n        const type =\n          firstFile.type === \"video\"\n            ? (\"video/embedded\" as const)\n            : (\"image/embedded\" as const);\n\n        const contentItem: Schema.PublicContentItem = {\n          id: uuid(),\n          timestamp: Date.now(),\n          author: selfPublicKey,\n          type,\n          magnetURI: magnet,\n          width: 0,\n          height: 0,\n          title,\n          description\n        };\n        const published = await addPublishedContent(\n          contentItem,\n          postType\n        )(dispatch);\n        console.log(\"content publish complete\");\n        console.log(published);\n        setLoading(false);\n        if (deleteToken) {\n          removeUnavailableToken(finalSeedUrl, tokens[0])(dispatch);\n        }\n        history.replace(\"/profile\");\n      } catch (err) {\n        console.error(err);\n        if (res) {\n          res\n            .text()\n            .then(txt => {\n              console.error(`Response data as text: `, txt);\n            })\n            .catch(e => {\n              console.error(`Could not process bad response data as text: `, e);\n            });\n        }\n        setError(err?.errorMessage ?? err?.message);\n        setLoading(false);\n      }\n    },\n    [\n      availableTokens,\n      description,\n      dispatch,\n      history,\n      mediaPreviews,\n      postType,\n      seedProviderPub,\n      seedToken,\n      seedUrl,\n      selectedFiles,\n      selfPublicKey,\n      title,\n      videoThumbnails,\n      loading\n    ]\n  );\n\n  const closePrompt = useCallback(() => {\n    setPromptInfo(null);\n  }, [setPromptInfo]);\n  const submitPrompt = useCallback(() => {\n    const { servicePrice, serviceID } = promptInfo;\n    onSubmitCb(servicePrice, serviceID);\n    setPromptInfo(null);\n  }, [promptInfo, onSubmitCb, setPromptInfo]);\n\n  const onSubmit = useCallback(\n    async e => {\n      e.preventDefault();\n      let availableToken = false;\n      for (const key in availableTokens) {\n        if (Object.prototype.hasOwnProperty.call(availableTokens, key)) {\n          const element = availableTokens[key];\n          if (element[0]) {\n            availableToken = true;\n            break;\n          }\n        }\n      }\n      let serviceID = \"\";\n      if (userProfiles[seedProviderPub]) {\n        //@ts-expect-error\n        serviceID = userProfiles[seedProviderPub].offerSeedService;\n      }\n      if (availableToken || (seedUrl && seedToken)) {\n        onSubmitCb();\n      } else if (serviceID && seedProviderPub) {\n        const { data: servicePrice } = await Http.get(\n          `/api/gun/otheruser/${seedProviderPub}/once/offeredServices>${serviceID}>servicePrice`\n        );\n\n        setPromptInfo({ servicePrice, serviceID });\n      } else {\n        setError(\"No way found to publish content\");\n      }\n    },\n    [\n      availableTokens,\n      setPromptInfo,\n      setError,\n      onSubmitCb,\n      userProfiles,\n      seedProviderPub,\n      seedToken,\n      seedUrl\n    ]\n  );\n\n  const onDiscard = useCallback(\n    async e => {\n      e.preventDefault();\n      setTitle(\"\");\n      setTitleMissing(false);\n      setDescription(\"\");\n      setError(null);\n      setPromptInfo(null);\n      setSelectedFiles([]);\n      setMediaPreviews([]);\n    },\n    [\n      setDescription,\n      setTitle,\n      setError,\n      setPromptInfo,\n      setSelectedFiles,\n      setMediaPreviews\n    ]\n  );\n  const onInputChange = useCallback(\n    e => {\n      const { value, name } = e.target;\n      //e.preventDefault()\n      switch (name) {\n        case \"title\": {\n          setTitleMissing(false);\n          setTitle(value);\n          return;\n        }\n        case \"description\": {\n          setDescription(value);\n          return;\n        }\n        case \"postType\": {\n          setPostType(value);\n          return;\n        }\n        case \"createPost\": {\n          console.log(\"create post\");\n          return;\n        }\n        default:\n          return;\n      }\n    },\n    [setTitle, setDescription]\n  );\n  const onSelectedFile = useCallback(\n    e => {\n      e.preventDefault();\n\n      console.log(e.target.files);\n      setSelectedFiles(e.target.files);\n      const promises = Array.from(e.target.files).map((file, index) => {\n        console.log(\"doing file...\");\n        return new Promise(res => {\n          //@ts-expect-error\n          const { type } = file;\n          const reader = new FileReader();\n\n          reader.onload = function (e) {\n            if (type.startsWith(\"image/\")) {\n              res({ type: \"image\", uri: e.target.result, index, file });\n            }\n            if (type.startsWith(\"video/\")) {\n              res({ type: \"video\", uri: e.target.result, index, file });\n            }\n          };\n          //@ts-expect-error\n          reader.readAsDataURL(file);\n        });\n      });\n      Promise.allSettled(promises).then(res => {\n        const previews = [];\n        res.forEach(singleRes => {\n          if (singleRes.status === \"fulfilled\") {\n            previews.push(singleRes.value);\n          }\n        });\n        console.log(previews);\n        setMediaPreviews(previews);\n      });\n    },\n    [setSelectedFiles, setMediaPreviews]\n  );\n  const onSelectImageFile = useCallback(\n    e => {\n      e.preventDefault();\n      //imageFile.current.onChange =\n      imageFile.current.click();\n    },\n    [imageFile]\n  );\n  const onSelectVideoFile = useCallback(\n    e => {\n      e.preventDefault();\n      videoFile.current.click();\n    },\n    [videoFile]\n  );\n\n  const toggleModal = useCallback(() => {\n    setThumbnailOpen(!thumbnailOpen);\n  }, [thumbnailOpen]);\n\n  return (\n    <DarkPage padding pageTitle=\"PUBLISH CONTENT\" scrolls>\n      {loading ? (\n        <Loader overlay fullScreen text=\"Publishing content...\" />\n      ) : null}\n\n      <h2>\n        Add to Library<div className=\"line\"></div>\n      </h2>\n\n      <form\n        className=\"publish-content-form\"\n        onSubmit={onSubmit}\n        onReset={onDiscard}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\"\n          }}\n        >\n          <div className=\"publish-content-title\">\n            <label htmlFor=\"title\">\n              <strong>Title</strong>\n            </label>\n          </div>\n          <div>\n            <strong>\n              Audience:{\" \"}\n              <i\n                className={`fas ${\n                  postType === \"public\" ? \"fa-globe-europe\" : \"fa-credit-card\"\n                }`}\n              ></i>\n            </strong>\n            <select\n              name=\"postType\"\n              id=\"postType\"\n              onChange={onInputChange}\n              style={{\n                appearance: \"none\",\n                backgroundColor: \"rgba(0,0,0,0)\",\n                color: \"var(--main-blue)\",\n                marginLeft: \"0.3rem\"\n              }}\n            >\n              <option\n                value=\"public\"\n                style={{\n                  backgroundColor: \"rgba(0,0,0,0)\",\n                  color: \"var(--main-blue)\"\n                }}\n              >\n                Public\n              </option>\n              <option value=\"private\">Paywall</option>\n            </select>\n          </div>\n        </div>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"How I monetized my content with Lightning.Page\"\n          value={title}\n          onChange={onInputChange}\n          className={c(\"input-field\", titleMissing && \"input-field-error\")}\n        />\n        <div className=\"publish-content-title\">\n          <label htmlFor=\"contents\">\n            <strong>Contents</strong>\n          </label>\n        </div>\n\n        <div\n          className={\n            mediaPreviews.length > 0\n              ? gStyles.displayNone\n              : \"publish-content-icons\"\n          }\n        >\n          <i\n            className=\"fas fa-images publish-content-icon\"\n            onClick={onSelectImageFile}\n          ></i>\n\n          <i\n            className=\"fas fa-video publish-content-icon\"\n            onClick={onSelectVideoFile}\n          ></i>\n        </div>\n\n        <div\n          className={c({\n            [c(\"publish-content-preview\", gStyles.commonMarginHNegative)]:\n              mediaPreviews.length > 0,\n            [gStyles.displayNone]: mediaPreviews.length === 0\n          })}\n        >\n          {mediaPreviews.length > 0 &&\n            mediaPreviews.map((prev, i) => {\n              if (prev.type === \"image\") {\n                return (\n                  <img\n                    alt={`Media preview ${i + 1}`}\n                    src={prev.uri}\n                    key={prev.index.toString()}\n                    width={288}\n                    className=\"m-1\"\n                  />\n                );\n              }\n\n              if (prev.type === \"video\") {\n                return (\n                  <div className=\"video-preview\">\n                    <div\n                      className=\"change-thumbnail-btn\"\n                      onClick={() => {\n                        toggleModal();\n                        setThumbnailTarget(prev);\n                      }}\n                    >\n                      <i className=\"fas fa-images\" />\n                    </div>\n                    <video\n                      src={prev.uri}\n                      key={prev.index.toString()}\n                      controls\n                      width={288}\n                      className=\"m-1\"\n                    />\n                  </div>\n                );\n              }\n\n              console.error(\n                `Unknown type of preview --| ${prev.type} |-- found inside <PublishContentPage />`\n              );\n              return null;\n            })}\n\n          <div\n            className=\"remove-btn\"\n            onClick={useCallback(() => {\n              setSelectedFiles([]);\n              setMediaPreviews([]);\n            }, [])}\n          >\n            <i className=\"far fa-trash-alt\" />\n          </div>\n          <div\n            className=\"remove-btn\"\n            onClick={useCallback(() => {\n              setSelectedFiles([]);\n              setMediaPreviews([]);\n            }, [])}\n          >\n            <i className=\"far fa-trash-alt\" />\n          </div>\n        </div>\n        <div className=\"publish-content-title\">\n          <label htmlFor=\"description\">\n            <strong>Description</strong>\n          </label>\n        </div>\n        <textarea\n          name=\"description\"\n          placeholder=\"I made a quick video to show you guys how easy it is to run your own social platform on Lightning.Page, and start earning Bitcoin\"\n          rows={3}\n          value={description}\n          onChange={onInputChange}\n          className=\"input-field\"\n        />\n\n        {error ? <p className=\"error-container\">{error}</p> : null}\n        <div className=\"flex-center\">\n          <input type=\"reset\" value=\"Reset\" className=\"shock-form-button m-1\" />\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            className=\"shock-form-button-confirm m-1\"\n          />\n        </div>\n      </form>\n      {promptInfo && (\n        <Modal\n          modalOpen={promptInfo && !loading}\n          toggleModal={closePrompt}\n          contentClass=\"p-1\"\n          forceRenderTitleBar\n          blueBtn=\"Confirm\"\n          noFullWidth\n          onClickBlueBtn={submitPrompt}\n        >\n          <p className=\"text-align-center\">\n            The service from the default service provider will cost:{\" \"}\n            <strong>{promptInfo.servicePrice} sats</strong>\n          </p>\n        </Modal>\n      )}\n      <UploadThumbnail\n        open={thumbnailOpen}\n        toggleModal={toggleModal}\n        target={thumbnailTarget}\n        setVideoThumbnails={setVideoThumbnails}\n      />\n\n      <input\n        type=\"file\"\n        id=\"file\"\n        ref={imageFile}\n        className={gStyles.displayNone}\n        accept=\"image/*\"\n        onChange={onSelectedFile}\n      />\n      <input\n        type=\"file\"\n        id=\"file\"\n        ref={videoFile}\n        className={gStyles.displayNone}\n        accept=\"video/*\"\n        onChange={onSelectedFile}\n      />\n    </DarkPage>\n  );\n};\n\nexport default PublishContentPage;\n"],"sourceRoot":""}